<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="29287"><g><title>.annobin_rtld.c (8 samples, 0.03%)</title><rect x="0.0000%" y="629" width="0.0273%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="8"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.02%)</title><rect x="0.0273%" y="629" width="0.0205%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="6"/><text x="0.2773%" y="639.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (26 samples, 0.09%)</title><rect x="0.0478%" y="629" width="0.0888%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="26"/><text x="0.2978%" y="639.50"></text></g><g><title>&lt;dryadsynth_bv::rule::shift::ShrRule as dryadsynth_bv::rule::Rule&gt;::evaluate (4 samples, 0.01%)</title><rect x="0.1366%" y="629" width="0.0137%" height="15" fill="rgb(248,212,6)" fg:x="40" fg:w="4"/><text x="0.3866%" y="639.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (15 samples, 0.05%)</title><rect x="0.1502%" y="613" width="0.0512%" height="15" fill="rgb(208,68,35)" fg:x="44" fg:w="15"/><text x="0.4002%" y="623.50"></text></g><g><title>&lt;dryadsynth_bv::rule::shift::ShrRule as dryadsynth_bv::rule::Rule&gt;::evaluate (4 samples, 0.01%)</title><rect x="0.2049%" y="613" width="0.0137%" height="15" fill="rgb(232,128,0)" fg:x="60" fg:w="4"/><text x="0.4549%" y="623.50"></text></g><g><title>__memset_avx2_unaligned_erms (5 samples, 0.02%)</title><rect x="0.2219%" y="597" width="0.0171%" height="15" fill="rgb(207,160,47)" fg:x="65" fg:w="5"/><text x="0.4719%" y="607.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve (3 samples, 0.01%)</title><rect x="0.2527%" y="597" width="0.0102%" height="15" fill="rgb(228,23,34)" fg:x="74" fg:w="3"/><text x="0.5027%" y="607.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve_internal (3 samples, 0.01%)</title><rect x="0.2527%" y="581" width="0.0102%" height="15" fill="rgb(218,30,26)" fg:x="74" fg:w="3"/><text x="0.5027%" y="591.50"></text></g><g><title>&lt;&amp;bumpalo::Bump as bumpalo::alloc::Alloc&gt;::realloc (3 samples, 0.01%)</title><rect x="0.2527%" y="565" width="0.0102%" height="15" fill="rgb(220,122,19)" fg:x="74" fg:w="3"/><text x="0.5027%" y="575.50"></text></g><g><title>bumpalo::Bump::grow (3 samples, 0.01%)</title><rect x="0.2527%" y="549" width="0.0102%" height="15" fill="rgb(250,228,42)" fg:x="74" fg:w="3"/><text x="0.5027%" y="559.50"></text></g><g><title>core::intrinsics::copy (3 samples, 0.01%)</title><rect x="0.2527%" y="533" width="0.0102%" height="15" fill="rgb(240,193,28)" fg:x="74" fg:w="3"/><text x="0.5027%" y="543.50"></text></g><g><title>[unknown] (15 samples, 0.05%)</title><rect x="0.2185%" y="613" width="0.0512%" height="15" fill="rgb(216,20,37)" fg:x="64" fg:w="15"/><text x="0.4685%" y="623.50"></text></g><g><title>__GI___libc_free (4 samples, 0.01%)</title><rect x="0.2697%" y="613" width="0.0137%" height="15" fill="rgb(206,188,39)" fg:x="79" fg:w="4"/><text x="0.5197%" y="623.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.07%)</title><rect x="0.2834%" y="613" width="0.0683%" height="15" fill="rgb(217,207,13)" fg:x="83" fg:w="20"/><text x="0.5334%" y="623.50"></text></g><g><title>__GI___libc_realloc (57 samples, 0.19%)</title><rect x="0.3517%" y="613" width="0.1946%" height="15" fill="rgb(231,73,38)" fg:x="103" fg:w="57"/><text x="0.6017%" y="623.50"></text></g><g><title>__memset_avx2_unaligned_erms (10 samples, 0.03%)</title><rect x="0.5497%" y="613" width="0.0341%" height="15" fill="rgb(225,20,46)" fg:x="161" fg:w="10"/><text x="0.7997%" y="623.50"></text></g><g><title>__rdl_alloc (6 samples, 0.02%)</title><rect x="0.5839%" y="613" width="0.0205%" height="15" fill="rgb(210,31,41)" fg:x="171" fg:w="6"/><text x="0.8339%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.02%)</title><rect x="0.5839%" y="597" width="0.0205%" height="15" fill="rgb(221,200,47)" fg:x="171" fg:w="6"/><text x="0.8339%" y="607.50"></text></g><g><title>__rdl_realloc (42 samples, 0.14%)</title><rect x="0.6044%" y="613" width="0.1434%" height="15" fill="rgb(226,26,5)" fg:x="177" fg:w="42"/><text x="0.8544%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (22 samples, 0.08%)</title><rect x="0.6727%" y="597" width="0.0751%" height="15" fill="rgb(249,33,26)" fg:x="197" fg:w="22"/><text x="0.9227%" y="607.50"></text></g><g><title>_int_free (56 samples, 0.19%)</title><rect x="0.7478%" y="613" width="0.1912%" height="15" fill="rgb(235,183,28)" fg:x="219" fg:w="56"/><text x="0.9978%" y="623.50"></text></g><g><title>_int_malloc (59 samples, 0.20%)</title><rect x="0.9390%" y="613" width="0.2015%" height="15" fill="rgb(221,5,38)" fg:x="275" fg:w="59"/><text x="1.1890%" y="623.50"></text></g><g><title>_int_realloc (45 samples, 0.15%)</title><rect x="1.1404%" y="613" width="0.1537%" height="15" fill="rgb(247,18,42)" fg:x="334" fg:w="45"/><text x="1.3904%" y="623.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (25 samples, 0.09%)</title><rect x="1.2941%" y="613" width="0.0854%" height="15" fill="rgb(241,131,45)" fg:x="379" fg:w="25"/><text x="1.5441%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (59 samples, 0.20%)</title><rect x="1.3795%" y="613" width="0.2015%" height="15" fill="rgb(249,31,29)" fg:x="404" fg:w="59"/><text x="1.6295%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (50 samples, 0.17%)</title><rect x="1.4102%" y="597" width="0.1707%" height="15" fill="rgb(225,111,53)" fg:x="413" fg:w="50"/><text x="1.6602%" y="607.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (32 samples, 0.11%)</title><rect x="1.4716%" y="581" width="0.1093%" height="15" fill="rgb(238,160,17)" fg:x="431" fg:w="32"/><text x="1.7216%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (32 samples, 0.11%)</title><rect x="1.4716%" y="565" width="0.1093%" height="15" fill="rgb(214,148,48)" fg:x="431" fg:w="32"/><text x="1.7216%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (87 samples, 0.30%)</title><rect x="1.5809%" y="613" width="0.2971%" height="15" fill="rgb(232,36,49)" fg:x="463" fg:w="87"/><text x="1.8309%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (23 samples, 0.08%)</title><rect x="1.7994%" y="597" width="0.0785%" height="15" fill="rgb(209,103,24)" fg:x="527" fg:w="23"/><text x="2.0494%" y="607.50"></text></g><g><title>alloc::alloc::Global::grow_impl (23 samples, 0.08%)</title><rect x="1.7994%" y="581" width="0.0785%" height="15" fill="rgb(229,88,8)" fg:x="527" fg:w="23"/><text x="2.0494%" y="591.50"></text></g><g><title>alloc::alloc::realloc (23 samples, 0.08%)</title><rect x="1.7994%" y="565" width="0.0785%" height="15" fill="rgb(213,181,19)" fg:x="527" fg:w="23"/><text x="2.0494%" y="575.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve (19 samples, 0.06%)</title><rect x="1.8780%" y="613" width="0.0649%" height="15" fill="rgb(254,191,54)" fg:x="550" fg:w="19"/><text x="2.1280%" y="623.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve_internal (4 samples, 0.01%)</title><rect x="1.9292%" y="597" width="0.0137%" height="15" fill="rgb(241,83,37)" fg:x="565" fg:w="4"/><text x="2.1792%" y="607.50"></text></g><g><title>dryadsynth_bv::algo::Algo::run (49 samples, 0.17%)</title><rect x="1.9497%" y="613" width="0.1673%" height="15" fill="rgb(233,36,39)" fg:x="571" fg:w="49"/><text x="2.1997%" y="623.50"></text></g><g><title>dryadsynth_bv::algo::Algo::derive (41 samples, 0.14%)</title><rect x="1.9770%" y="597" width="0.1400%" height="15" fill="rgb(226,3,54)" fg:x="579" fg:w="41"/><text x="2.2270%" y="607.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::derive_from (66 samples, 0.23%)</title><rect x="2.1170%" y="613" width="0.2254%" height="15" fill="rgb(245,192,40)" fg:x="620" fg:w="66"/><text x="2.3670%" y="623.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::derive_from_shr (3 samples, 0.01%)</title><rect x="2.3423%" y="613" width="0.0102%" height="15" fill="rgb(238,167,29)" fg:x="686" fg:w="3"/><text x="2.5923%" y="623.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::new (29 samples, 0.10%)</title><rect x="2.3526%" y="613" width="0.0990%" height="15" fill="rgb(232,182,51)" fg:x="689" fg:w="29"/><text x="2.6026%" y="623.50"></text></g><g><title>dryadsynth_bv::rule::binary::AddRule::derive_from (15 samples, 0.05%)</title><rect x="2.4516%" y="613" width="0.0512%" height="15" fill="rgb(231,60,39)" fg:x="718" fg:w="15"/><text x="2.7016%" y="623.50"></text></g><g><title>bumpalo::collections::vec::Vec&lt;T&gt;::push (7 samples, 0.02%)</title><rect x="2.5267%" y="581" width="0.0239%" height="15" fill="rgb(208,69,12)" fg:x="740" fg:w="7"/><text x="2.7767%" y="591.50"></text></g><g><title>bumpalo::collections::vec::Vec&lt;T&gt;::reserve (7 samples, 0.02%)</title><rect x="2.5267%" y="565" width="0.0239%" height="15" fill="rgb(235,93,37)" fg:x="740" fg:w="7"/><text x="2.7767%" y="575.50"></text></g><g><title>dryadsynth_bv::rule::binary::AndRule::derive_from (15 samples, 0.05%)</title><rect x="2.5028%" y="613" width="0.0512%" height="15" fill="rgb(213,116,39)" fg:x="733" fg:w="15"/><text x="2.7528%" y="623.50"></text></g><g><title>dryadsynth_bv::bv::Context::collect_with_indices (8 samples, 0.03%)</title><rect x="2.5267%" y="597" width="0.0273%" height="15" fill="rgb(222,207,29)" fg:x="740" fg:w="8"/><text x="2.7767%" y="607.50"></text></g><g><title>dryadsynth_bv::rule::binary::OrRule::derive_from (15 samples, 0.05%)</title><rect x="2.5540%" y="613" width="0.0512%" height="15" fill="rgb(206,96,30)" fg:x="748" fg:w="15"/><text x="2.8040%" y="623.50"></text></g><g><title>dryadsynth_bv::bv::Context::collect_with_indices (3 samples, 0.01%)</title><rect x="2.5950%" y="597" width="0.0102%" height="15" fill="rgb(218,138,4)" fg:x="760" fg:w="3"/><text x="2.8450%" y="607.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_zeros (3 samples, 0.01%)</title><rect x="2.5950%" y="581" width="0.0102%" height="15" fill="rgb(250,191,14)" fg:x="760" fg:w="3"/><text x="2.8450%" y="591.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_default (3 samples, 0.01%)</title><rect x="2.5950%" y="565" width="0.0102%" height="15" fill="rgb(239,60,40)" fg:x="760" fg:w="3"/><text x="2.8450%" y="575.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (3 samples, 0.01%)</title><rect x="2.5950%" y="549" width="0.0102%" height="15" fill="rgb(206,27,48)" fg:x="760" fg:w="3"/><text x="2.8450%" y="559.50"></text></g><g><title>core::ptr::write (3 samples, 0.01%)</title><rect x="2.5950%" y="533" width="0.0102%" height="15" fill="rgb(225,35,8)" fg:x="760" fg:w="3"/><text x="2.8450%" y="543.50"></text></g><g><title>dryadsynth_bv::rule::binary::XorRule::derive_from (20 samples, 0.07%)</title><rect x="2.6053%" y="613" width="0.0683%" height="15" fill="rgb(250,213,24)" fg:x="763" fg:w="20"/><text x="2.8553%" y="623.50"></text></g><g><title>dryadsynth_bv::bv::Context::collect (5 samples, 0.02%)</title><rect x="2.6565%" y="597" width="0.0171%" height="15" fill="rgb(247,123,22)" fg:x="778" fg:w="5"/><text x="2.9065%" y="607.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_zeros (5 samples, 0.02%)</title><rect x="2.6565%" y="581" width="0.0171%" height="15" fill="rgb(231,138,38)" fg:x="778" fg:w="5"/><text x="2.9065%" y="591.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_default (5 samples, 0.02%)</title><rect x="2.6565%" y="565" width="0.0171%" height="15" fill="rgb(231,145,46)" fg:x="778" fg:w="5"/><text x="2.9065%" y="575.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (5 samples, 0.02%)</title><rect x="2.6565%" y="549" width="0.0171%" height="15" fill="rgb(251,118,11)" fg:x="778" fg:w="5"/><text x="2.9065%" y="559.50"></text></g><g><title>core::ptr::write (5 samples, 0.02%)</title><rect x="2.6565%" y="533" width="0.0171%" height="15" fill="rgb(217,147,25)" fg:x="778" fg:w="5"/><text x="2.9065%" y="543.50"></text></g><g><title>dryadsynth_bv::rule::shift::NotRule::derive_from (12 samples, 0.04%)</title><rect x="2.6735%" y="613" width="0.0410%" height="15" fill="rgb(247,81,37)" fg:x="783" fg:w="12"/><text x="2.9235%" y="623.50"></text></g><g><title>dryadsynth_bv::bv::Context::collect (5 samples, 0.02%)</title><rect x="2.6974%" y="597" width="0.0171%" height="15" fill="rgb(209,12,38)" fg:x="790" fg:w="5"/><text x="2.9474%" y="607.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_zeros (5 samples, 0.02%)</title><rect x="2.6974%" y="581" width="0.0171%" height="15" fill="rgb(227,1,9)" fg:x="790" fg:w="5"/><text x="2.9474%" y="591.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_default (5 samples, 0.02%)</title><rect x="2.6974%" y="565" width="0.0171%" height="15" fill="rgb(248,47,43)" fg:x="790" fg:w="5"/><text x="2.9474%" y="575.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (5 samples, 0.02%)</title><rect x="2.6974%" y="549" width="0.0171%" height="15" fill="rgb(221,10,30)" fg:x="790" fg:w="5"/><text x="2.9474%" y="559.50"></text></g><g><title>core::ptr::write (5 samples, 0.02%)</title><rect x="2.6974%" y="533" width="0.0171%" height="15" fill="rgb(210,229,1)" fg:x="790" fg:w="5"/><text x="2.9474%" y="543.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShlRule::derive_from (12 samples, 0.04%)</title><rect x="2.7145%" y="613" width="0.0410%" height="15" fill="rgb(222,148,37)" fg:x="795" fg:w="12"/><text x="2.9645%" y="623.50"></text></g><g><title>dryadsynth_bv::bv::Context::collect_with_indices2 (5 samples, 0.02%)</title><rect x="2.7384%" y="597" width="0.0171%" height="15" fill="rgb(234,67,33)" fg:x="802" fg:w="5"/><text x="2.9884%" y="607.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_zeros (3 samples, 0.01%)</title><rect x="2.7452%" y="581" width="0.0102%" height="15" fill="rgb(247,98,35)" fg:x="804" fg:w="3"/><text x="2.9952%" y="591.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_default (3 samples, 0.01%)</title><rect x="2.7452%" y="565" width="0.0102%" height="15" fill="rgb(247,138,52)" fg:x="804" fg:w="3"/><text x="2.9952%" y="575.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (3 samples, 0.01%)</title><rect x="2.7452%" y="549" width="0.0102%" height="15" fill="rgb(213,79,30)" fg:x="804" fg:w="3"/><text x="2.9952%" y="559.50"></text></g><g><title>core::ptr::write (3 samples, 0.01%)</title><rect x="2.7452%" y="533" width="0.0102%" height="15" fill="rgb(246,177,23)" fg:x="804" fg:w="3"/><text x="2.9952%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (24 samples, 0.08%)</title><rect x="2.7828%" y="597" width="0.0819%" height="15" fill="rgb(230,62,27)" fg:x="815" fg:w="24"/><text x="3.0328%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (5 samples, 0.02%)</title><rect x="2.8648%" y="597" width="0.0171%" height="15" fill="rgb(216,154,8)" fg:x="839" fg:w="5"/><text x="3.1148%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (5 samples, 0.02%)</title><rect x="2.8648%" y="581" width="0.0171%" height="15" fill="rgb(244,35,45)" fg:x="839" fg:w="5"/><text x="3.1148%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="2.8648%" y="565" width="0.0171%" height="15" fill="rgb(251,115,12)" fg:x="839" fg:w="5"/><text x="3.1148%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.02%)</title><rect x="2.8648%" y="549" width="0.0171%" height="15" fill="rgb(240,54,50)" fg:x="839" fg:w="5"/><text x="3.1148%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.02%)</title><rect x="2.8648%" y="533" width="0.0171%" height="15" fill="rgb(233,84,52)" fg:x="839" fg:w="5"/><text x="3.1148%" y="543.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_indices (20 samples, 0.07%)</title><rect x="2.8818%" y="597" width="0.0683%" height="15" fill="rgb(207,117,47)" fg:x="844" fg:w="20"/><text x="3.1318%" y="607.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_iter (20 samples, 0.07%)</title><rect x="2.8818%" y="581" width="0.0683%" height="15" fill="rgb(249,43,39)" fg:x="844" fg:w="20"/><text x="3.1318%" y="591.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter (20 samples, 0.07%)</title><rect x="2.8818%" y="565" width="0.0683%" height="15" fill="rgb(209,38,44)" fg:x="844" fg:w="20"/><text x="3.1318%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (20 samples, 0.07%)</title><rect x="2.8818%" y="549" width="0.0683%" height="15" fill="rgb(236,212,23)" fg:x="844" fg:w="20"/><text x="3.1318%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.07%)</title><rect x="2.8818%" y="533" width="0.0683%" height="15" fill="rgb(242,79,21)" fg:x="844" fg:w="20"/><text x="3.1318%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (20 samples, 0.07%)</title><rect x="2.8818%" y="517" width="0.0683%" height="15" fill="rgb(211,96,35)" fg:x="844" fg:w="20"/><text x="3.1318%" y="527.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.07%)</title><rect x="2.8818%" y="501" width="0.0683%" height="15" fill="rgb(253,215,40)" fg:x="844" fg:w="20"/><text x="3.1318%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (20 samples, 0.07%)</title><rect x="2.8818%" y="485" width="0.0683%" height="15" fill="rgb(211,81,21)" fg:x="844" fg:w="20"/><text x="3.1318%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.07%)</title><rect x="2.8818%" y="469" width="0.0683%" height="15" fill="rgb(208,190,38)" fg:x="844" fg:w="20"/><text x="3.1318%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.07%)</title><rect x="2.8818%" y="453" width="0.0683%" height="15" fill="rgb(235,213,38)" fg:x="844" fg:w="20"/><text x="3.1318%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.07%)</title><rect x="2.8818%" y="437" width="0.0683%" height="15" fill="rgb(237,122,38)" fg:x="844" fg:w="20"/><text x="3.1318%" y="447.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShrRule::derive_from (75 samples, 0.26%)</title><rect x="2.7555%" y="613" width="0.2561%" height="15" fill="rgb(244,218,35)" fg:x="807" fg:w="75"/><text x="3.0055%" y="623.50"></text></g><g><title>dryadsynth_bv::bv::Context::collect2 (18 samples, 0.06%)</title><rect x="2.9501%" y="597" width="0.0615%" height="15" fill="rgb(240,68,47)" fg:x="864" fg:w="18"/><text x="3.2001%" y="607.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_zeros (18 samples, 0.06%)</title><rect x="2.9501%" y="581" width="0.0615%" height="15" fill="rgb(210,16,53)" fg:x="864" fg:w="18"/><text x="3.2001%" y="591.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_default (18 samples, 0.06%)</title><rect x="2.9501%" y="565" width="0.0615%" height="15" fill="rgb(235,124,12)" fg:x="864" fg:w="18"/><text x="3.2001%" y="575.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (18 samples, 0.06%)</title><rect x="2.9501%" y="549" width="0.0615%" height="15" fill="rgb(224,169,11)" fg:x="864" fg:w="18"/><text x="3.2001%" y="559.50"></text></g><g><title>core::ptr::write (18 samples, 0.06%)</title><rect x="2.9501%" y="533" width="0.0615%" height="15" fill="rgb(250,166,2)" fg:x="864" fg:w="18"/><text x="3.2001%" y="543.50"></text></g><g><title>[unknown] (841 samples, 2.87%)</title><rect x="0.1502%" y="629" width="2.8716%" height="15" fill="rgb(242,216,29)" fg:x="44" fg:w="841"/><text x="0.4002%" y="639.50">[u..</text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.01%)</title><rect x="3.0116%" y="613" width="0.0102%" height="15" fill="rgb(230,116,27)" fg:x="882" fg:w="3"/><text x="3.2616%" y="623.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.02%)</title><rect x="3.0218%" y="629" width="0.0171%" height="15" fill="rgb(228,99,48)" fg:x="885" fg:w="5"/><text x="3.2718%" y="639.50"></text></g><g><title>__memset_avx2_unaligned_erms (16 samples, 0.05%)</title><rect x="3.0423%" y="629" width="0.0546%" height="15" fill="rgb(253,11,6)" fg:x="891" fg:w="16"/><text x="3.2923%" y="639.50"></text></g><g><title>_int_free (79 samples, 0.27%)</title><rect x="3.1004%" y="629" width="0.2697%" height="15" fill="rgb(247,143,39)" fg:x="908" fg:w="79"/><text x="3.3504%" y="639.50"></text></g><g><title>_int_malloc (11 samples, 0.04%)</title><rect x="3.3701%" y="629" width="0.0376%" height="15" fill="rgb(236,97,10)" fg:x="987" fg:w="11"/><text x="3.6201%" y="639.50"></text></g><g><title>_int_realloc (33 samples, 0.11%)</title><rect x="3.4077%" y="629" width="0.1127%" height="15" fill="rgb(233,208,19)" fg:x="998" fg:w="33"/><text x="3.6577%" y="639.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (5 samples, 0.02%)</title><rect x="3.7184%" y="325" width="0.0171%" height="15" fill="rgb(216,164,2)" fg:x="1089" fg:w="5"/><text x="3.9684%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.01%)</title><rect x="3.7730%" y="309" width="0.0102%" height="15" fill="rgb(220,129,5)" fg:x="1105" fg:w="3"/><text x="4.0230%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (3 samples, 0.01%)</title><rect x="3.7730%" y="293" width="0.0102%" height="15" fill="rgb(242,17,10)" fg:x="1105" fg:w="3"/><text x="4.0230%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (17 samples, 0.06%)</title><rect x="3.7354%" y="325" width="0.0580%" height="15" fill="rgb(242,107,0)" fg:x="1094" fg:w="17"/><text x="3.9854%" y="335.50"></text></g><g><title>core::ptr::read (3 samples, 0.01%)</title><rect x="3.7832%" y="309" width="0.0102%" height="15" fill="rgb(251,28,31)" fg:x="1108" fg:w="3"/><text x="4.0332%" y="319.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (3 samples, 0.01%)</title><rect x="3.7832%" y="293" width="0.0102%" height="15" fill="rgb(233,223,10)" fg:x="1108" fg:w="3"/><text x="4.0332%" y="303.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (28 samples, 0.10%)</title><rect x="3.8242%" y="293" width="0.0956%" height="15" fill="rgb(215,21,27)" fg:x="1120" fg:w="28"/><text x="4.0742%" y="303.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (10 samples, 0.03%)</title><rect x="5.1729%" y="277" width="0.0341%" height="15" fill="rgb(232,23,21)" fg:x="1515" fg:w="10"/><text x="5.4229%" y="287.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (7 samples, 0.02%)</title><rect x="5.2856%" y="261" width="0.0239%" height="15" fill="rgb(244,5,23)" fg:x="1548" fg:w="7"/><text x="5.5356%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.02%)</title><rect x="5.2856%" y="245" width="0.0239%" height="15" fill="rgb(226,81,46)" fg:x="1548" fg:w="7"/><text x="5.5356%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (36 samples, 0.12%)</title><rect x="5.3095%" y="261" width="0.1229%" height="15" fill="rgb(247,70,30)" fg:x="1555" fg:w="36"/><text x="5.5595%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::le (36 samples, 0.12%)</title><rect x="5.3095%" y="245" width="0.1229%" height="15" fill="rgb(212,68,19)" fg:x="1555" fg:w="36"/><text x="5.5595%" y="255.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::PartialOrd&gt;::partial_cmp (36 samples, 0.12%)</title><rect x="5.3095%" y="229" width="0.1229%" height="15" fill="rgb(240,187,13)" fg:x="1555" fg:w="36"/><text x="5.5595%" y="239.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::Ord&gt;::cmp (36 samples, 0.12%)</title><rect x="5.3095%" y="213" width="0.1229%" height="15" fill="rgb(223,113,26)" fg:x="1555" fg:w="36"/><text x="5.5595%" y="223.50"></text></g><g><title>dryadsynth_bv::algo::State::evaluate (34 samples, 0.12%)</title><rect x="5.3164%" y="197" width="0.1161%" height="15" fill="rgb(206,192,2)" fg:x="1557" fg:w="34"/><text x="5.5664%" y="207.50"></text></g><g><title>core::cmp::min (12 samples, 0.04%)</title><rect x="5.3915%" y="181" width="0.0410%" height="15" fill="rgb(241,108,4)" fg:x="1579" fg:w="12"/><text x="5.6415%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (12 samples, 0.04%)</title><rect x="5.3915%" y="165" width="0.0410%" height="15" fill="rgb(247,173,49)" fg:x="1579" fg:w="12"/><text x="5.6415%" y="175.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (3 samples, 0.01%)</title><rect x="5.4324%" y="229" width="0.0102%" height="15" fill="rgb(224,114,35)" fg:x="1591" fg:w="3"/><text x="5.6824%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.08%)</title><rect x="5.4427%" y="229" width="0.0785%" height="15" fill="rgb(245,159,27)" fg:x="1594" fg:w="23"/><text x="5.6927%" y="239.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (94 samples, 0.32%)</title><rect x="5.2071%" y="277" width="0.3210%" height="15" fill="rgb(245,172,44)" fg:x="1525" fg:w="94"/><text x="5.4571%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;dryadsynth_bv::algo::State&gt;&gt; (28 samples, 0.10%)</title><rect x="5.4324%" y="261" width="0.0956%" height="15" fill="rgb(236,23,11)" fg:x="1591" fg:w="28"/><text x="5.6824%" y="271.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.10%)</title><rect x="5.4324%" y="245" width="0.0956%" height="15" fill="rgb(205,117,38)" fg:x="1591" fg:w="28"/><text x="5.6824%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (4 samples, 0.01%)</title><rect x="5.5280%" y="213" width="0.0137%" height="15" fill="rgb(237,72,25)" fg:x="1619" fg:w="4"/><text x="5.7780%" y="223.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (8 samples, 0.03%)</title><rect x="5.5280%" y="277" width="0.0273%" height="15" fill="rgb(244,70,9)" fg:x="1619" fg:w="8"/><text x="5.7780%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (8 samples, 0.03%)</title><rect x="5.5280%" y="261" width="0.0273%" height="15" fill="rgb(217,125,39)" fg:x="1619" fg:w="8"/><text x="5.7780%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (8 samples, 0.03%)</title><rect x="5.5280%" y="245" width="0.0273%" height="15" fill="rgb(235,36,10)" fg:x="1619" fg:w="8"/><text x="5.7780%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (8 samples, 0.03%)</title><rect x="5.5280%" y="229" width="0.0273%" height="15" fill="rgb(251,123,47)" fg:x="1619" fg:w="8"/><text x="5.7780%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (4 samples, 0.01%)</title><rect x="5.5417%" y="213" width="0.0137%" height="15" fill="rgb(221,13,13)" fg:x="1623" fg:w="4"/><text x="5.7917%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (576 samples, 1.97%)</title><rect x="5.5554%" y="261" width="1.9667%" height="15" fill="rgb(238,131,9)" fg:x="1627" fg:w="576"/><text x="5.8054%" y="271.50">c..</text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (717 samples, 2.45%)</title><rect x="5.5554%" y="277" width="2.4482%" height="15" fill="rgb(211,50,8)" fg:x="1627" fg:w="717"/><text x="5.8054%" y="287.50">al..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (141 samples, 0.48%)</title><rect x="7.5221%" y="261" width="0.4814%" height="15" fill="rgb(245,182,24)" fg:x="2203" fg:w="141"/><text x="7.7721%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (141 samples, 0.48%)</title><rect x="7.5221%" y="245" width="0.4814%" height="15" fill="rgb(242,14,37)" fg:x="2203" fg:w="141"/><text x="7.7721%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (12 samples, 0.04%)</title><rect x="8.0036%" y="277" width="0.0410%" height="15" fill="rgb(246,228,12)" fg:x="2344" fg:w="12"/><text x="8.2536%" y="287.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (10 samples, 0.03%)</title><rect x="8.0104%" y="261" width="0.0341%" height="15" fill="rgb(213,55,15)" fg:x="2346" fg:w="10"/><text x="8.2604%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (2,081 samples, 7.11%)</title><rect x="8.0445%" y="277" width="7.1055%" height="15" fill="rgb(209,9,3)" fg:x="2356" fg:w="2081"/><text x="8.2945%" y="287.50">core::cmp:..</text></g><g><title>core::cmp::PartialOrd::le (2,081 samples, 7.11%)</title><rect x="8.0445%" y="261" width="7.1055%" height="15" fill="rgb(230,59,30)" fg:x="2356" fg:w="2081"/><text x="8.2945%" y="271.50">core::cmp:..</text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::PartialOrd&gt;::partial_cmp (2,081 samples, 7.11%)</title><rect x="8.0445%" y="245" width="7.1055%" height="15" fill="rgb(209,121,21)" fg:x="2356" fg:w="2081"/><text x="8.2945%" y="255.50">&lt;dryadsynt..</text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::Ord&gt;::cmp (2,081 samples, 7.11%)</title><rect x="8.0445%" y="229" width="7.1055%" height="15" fill="rgb(220,109,13)" fg:x="2356" fg:w="2081"/><text x="8.2945%" y="239.50">&lt;dryadsynt..</text></g><g><title>dryadsynth_bv::algo::State::evaluate (2,024 samples, 6.91%)</title><rect x="8.2392%" y="213" width="6.9109%" height="15" fill="rgb(232,18,1)" fg:x="2413" fg:w="2024"/><text x="8.4892%" y="223.50">dryadsynt..</text></g><g><title>core::cmp::min (229 samples, 0.78%)</title><rect x="14.3681%" y="197" width="0.7819%" height="15" fill="rgb(215,41,42)" fg:x="4208" fg:w="229"/><text x="14.6181%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (229 samples, 0.78%)</title><rect x="14.3681%" y="181" width="0.7819%" height="15" fill="rgb(224,123,36)" fg:x="4208" fg:w="229"/><text x="14.6181%" y="191.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_down_to_bottom (3,324 samples, 11.35%)</title><rect x="3.9198%" y="293" width="11.3497%" height="15" fill="rgb(240,125,3)" fg:x="1148" fg:w="3324"/><text x="4.1698%" y="303.50">alloc::collection..</text></g><g><title>core::mem::drop (35 samples, 0.12%)</title><rect x="15.1501%" y="277" width="0.1195%" height="15" fill="rgb(205,98,50)" fg:x="4437" fg:w="35"/><text x="15.4001%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;dryadsynth_bv::algo::State&gt;&gt; (35 samples, 0.12%)</title><rect x="15.1501%" y="261" width="0.1195%" height="15" fill="rgb(205,185,37)" fg:x="4437" fg:w="35"/><text x="15.4001%" y="271.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.12%)</title><rect x="15.1501%" y="245" width="0.1195%" height="15" fill="rgb(238,207,15)" fg:x="4437" fg:w="35"/><text x="15.4001%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.12%)</title><rect x="15.1501%" y="229" width="0.1195%" height="15" fill="rgb(213,199,42)" fg:x="4437" fg:w="35"/><text x="15.4001%" y="239.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (6 samples, 0.02%)</title><rect x="15.2696%" y="229" width="0.0205%" height="15" fill="rgb(235,201,11)" fg:x="4472" fg:w="6"/><text x="15.5196%" y="239.50"></text></g><g><title>core::ptr::read (18 samples, 0.06%)</title><rect x="15.2901%" y="229" width="0.0615%" height="15" fill="rgb(207,46,11)" fg:x="4478" fg:w="18"/><text x="15.5401%" y="239.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (3,435 samples, 11.73%)</title><rect x="3.6535%" y="341" width="11.7288%" height="15" fill="rgb(241,35,35)" fg:x="1070" fg:w="3435"/><text x="3.9035%" y="351.50">alloc::collection..</text></g><g><title>core::option::Option&lt;T&gt;::map (3,394 samples, 11.59%)</title><rect x="3.7935%" y="325" width="11.5888%" height="15" fill="rgb(243,32,47)" fg:x="1111" fg:w="3394"/><text x="4.0435%" y="335.50">core::option::Opt..</text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop::{{closure}} (3,386 samples, 11.56%)</title><rect x="3.8208%" y="309" width="11.5614%" height="15" fill="rgb(247,202,23)" fg:x="1119" fg:w="3386"/><text x="4.0708%" y="319.50">alloc::collection..</text></g><g><title>core::mem::swap (33 samples, 0.11%)</title><rect x="15.2696%" y="293" width="0.1127%" height="15" fill="rgb(219,102,11)" fg:x="4472" fg:w="33"/><text x="15.5196%" y="303.50"></text></g><g><title>core::ptr::swap_nonoverlapping (33 samples, 0.11%)</title><rect x="15.2696%" y="277" width="0.1127%" height="15" fill="rgb(243,110,44)" fg:x="4472" fg:w="33"/><text x="15.5196%" y="287.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (33 samples, 0.11%)</title><rect x="15.2696%" y="261" width="0.1127%" height="15" fill="rgb(222,74,54)" fg:x="4472" fg:w="33"/><text x="15.5196%" y="271.50"></text></g><g><title>core::mem::swap_simple (33 samples, 0.11%)</title><rect x="15.2696%" y="245" width="0.1127%" height="15" fill="rgb(216,99,12)" fg:x="4472" fg:w="33"/><text x="15.5196%" y="255.50"></text></g><g><title>core::ptr::write (9 samples, 0.03%)</title><rect x="15.3515%" y="229" width="0.0307%" height="15" fill="rgb(226,22,26)" fg:x="4496" fg:w="9"/><text x="15.6015%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (7 samples, 0.02%)</title><rect x="15.8876%" y="245" width="0.0239%" height="15" fill="rgb(217,163,10)" fg:x="4653" fg:w="7"/><text x="16.1376%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.08%)</title><rect x="15.8432%" y="293" width="0.0785%" height="15" fill="rgb(213,25,53)" fg:x="4640" fg:w="23"/><text x="16.0932%" y="303.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (10 samples, 0.03%)</title><rect x="15.8876%" y="277" width="0.0341%" height="15" fill="rgb(252,105,26)" fg:x="4653" fg:w="10"/><text x="16.1376%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (10 samples, 0.03%)</title><rect x="15.8876%" y="261" width="0.0341%" height="15" fill="rgb(220,39,43)" fg:x="4653" fg:w="10"/><text x="16.1376%" y="271.50"></text></g><g><title>dryadsynth_bv::algo::Algo::run (3 samples, 0.01%)</title><rect x="15.9115%" y="245" width="0.0102%" height="15" fill="rgb(229,68,48)" fg:x="4660" fg:w="3"/><text x="16.1615%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.10%)</title><rect x="15.8432%" y="325" width="0.0990%" height="15" fill="rgb(252,8,32)" fg:x="4640" fg:w="29"/><text x="16.0932%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.10%)</title><rect x="15.8432%" y="309" width="0.0990%" height="15" fill="rgb(223,20,43)" fg:x="4640" fg:w="29"/><text x="16.0932%" y="319.50"></text></g><g><title>dryadsynth_bv::algo::Algo::run (6 samples, 0.02%)</title><rect x="15.9217%" y="293" width="0.0205%" height="15" fill="rgb(229,81,49)" fg:x="4663" fg:w="6"/><text x="16.1717%" y="303.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Bv as core::clone::Clone&gt;::clone (47 samples, 0.16%)</title><rect x="16.1095%" y="309" width="0.1605%" height="15" fill="rgb(236,28,36)" fg:x="4718" fg:w="47"/><text x="16.3595%" y="319.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (47 samples, 0.16%)</title><rect x="16.1095%" y="293" width="0.1605%" height="15" fill="rgb(249,185,26)" fg:x="4718" fg:w="47"/><text x="16.3595%" y="303.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Hint as core::clone::Clone&gt;::clone (135 samples, 0.46%)</title><rect x="15.9422%" y="325" width="0.4610%" height="15" fill="rgb(249,174,33)" fg:x="4669" fg:w="135"/><text x="16.1922%" y="335.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Indices as core::clone::Clone&gt;::clone (39 samples, 0.13%)</title><rect x="16.2700%" y="309" width="0.1332%" height="15" fill="rgb(233,201,37)" fg:x="4765" fg:w="39"/><text x="16.5200%" y="319.50"></text></g><g><title>dryadsynth_bv::bv::Context::consts (10 samples, 0.03%)</title><rect x="16.4032%" y="325" width="0.0341%" height="15" fill="rgb(221,78,26)" fg:x="4804" fg:w="10"/><text x="16.6532%" y="335.50"></text></g><g><title>dryadsynth_bv::bv::Context::variables (3 samples, 0.01%)</title><rect x="16.4373%" y="325" width="0.0102%" height="15" fill="rgb(250,127,30)" fg:x="4814" fg:w="3"/><text x="16.6873%" y="335.50"></text></g><g><title>dryadsynth_bv::rule::BvRule::is_shr (55 samples, 0.19%)</title><rect x="16.4476%" y="325" width="0.1878%" height="15" fill="rgb(230,49,44)" fg:x="4817" fg:w="55"/><text x="16.6976%" y="335.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Bv as core::clone::Clone&gt;::clone (6 samples, 0.02%)</title><rect x="18.4655%" y="293" width="0.0205%" height="15" fill="rgb(229,67,23)" fg:x="5408" fg:w="6"/><text x="18.7155%" y="303.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (6 samples, 0.02%)</title><rect x="18.4655%" y="277" width="0.0205%" height="15" fill="rgb(249,83,47)" fg:x="5408" fg:w="6"/><text x="18.7155%" y="287.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Hint as core::clone::Clone&gt;::clone (54 samples, 0.18%)</title><rect x="18.4655%" y="309" width="0.1844%" height="15" fill="rgb(215,43,3)" fg:x="5408" fg:w="54"/><text x="18.7155%" y="319.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Indices as core::clone::Clone&gt;::clone (48 samples, 0.16%)</title><rect x="18.4860%" y="293" width="0.1639%" height="15" fill="rgb(238,154,13)" fg:x="5414" fg:w="48"/><text x="18.7360%" y="303.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::parent (81 samples, 0.28%)</title><rect x="18.6499%" y="309" width="0.2766%" height="15" fill="rgb(219,56,2)" fg:x="5462" fg:w="81"/><text x="18.8999%" y="319.50"></text></g><g><title>dryadsynth_bv::rule::BvRule::subproblem (683 samples, 2.33%)</title><rect x="16.6354%" y="325" width="2.3321%" height="15" fill="rgb(233,0,4)" fg:x="4872" fg:w="683"/><text x="16.8854%" y="335.50">d..</text></g><g><title>dryadsynth_bv::algo::Algo::run (12 samples, 0.04%)</title><rect x="18.9265%" y="309" width="0.0410%" height="15" fill="rgb(235,30,7)" fg:x="5543" fg:w="12"/><text x="19.1765%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.17%)</title><rect x="23.6726%" y="293" width="0.1741%" height="15" fill="rgb(250,79,13)" fg:x="6933" fg:w="51"/><text x="23.9226%" y="303.50"></text></g><g><title>dryadsynth_bv::bv::Hint::zip::{{closure}} (649 samples, 2.22%)</title><rect x="24.1984%" y="261" width="2.2160%" height="15" fill="rgb(211,146,34)" fg:x="7087" fg:w="649"/><text x="24.4484%" y="271.50">d..</text></g><g><title>&lt;dryadsynth_bv::bv::Bv as core::ops::index::Index&lt;usize&gt;&gt;::index (52 samples, 0.18%)</title><rect x="26.2369%" y="245" width="0.1776%" height="15" fill="rgb(228,22,38)" fg:x="7684" fg:w="52"/><text x="26.4869%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (835 samples, 2.85%)</title><rect x="23.6726%" y="309" width="2.8511%" height="15" fill="rgb(235,168,5)" fg:x="6933" fg:w="835"/><text x="23.9226%" y="319.50">&lt;c..</text></g><g><title>core::option::Option&lt;T&gt;::map (784 samples, 2.68%)</title><rect x="23.8468%" y="293" width="2.6770%" height="15" fill="rgb(221,155,16)" fg:x="6984" fg:w="784"/><text x="24.0968%" y="303.50">co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (784 samples, 2.68%)</title><rect x="23.8468%" y="277" width="2.6770%" height="15" fill="rgb(215,215,53)" fg:x="6984" fg:w="784"/><text x="24.0968%" y="287.50">co..</text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::derive_from (32 samples, 0.11%)</title><rect x="26.4145%" y="261" width="0.1093%" height="15" fill="rgb(223,4,10)" fg:x="7736" fg:w="32"/><text x="26.6645%" y="271.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::max (56 samples, 0.19%)</title><rect x="26.5237%" y="309" width="0.1912%" height="15" fill="rgb(234,103,6)" fg:x="7768" fg:w="56"/><text x="26.7737%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (181 samples, 0.62%)</title><rect x="26.7149%" y="309" width="0.6180%" height="15" fill="rgb(227,97,0)" fg:x="7824" fg:w="181"/><text x="26.9649%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.02%)</title><rect x="27.3466%" y="245" width="0.0239%" height="15" fill="rgb(234,150,53)" fg:x="8009" fg:w="7"/><text x="27.5966%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6 samples, 0.02%)</title><rect x="27.4047%" y="149" width="0.0205%" height="15" fill="rgb(228,201,54)" fg:x="8026" fg:w="6"/><text x="27.6547%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6 samples, 0.02%)</title><rect x="27.4047%" y="133" width="0.0205%" height="15" fill="rgb(222,22,37)" fg:x="8026" fg:w="6"/><text x="27.6547%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.11%)</title><rect x="27.3944%" y="197" width="0.1127%" height="15" fill="rgb(237,53,32)" fg:x="8023" fg:w="33"/><text x="27.6444%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (33 samples, 0.11%)</title><rect x="27.3944%" y="181" width="0.1127%" height="15" fill="rgb(233,25,53)" fg:x="8023" fg:w="33"/><text x="27.6444%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (33 samples, 0.11%)</title><rect x="27.3944%" y="165" width="0.1127%" height="15" fill="rgb(210,40,34)" fg:x="8023" fg:w="33"/><text x="27.6444%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (24 samples, 0.08%)</title><rect x="27.4251%" y="149" width="0.0819%" height="15" fill="rgb(241,220,44)" fg:x="8032" fg:w="24"/><text x="27.6751%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (24 samples, 0.08%)</title><rect x="27.4251%" y="133" width="0.0819%" height="15" fill="rgb(235,28,35)" fg:x="8032" fg:w="24"/><text x="27.6751%" y="143.50"></text></g><g><title>dryadsynth_bv::algo::Algo::add_solution::{{closure}} (24 samples, 0.08%)</title><rect x="27.4251%" y="117" width="0.0819%" height="15" fill="rgb(210,56,17)" fg:x="8032" fg:w="24"/><text x="27.6751%" y="127.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.01%)</title><rect x="27.5549%" y="37" width="0.0137%" height="15" fill="rgb(224,130,29)" fg:x="8070" fg:w="4"/><text x="27.8049%" y="47.50"></text></g><g><title>_int_free (6 samples, 0.02%)</title><rect x="27.5685%" y="37" width="0.0205%" height="15" fill="rgb(235,212,8)" fg:x="8074" fg:w="6"/><text x="27.8185%" y="47.50"></text></g><g><title>__GI___libc_realloc (26 samples, 0.09%)</title><rect x="27.5173%" y="69" width="0.0888%" height="15" fill="rgb(223,33,50)" fg:x="8059" fg:w="26"/><text x="27.7673%" y="79.50"></text></g><g><title>_int_realloc (18 samples, 0.06%)</title><rect x="27.5446%" y="53" width="0.0615%" height="15" fill="rgb(219,149,13)" fg:x="8067" fg:w="18"/><text x="27.7946%" y="63.50"></text></g><g><title>_int_malloc (5 samples, 0.02%)</title><rect x="27.5890%" y="37" width="0.0171%" height="15" fill="rgb(250,156,29)" fg:x="8080" fg:w="5"/><text x="27.8390%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (30 samples, 0.10%)</title><rect x="27.5071%" y="133" width="0.1024%" height="15" fill="rgb(216,193,19)" fg:x="8056" fg:w="30"/><text x="27.7571%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (29 samples, 0.10%)</title><rect x="27.5105%" y="117" width="0.0990%" height="15" fill="rgb(216,135,14)" fg:x="8057" fg:w="29"/><text x="27.7605%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (29 samples, 0.10%)</title><rect x="27.5105%" y="101" width="0.0990%" height="15" fill="rgb(241,47,5)" fg:x="8057" fg:w="29"/><text x="27.7605%" y="111.50"></text></g><g><title>alloc::alloc::realloc (27 samples, 0.09%)</title><rect x="27.5173%" y="85" width="0.0922%" height="15" fill="rgb(233,42,35)" fg:x="8059" fg:w="27"/><text x="27.7673%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (69 samples, 0.24%)</title><rect x="27.3842%" y="229" width="0.2356%" height="15" fill="rgb(231,13,6)" fg:x="8020" fg:w="69"/><text x="27.6342%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (69 samples, 0.24%)</title><rect x="27.3842%" y="213" width="0.2356%" height="15" fill="rgb(207,181,40)" fg:x="8020" fg:w="69"/><text x="27.6342%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (33 samples, 0.11%)</title><rect x="27.5071%" y="197" width="0.1127%" height="15" fill="rgb(254,173,49)" fg:x="8056" fg:w="33"/><text x="27.7571%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (33 samples, 0.11%)</title><rect x="27.5071%" y="181" width="0.1127%" height="15" fill="rgb(221,1,38)" fg:x="8056" fg:w="33"/><text x="27.7571%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (33 samples, 0.11%)</title><rect x="27.5071%" y="165" width="0.1127%" height="15" fill="rgb(206,124,46)" fg:x="8056" fg:w="33"/><text x="27.7571%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (33 samples, 0.11%)</title><rect x="27.5071%" y="149" width="0.1127%" height="15" fill="rgb(249,21,11)" fg:x="8056" fg:w="33"/><text x="27.7571%" y="159.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.01%)</title><rect x="27.6300%" y="181" width="0.0102%" height="15" fill="rgb(222,201,40)" fg:x="8092" fg:w="3"/><text x="27.8800%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.01%)</title><rect x="27.6300%" y="165" width="0.0102%" height="15" fill="rgb(235,61,29)" fg:x="8092" fg:w="3"/><text x="27.8800%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3 samples, 0.01%)</title><rect x="27.6300%" y="149" width="0.0102%" height="15" fill="rgb(219,207,3)" fg:x="8092" fg:w="3"/><text x="27.8800%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.06%)</title><rect x="27.6198%" y="229" width="0.0580%" height="15" fill="rgb(222,56,46)" fg:x="8089" fg:w="17"/><text x="27.8698%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (17 samples, 0.06%)</title><rect x="27.6198%" y="213" width="0.0580%" height="15" fill="rgb(239,76,54)" fg:x="8089" fg:w="17"/><text x="27.8698%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (17 samples, 0.06%)</title><rect x="27.6198%" y="197" width="0.0580%" height="15" fill="rgb(231,124,27)" fg:x="8089" fg:w="17"/><text x="27.8698%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (11 samples, 0.04%)</title><rect x="27.6402%" y="181" width="0.0376%" height="15" fill="rgb(249,195,6)" fg:x="8095" fg:w="11"/><text x="27.8902%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (11 samples, 0.04%)</title><rect x="27.6402%" y="165" width="0.0376%" height="15" fill="rgb(237,174,47)" fg:x="8095" fg:w="11"/><text x="27.8902%" y="175.50"></text></g><g><title>dryadsynth_bv::algo::Algo::add_solution::{{closure}} (11 samples, 0.04%)</title><rect x="27.6402%" y="149" width="0.0376%" height="15" fill="rgb(206,201,31)" fg:x="8095" fg:w="11"/><text x="27.8902%" y="159.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Bv as core::ops::index::Index&lt;usize&gt;&gt;::index (3 samples, 0.01%)</title><rect x="27.6676%" y="133" width="0.0102%" height="15" fill="rgb(231,57,52)" fg:x="8103" fg:w="3"/><text x="27.9176%" y="143.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.05%)</title><rect x="27.6778%" y="117" width="0.0512%" height="15" fill="rgb(248,177,22)" fg:x="8106" fg:w="15"/><text x="27.9278%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (18 samples, 0.06%)</title><rect x="27.6778%" y="229" width="0.0615%" height="15" fill="rgb(215,211,37)" fg:x="8106" fg:w="18"/><text x="27.9278%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 0.06%)</title><rect x="27.6778%" y="213" width="0.0615%" height="15" fill="rgb(241,128,51)" fg:x="8106" fg:w="18"/><text x="27.9278%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 0.06%)</title><rect x="27.6778%" y="197" width="0.0615%" height="15" fill="rgb(227,165,31)" fg:x="8106" fg:w="18"/><text x="27.9278%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.06%)</title><rect x="27.6778%" y="181" width="0.0615%" height="15" fill="rgb(228,167,24)" fg:x="8106" fg:w="18"/><text x="27.9278%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.06%)</title><rect x="27.6778%" y="165" width="0.0615%" height="15" fill="rgb(228,143,12)" fg:x="8106" fg:w="18"/><text x="27.9278%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.06%)</title><rect x="27.6778%" y="149" width="0.0615%" height="15" fill="rgb(249,149,8)" fg:x="8106" fg:w="18"/><text x="27.9278%" y="159.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.06%)</title><rect x="27.6778%" y="133" width="0.0615%" height="15" fill="rgb(243,35,44)" fg:x="8106" fg:w="18"/><text x="27.9278%" y="143.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="27.7290%" y="117" width="0.0102%" height="15" fill="rgb(246,89,9)" fg:x="8121" fg:w="3"/><text x="27.9790%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.01%)</title><rect x="27.7290%" y="101" width="0.0102%" height="15" fill="rgb(233,213,13)" fg:x="8121" fg:w="3"/><text x="27.9790%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (117 samples, 0.40%)</title><rect x="27.3432%" y="277" width="0.3995%" height="15" fill="rgb(233,141,41)" fg:x="8008" fg:w="117"/><text x="27.5932%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (117 samples, 0.40%)</title><rect x="27.3432%" y="261" width="0.3995%" height="15" fill="rgb(239,167,4)" fg:x="8008" fg:w="117"/><text x="27.5932%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (109 samples, 0.37%)</title><rect x="27.3705%" y="245" width="0.3722%" height="15" fill="rgb(209,217,16)" fg:x="8016" fg:w="109"/><text x="27.6205%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (118 samples, 0.40%)</title><rect x="27.3432%" y="293" width="0.4029%" height="15" fill="rgb(219,88,35)" fg:x="8008" fg:w="118"/><text x="27.5932%" y="303.50"></text></g><g><title>__GI___libc_free (5 samples, 0.02%)</title><rect x="27.7461%" y="213" width="0.0171%" height="15" fill="rgb(220,193,23)" fg:x="8126" fg:w="5"/><text x="27.9961%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.06%)</title><rect x="27.7461%" y="229" width="0.0649%" height="15" fill="rgb(230,90,52)" fg:x="8126" fg:w="19"/><text x="27.9961%" y="239.50"></text></g><g><title>_int_free (13 samples, 0.04%)</title><rect x="27.7666%" y="213" width="0.0444%" height="15" fill="rgb(252,106,19)" fg:x="8132" fg:w="13"/><text x="28.0166%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (21 samples, 0.07%)</title><rect x="27.7461%" y="293" width="0.0717%" height="15" fill="rgb(206,74,20)" fg:x="8126" fg:w="21"/><text x="27.9961%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (21 samples, 0.07%)</title><rect x="27.7461%" y="277" width="0.0717%" height="15" fill="rgb(230,138,44)" fg:x="8126" fg:w="21"/><text x="27.9961%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.07%)</title><rect x="27.7461%" y="261" width="0.0717%" height="15" fill="rgb(235,182,43)" fg:x="8126" fg:w="21"/><text x="27.9961%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.07%)</title><rect x="27.7461%" y="245" width="0.0717%" height="15" fill="rgb(242,16,51)" fg:x="8126" fg:w="21"/><text x="27.9961%" y="255.50"></text></g><g><title>dryadsynth_bv::algo::Algo::add_solution (6 samples, 0.02%)</title><rect x="27.8656%" y="197" width="0.0205%" height="15" fill="rgb(248,9,4)" fg:x="8161" fg:w="6"/><text x="28.1156%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="27.8998%" y="117" width="0.0137%" height="15" fill="rgb(210,31,22)" fg:x="8171" fg:w="4"/><text x="28.1498%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (30 samples, 0.10%)</title><rect x="27.8178%" y="245" width="0.1024%" height="15" fill="rgb(239,54,39)" fg:x="8147" fg:w="30"/><text x="28.0678%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (16 samples, 0.05%)</title><rect x="27.8656%" y="229" width="0.0546%" height="15" fill="rgb(230,99,41)" fg:x="8161" fg:w="16"/><text x="28.1156%" y="239.50"></text></g><g><title>dryadsynth_bv::algo::Algo::retain_unsolved::{{closure}} (16 samples, 0.05%)</title><rect x="27.8656%" y="213" width="0.0546%" height="15" fill="rgb(253,106,12)" fg:x="8161" fg:w="16"/><text x="28.1156%" y="223.50"></text></g><g><title>dryadsynth_bv::utils::SortedIter&lt;T&gt;::next_contains (10 samples, 0.03%)</title><rect x="27.8861%" y="197" width="0.0341%" height="15" fill="rgb(213,46,41)" fg:x="8167" fg:w="10"/><text x="28.1361%" y="207.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (9 samples, 0.03%)</title><rect x="27.8895%" y="181" width="0.0307%" height="15" fill="rgb(215,133,35)" fg:x="8168" fg:w="9"/><text x="28.1395%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (9 samples, 0.03%)</title><rect x="27.8895%" y="165" width="0.0307%" height="15" fill="rgb(213,28,5)" fg:x="8168" fg:w="9"/><text x="28.1395%" y="175.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (6 samples, 0.02%)</title><rect x="27.8998%" y="149" width="0.0205%" height="15" fill="rgb(215,77,49)" fg:x="8171" fg:w="6"/><text x="28.1498%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="27.8998%" y="133" width="0.0205%" height="15" fill="rgb(248,100,22)" fg:x="8171" fg:w="6"/><text x="28.1498%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (34 samples, 0.12%)</title><rect x="27.8178%" y="261" width="0.1161%" height="15" fill="rgb(208,67,9)" fg:x="8147" fg:w="34"/><text x="28.0678%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (40 samples, 0.14%)</title><rect x="27.8178%" y="277" width="0.1366%" height="15" fill="rgb(219,133,21)" fg:x="8147" fg:w="40"/><text x="28.0678%" y="287.50"></text></g><g><title>dryadsynth_bv::algo::Algo::add_solution (6 samples, 0.02%)</title><rect x="27.9339%" y="261" width="0.0205%" height="15" fill="rgb(246,46,29)" fg:x="8181" fg:w="6"/><text x="28.1839%" y="271.50"></text></g><g><title>dryadsynth_bv::algo::Algo::add_solution (183 samples, 0.62%)</title><rect x="27.3329%" y="309" width="0.6249%" height="15" fill="rgb(246,185,52)" fg:x="8005" fg:w="183"/><text x="27.5829%" y="319.50"></text></g><g><title>dryadsynth_bv::algo::Algo::retain_unsolved (41 samples, 0.14%)</title><rect x="27.8178%" y="293" width="0.1400%" height="15" fill="rgb(252,136,11)" fg:x="8147" fg:w="41"/><text x="28.0678%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (67 samples, 0.23%)</title><rect x="28.0705%" y="245" width="0.2288%" height="15" fill="rgb(219,138,53)" fg:x="8221" fg:w="67"/><text x="28.3205%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (68 samples, 0.23%)</title><rect x="28.0705%" y="261" width="0.2322%" height="15" fill="rgb(211,51,23)" fg:x="8221" fg:w="68"/><text x="28.3205%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (16 samples, 0.05%)</title><rect x="28.3027%" y="261" width="0.0546%" height="15" fill="rgb(247,221,28)" fg:x="8289" fg:w="16"/><text x="28.5527%" y="271.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (16 samples, 0.05%)</title><rect x="28.3027%" y="245" width="0.0546%" height="15" fill="rgb(251,222,45)" fg:x="8289" fg:w="16"/><text x="28.5527%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (103 samples, 0.35%)</title><rect x="28.3573%" y="261" width="0.3517%" height="15" fill="rgb(217,162,53)" fg:x="8305" fg:w="103"/><text x="28.6073%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::le (103 samples, 0.35%)</title><rect x="28.3573%" y="245" width="0.3517%" height="15" fill="rgb(229,93,14)" fg:x="8305" fg:w="103"/><text x="28.6073%" y="255.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::PartialOrd&gt;::partial_cmp (103 samples, 0.35%)</title><rect x="28.3573%" y="229" width="0.3517%" height="15" fill="rgb(209,67,49)" fg:x="8305" fg:w="103"/><text x="28.6073%" y="239.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::Ord&gt;::cmp (103 samples, 0.35%)</title><rect x="28.3573%" y="213" width="0.3517%" height="15" fill="rgb(213,87,29)" fg:x="8305" fg:w="103"/><text x="28.6073%" y="223.50"></text></g><g><title>dryadsynth_bv::algo::State::evaluate (92 samples, 0.31%)</title><rect x="28.3949%" y="197" width="0.3141%" height="15" fill="rgb(205,151,52)" fg:x="8316" fg:w="92"/><text x="28.6449%" y="207.50"></text></g><g><title>core::cmp::min (6 samples, 0.02%)</title><rect x="28.6885%" y="181" width="0.0205%" height="15" fill="rgb(253,215,39)" fg:x="8402" fg:w="6"/><text x="28.9385%" y="191.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::derive_from (6 samples, 0.02%)</title><rect x="28.6885%" y="165" width="0.0205%" height="15" fill="rgb(221,220,41)" fg:x="8402" fg:w="6"/><text x="28.9385%" y="175.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (229 samples, 0.78%)</title><rect x="27.9680%" y="277" width="0.7819%" height="15" fill="rgb(218,133,21)" fg:x="8191" fg:w="229"/><text x="28.2180%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;dryadsynth_bv::algo::State&gt;&gt; (12 samples, 0.04%)</title><rect x="28.7090%" y="261" width="0.0410%" height="15" fill="rgb(221,193,43)" fg:x="8408" fg:w="12"/><text x="28.9590%" y="271.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.04%)</title><rect x="28.7090%" y="245" width="0.0410%" height="15" fill="rgb(240,128,52)" fg:x="8408" fg:w="12"/><text x="28.9590%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.04%)</title><rect x="28.7090%" y="229" width="0.0410%" height="15" fill="rgb(253,114,12)" fg:x="8408" fg:w="12"/><text x="28.9590%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (33 samples, 0.11%)</title><rect x="28.7500%" y="277" width="0.1127%" height="15" fill="rgb(215,223,47)" fg:x="8420" fg:w="33"/><text x="29.0000%" y="287.50"></text></g><g><title>core::ptr::write (28 samples, 0.10%)</title><rect x="28.7670%" y="261" width="0.0956%" height="15" fill="rgb(248,225,23)" fg:x="8425" fg:w="28"/><text x="29.0170%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (273 samples, 0.93%)</title><rect x="27.9578%" y="293" width="0.9322%" height="15" fill="rgb(250,108,0)" fg:x="8188" fg:w="273"/><text x="28.2078%" y="303.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::derive_from (8 samples, 0.03%)</title><rect x="28.8626%" y="277" width="0.0273%" height="15" fill="rgb(228,208,7)" fg:x="8453" fg:w="8"/><text x="29.1126%" y="287.50"></text></g><g><title>dryadsynth_bv::algo::Algo::push (279 samples, 0.95%)</title><rect x="27.9578%" y="309" width="0.9526%" height="15" fill="rgb(244,45,10)" fg:x="8188" fg:w="279"/><text x="28.2078%" y="319.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::derive_from (6 samples, 0.02%)</title><rect x="28.8900%" y="293" width="0.0205%" height="15" fill="rgb(207,125,25)" fg:x="8461" fg:w="6"/><text x="29.1400%" y="303.50"></text></g><g><title>dryadsynth_bv::algo::State::derive (130 samples, 0.44%)</title><rect x="28.9104%" y="309" width="0.4439%" height="15" fill="rgb(210,195,18)" fg:x="8467" fg:w="130"/><text x="29.1604%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (11 samples, 0.04%)</title><rect x="29.3543%" y="213" width="0.0376%" height="15" fill="rgb(249,80,12)" fg:x="8597" fg:w="11"/><text x="29.6043%" y="223.50"></text></g><g><title>bumpalo::Bump::alloc_layout (21 samples, 0.07%)</title><rect x="29.3543%" y="261" width="0.0717%" height="15" fill="rgb(221,65,9)" fg:x="8597" fg:w="21"/><text x="29.6043%" y="271.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (21 samples, 0.07%)</title><rect x="29.3543%" y="245" width="0.0717%" height="15" fill="rgb(235,49,36)" fg:x="8597" fg:w="21"/><text x="29.6043%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (21 samples, 0.07%)</title><rect x="29.3543%" y="229" width="0.0717%" height="15" fill="rgb(225,32,20)" fg:x="8597" fg:w="21"/><text x="29.6043%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_sub (10 samples, 0.03%)</title><rect x="29.3919%" y="213" width="0.0341%" height="15" fill="rgb(215,141,46)" fg:x="8608" fg:w="10"/><text x="29.6419%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_offset (10 samples, 0.03%)</title><rect x="29.3919%" y="197" width="0.0341%" height="15" fill="rgb(250,160,47)" fg:x="8608" fg:w="10"/><text x="29.6419%" y="207.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc (101 samples, 0.34%)</title><rect x="29.3543%" y="309" width="0.3449%" height="15" fill="rgb(216,222,40)" fg:x="8597" fg:w="101"/><text x="29.6043%" y="319.50"></text></g><g><title>bumpalo::Bump::alloc (101 samples, 0.34%)</title><rect x="29.3543%" y="293" width="0.3449%" height="15" fill="rgb(234,217,39)" fg:x="8597" fg:w="101"/><text x="29.6043%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_with (101 samples, 0.34%)</title><rect x="29.3543%" y="277" width="0.3449%" height="15" fill="rgb(207,178,40)" fg:x="8597" fg:w="101"/><text x="29.6043%" y="287.50"></text></g><g><title>bumpalo::Bump::alloc_with::inner_writer (80 samples, 0.27%)</title><rect x="29.4260%" y="261" width="0.2732%" height="15" fill="rgb(221,136,13)" fg:x="8618" fg:w="80"/><text x="29.6760%" y="271.50"></text></g><g><title>core::ptr::write (80 samples, 0.27%)</title><rect x="29.4260%" y="245" width="0.2732%" height="15" fill="rgb(249,199,10)" fg:x="8618" fg:w="80"/><text x="29.6760%" y="255.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::derive_from (30 samples, 0.10%)</title><rect x="29.7026%" y="309" width="0.1024%" height="15" fill="rgb(249,222,13)" fg:x="8699" fg:w="30"/><text x="29.9526%" y="319.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Bv as core::clone::Clone&gt;::clone (10 samples, 0.03%)</title><rect x="31.1572%" y="293" width="0.0341%" height="15" fill="rgb(244,185,38)" fg:x="9125" fg:w="10"/><text x="31.4072%" y="303.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (4 samples, 0.01%)</title><rect x="31.3518%" y="261" width="0.0137%" height="15" fill="rgb(236,202,9)" fg:x="9182" fg:w="4"/><text x="31.6018%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (8 samples, 0.03%)</title><rect x="31.3655%" y="261" width="0.0273%" height="15" fill="rgb(250,229,37)" fg:x="9186" fg:w="8"/><text x="31.6155%" y="271.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (8 samples, 0.03%)</title><rect x="31.3655%" y="245" width="0.0273%" height="15" fill="rgb(206,174,23)" fg:x="9186" fg:w="8"/><text x="31.6155%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (8 samples, 0.03%)</title><rect x="31.3655%" y="229" width="0.0273%" height="15" fill="rgb(211,33,43)" fg:x="9186" fg:w="8"/><text x="31.6155%" y="239.50"></text></g><g><title>core::cmp::min (8 samples, 0.03%)</title><rect x="31.3655%" y="213" width="0.0273%" height="15" fill="rgb(245,58,50)" fg:x="9186" fg:w="8"/><text x="31.6155%" y="223.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (8 samples, 0.03%)</title><rect x="31.3655%" y="197" width="0.0273%" height="15" fill="rgb(244,68,36)" fg:x="9186" fg:w="8"/><text x="31.6155%" y="207.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (5 samples, 0.02%)</title><rect x="31.3928%" y="245" width="0.0171%" height="15" fill="rgb(232,229,15)" fg:x="9194" fg:w="5"/><text x="31.6428%" y="255.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (5 samples, 0.02%)</title><rect x="31.4098%" y="213" width="0.0171%" height="15" fill="rgb(254,30,23)" fg:x="9199" fg:w="5"/><text x="31.6598%" y="223.50"></text></g><g><title>bumpalo::Bump::alloc_layout (13 samples, 0.04%)</title><rect x="31.4269%" y="213" width="0.0444%" height="15" fill="rgb(235,160,14)" fg:x="9204" fg:w="13"/><text x="31.6769%" y="223.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (13 samples, 0.04%)</title><rect x="31.4269%" y="197" width="0.0444%" height="15" fill="rgb(212,155,44)" fg:x="9204" fg:w="13"/><text x="31.6769%" y="207.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (13 samples, 0.04%)</title><rect x="31.4269%" y="181" width="0.0444%" height="15" fill="rgb(226,2,50)" fg:x="9204" fg:w="13"/><text x="31.6769%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.02%)</title><rect x="31.4542%" y="165" width="0.0171%" height="15" fill="rgb(234,177,6)" fg:x="9212" fg:w="5"/><text x="31.7042%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="31.4713%" y="181" width="0.0205%" height="15" fill="rgb(217,24,9)" fg:x="9217" fg:w="6"/><text x="31.7213%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (6 samples, 0.02%)</title><rect x="31.4713%" y="165" width="0.0205%" height="15" fill="rgb(220,13,46)" fg:x="9217" fg:w="6"/><text x="31.7213%" y="175.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter::{{closure}} (103 samples, 0.35%)</title><rect x="31.4713%" y="213" width="0.3517%" height="15" fill="rgb(239,221,27)" fg:x="9217" fg:w="103"/><text x="31.7213%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 0.35%)</title><rect x="31.4713%" y="197" width="0.3517%" height="15" fill="rgb(222,198,25)" fg:x="9217" fg:w="103"/><text x="31.7213%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (97 samples, 0.33%)</title><rect x="31.4918%" y="181" width="0.3312%" height="15" fill="rgb(211,99,13)" fg:x="9223" fg:w="97"/><text x="31.7418%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (23 samples, 0.08%)</title><rect x="31.7445%" y="165" width="0.0785%" height="15" fill="rgb(232,111,31)" fg:x="9297" fg:w="23"/><text x="31.9945%" y="175.50"></text></g><g><title>&lt;dryadsynth_bv::rule::binary::AddRule as dryadsynth_bv::rule::Rule&gt;::evaluate::{{closure}} (23 samples, 0.08%)</title><rect x="31.7445%" y="149" width="0.0785%" height="15" fill="rgb(245,82,37)" fg:x="9297" fg:w="23"/><text x="31.9945%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_add (23 samples, 0.08%)</title><rect x="31.7445%" y="133" width="0.0785%" height="15" fill="rgb(227,149,46)" fg:x="9297" fg:w="23"/><text x="31.9945%" y="143.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (28 samples, 0.10%)</title><rect x="31.8230%" y="213" width="0.0956%" height="15" fill="rgb(218,36,50)" fg:x="9320" fg:w="28"/><text x="32.0730%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (28 samples, 0.10%)</title><rect x="31.8230%" y="197" width="0.0956%" height="15" fill="rgb(226,80,48)" fg:x="9320" fg:w="28"/><text x="32.0730%" y="207.50"></text></g><g><title>&lt;dryadsynth_bv::rule::binary::AddRule as dryadsynth_bv::rule::Rule&gt;::evaluate (263 samples, 0.90%)</title><rect x="31.3313%" y="277" width="0.8980%" height="15" fill="rgb(238,224,15)" fg:x="9176" fg:w="263"/><text x="31.5813%" y="287.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_bv (245 samples, 0.84%)</title><rect x="31.3928%" y="261" width="0.8365%" height="15" fill="rgb(241,136,10)" fg:x="9194" fg:w="245"/><text x="31.6428%" y="271.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter (240 samples, 0.82%)</title><rect x="31.4098%" y="245" width="0.8195%" height="15" fill="rgb(208,32,45)" fg:x="9199" fg:w="240"/><text x="31.6598%" y="255.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (240 samples, 0.82%)</title><rect x="31.4098%" y="229" width="0.8195%" height="15" fill="rgb(207,135,9)" fg:x="9199" fg:w="240"/><text x="31.6598%" y="239.50"></text></g><g><title>core::ptr::write (91 samples, 0.31%)</title><rect x="31.9186%" y="213" width="0.3107%" height="15" fill="rgb(206,86,44)" fg:x="9348" fg:w="91"/><text x="32.1686%" y="223.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (5 samples, 0.02%)</title><rect x="32.2396%" y="261" width="0.0171%" height="15" fill="rgb(245,177,15)" fg:x="9442" fg:w="5"/><text x="32.4896%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (8 samples, 0.03%)</title><rect x="32.2566%" y="261" width="0.0273%" height="15" fill="rgb(206,64,50)" fg:x="9447" fg:w="8"/><text x="32.5066%" y="271.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (8 samples, 0.03%)</title><rect x="32.2566%" y="245" width="0.0273%" height="15" fill="rgb(234,36,40)" fg:x="9447" fg:w="8"/><text x="32.5066%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (8 samples, 0.03%)</title><rect x="32.2566%" y="229" width="0.0273%" height="15" fill="rgb(213,64,8)" fg:x="9447" fg:w="8"/><text x="32.5066%" y="239.50"></text></g><g><title>core::cmp::min (8 samples, 0.03%)</title><rect x="32.2566%" y="213" width="0.0273%" height="15" fill="rgb(210,75,36)" fg:x="9447" fg:w="8"/><text x="32.5066%" y="223.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (8 samples, 0.03%)</title><rect x="32.2566%" y="197" width="0.0273%" height="15" fill="rgb(229,88,21)" fg:x="9447" fg:w="8"/><text x="32.5066%" y="207.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (10 samples, 0.03%)</title><rect x="32.2839%" y="245" width="0.0341%" height="15" fill="rgb(252,204,47)" fg:x="9455" fg:w="10"/><text x="32.5339%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (9 samples, 0.03%)</title><rect x="32.3283%" y="165" width="0.0307%" height="15" fill="rgb(208,77,27)" fg:x="9468" fg:w="9"/><text x="32.5783%" y="175.50"></text></g><g><title>bumpalo::Bump::alloc_layout (14 samples, 0.05%)</title><rect x="32.3181%" y="213" width="0.0478%" height="15" fill="rgb(221,76,26)" fg:x="9465" fg:w="14"/><text x="32.5681%" y="223.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (14 samples, 0.05%)</title><rect x="32.3181%" y="197" width="0.0478%" height="15" fill="rgb(225,139,18)" fg:x="9465" fg:w="14"/><text x="32.5681%" y="207.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (14 samples, 0.05%)</title><rect x="32.3181%" y="181" width="0.0478%" height="15" fill="rgb(230,137,11)" fg:x="9465" fg:w="14"/><text x="32.5681%" y="191.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter::{{closure}} (93 samples, 0.32%)</title><rect x="32.3659%" y="213" width="0.3175%" height="15" fill="rgb(212,28,1)" fg:x="9479" fg:w="93"/><text x="32.6159%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 0.32%)</title><rect x="32.3659%" y="197" width="0.3175%" height="15" fill="rgb(248,164,17)" fg:x="9479" fg:w="93"/><text x="32.6159%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (93 samples, 0.32%)</title><rect x="32.3659%" y="181" width="0.3175%" height="15" fill="rgb(222,171,42)" fg:x="9479" fg:w="93"/><text x="32.6159%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (28 samples, 0.10%)</title><rect x="32.5878%" y="165" width="0.0956%" height="15" fill="rgb(243,84,45)" fg:x="9544" fg:w="28"/><text x="32.8378%" y="175.50"></text></g><g><title>&lt;dryadsynth_bv::rule::binary::AndRule as dryadsynth_bv::rule::Rule&gt;::evaluate::{{closure}} (28 samples, 0.10%)</title><rect x="32.5878%" y="149" width="0.0956%" height="15" fill="rgb(252,49,23)" fg:x="9544" fg:w="28"/><text x="32.8378%" y="159.50"></text></g><g><title>&lt;&amp;u64 as core::ops::bit::BitAnd&lt;&amp;u64&gt;&gt;::bitand (28 samples, 0.10%)</title><rect x="32.5878%" y="133" width="0.0956%" height="15" fill="rgb(215,19,7)" fg:x="9544" fg:w="28"/><text x="32.8378%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (28 samples, 0.10%)</title><rect x="32.5878%" y="117" width="0.0956%" height="15" fill="rgb(238,81,41)" fg:x="9544" fg:w="28"/><text x="32.8378%" y="127.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (32 samples, 0.11%)</title><rect x="32.6834%" y="213" width="0.1093%" height="15" fill="rgb(210,199,37)" fg:x="9572" fg:w="32"/><text x="32.9334%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (32 samples, 0.11%)</title><rect x="32.6834%" y="197" width="0.1093%" height="15" fill="rgb(244,192,49)" fg:x="9572" fg:w="32"/><text x="32.9334%" y="207.50"></text></g><g><title>core::ptr::write (93 samples, 0.32%)</title><rect x="32.7927%" y="213" width="0.3175%" height="15" fill="rgb(226,211,11)" fg:x="9604" fg:w="93"/><text x="33.0427%" y="223.50"></text></g><g><title>&lt;dryadsynth_bv::rule::binary::AndRule as dryadsynth_bv::rule::Rule&gt;::evaluate (259 samples, 0.88%)</title><rect x="32.2293%" y="277" width="0.8844%" height="15" fill="rgb(236,162,54)" fg:x="9439" fg:w="259"/><text x="32.4793%" y="287.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_bv (243 samples, 0.83%)</title><rect x="32.2839%" y="261" width="0.8297%" height="15" fill="rgb(220,229,9)" fg:x="9455" fg:w="243"/><text x="32.5339%" y="271.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter (233 samples, 0.80%)</title><rect x="32.3181%" y="245" width="0.7956%" height="15" fill="rgb(250,87,22)" fg:x="9465" fg:w="233"/><text x="32.5681%" y="255.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (233 samples, 0.80%)</title><rect x="32.3181%" y="229" width="0.7956%" height="15" fill="rgb(239,43,17)" fg:x="9465" fg:w="233"/><text x="32.5681%" y="239.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (4 samples, 0.01%)</title><rect x="33.1307%" y="245" width="0.0137%" height="15" fill="rgb(231,177,25)" fg:x="9703" fg:w="4"/><text x="33.3807%" y="255.50"></text></g><g><title>bumpalo::Bump::alloc_layout (9 samples, 0.03%)</title><rect x="33.1478%" y="213" width="0.0307%" height="15" fill="rgb(219,179,1)" fg:x="9708" fg:w="9"/><text x="33.3978%" y="223.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (9 samples, 0.03%)</title><rect x="33.1478%" y="197" width="0.0307%" height="15" fill="rgb(238,219,53)" fg:x="9708" fg:w="9"/><text x="33.3978%" y="207.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (9 samples, 0.03%)</title><rect x="33.1478%" y="181" width="0.0307%" height="15" fill="rgb(232,167,36)" fg:x="9708" fg:w="9"/><text x="33.3978%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (6 samples, 0.02%)</title><rect x="33.1581%" y="165" width="0.0205%" height="15" fill="rgb(244,19,51)" fg:x="9711" fg:w="6"/><text x="33.4081%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="33.1785%" y="181" width="0.0171%" height="15" fill="rgb(224,6,22)" fg:x="9717" fg:w="5"/><text x="33.4285%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (5 samples, 0.02%)</title><rect x="33.1785%" y="165" width="0.0171%" height="15" fill="rgb(224,145,5)" fg:x="9717" fg:w="5"/><text x="33.4285%" y="175.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter::{{closure}} (47 samples, 0.16%)</title><rect x="33.1785%" y="213" width="0.1605%" height="15" fill="rgb(234,130,49)" fg:x="9717" fg:w="47"/><text x="33.4285%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.16%)</title><rect x="33.1785%" y="197" width="0.1605%" height="15" fill="rgb(254,6,2)" fg:x="9717" fg:w="47"/><text x="33.4285%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (42 samples, 0.14%)</title><rect x="33.1956%" y="181" width="0.1434%" height="15" fill="rgb(208,96,46)" fg:x="9722" fg:w="42"/><text x="33.4456%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (7 samples, 0.02%)</title><rect x="33.3151%" y="165" width="0.0239%" height="15" fill="rgb(239,3,39)" fg:x="9757" fg:w="7"/><text x="33.5651%" y="175.50"></text></g><g><title>&lt;dryadsynth_bv::rule::binary::OrRule as dryadsynth_bv::rule::Rule&gt;::evaluate::{{closure}} (7 samples, 0.02%)</title><rect x="33.3151%" y="149" width="0.0239%" height="15" fill="rgb(233,210,1)" fg:x="9757" fg:w="7"/><text x="33.5651%" y="159.50"></text></g><g><title>&lt;&amp;u64 as core::ops::bit::BitOr&lt;&amp;u64&gt;&gt;::bitor (7 samples, 0.02%)</title><rect x="33.3151%" y="133" width="0.0239%" height="15" fill="rgb(244,137,37)" fg:x="9757" fg:w="7"/><text x="33.5651%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitOr&gt;::bitor (7 samples, 0.02%)</title><rect x="33.3151%" y="117" width="0.0239%" height="15" fill="rgb(240,136,2)" fg:x="9757" fg:w="7"/><text x="33.5651%" y="127.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16 samples, 0.05%)</title><rect x="33.3390%" y="213" width="0.0546%" height="15" fill="rgb(239,18,37)" fg:x="9764" fg:w="16"/><text x="33.5890%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (16 samples, 0.05%)</title><rect x="33.3390%" y="197" width="0.0546%" height="15" fill="rgb(218,185,22)" fg:x="9764" fg:w="16"/><text x="33.5890%" y="207.50"></text></g><g><title>&lt;dryadsynth_bv::rule::binary::OrRule as dryadsynth_bv::rule::Rule&gt;::evaluate (128 samples, 0.44%)</title><rect x="33.1137%" y="277" width="0.4371%" height="15" fill="rgb(225,218,4)" fg:x="9698" fg:w="128"/><text x="33.3637%" y="287.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_bv (123 samples, 0.42%)</title><rect x="33.1307%" y="261" width="0.4200%" height="15" fill="rgb(230,182,32)" fg:x="9703" fg:w="123"/><text x="33.3807%" y="271.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter (119 samples, 0.41%)</title><rect x="33.1444%" y="245" width="0.4063%" height="15" fill="rgb(242,56,43)" fg:x="9707" fg:w="119"/><text x="33.3944%" y="255.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (119 samples, 0.41%)</title><rect x="33.1444%" y="229" width="0.4063%" height="15" fill="rgb(233,99,24)" fg:x="9707" fg:w="119"/><text x="33.3944%" y="239.50"></text></g><g><title>core::ptr::write (46 samples, 0.16%)</title><rect x="33.3937%" y="213" width="0.1571%" height="15" fill="rgb(234,209,42)" fg:x="9780" fg:w="46"/><text x="33.6437%" y="223.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (4 samples, 0.01%)</title><rect x="33.5746%" y="261" width="0.0137%" height="15" fill="rgb(227,7,12)" fg:x="9833" fg:w="4"/><text x="33.8246%" y="271.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (5 samples, 0.02%)</title><rect x="33.5951%" y="245" width="0.0171%" height="15" fill="rgb(245,203,43)" fg:x="9839" fg:w="5"/><text x="33.8451%" y="255.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (4 samples, 0.01%)</title><rect x="33.6122%" y="213" width="0.0137%" height="15" fill="rgb(238,205,33)" fg:x="9844" fg:w="4"/><text x="33.8622%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (4 samples, 0.01%)</title><rect x="33.6497%" y="165" width="0.0137%" height="15" fill="rgb(231,56,7)" fg:x="9855" fg:w="4"/><text x="33.8997%" y="175.50"></text></g><g><title>bumpalo::Bump::alloc_layout (12 samples, 0.04%)</title><rect x="33.6258%" y="213" width="0.0410%" height="15" fill="rgb(244,186,29)" fg:x="9848" fg:w="12"/><text x="33.8758%" y="223.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (12 samples, 0.04%)</title><rect x="33.6258%" y="197" width="0.0410%" height="15" fill="rgb(234,111,31)" fg:x="9848" fg:w="12"/><text x="33.8758%" y="207.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (12 samples, 0.04%)</title><rect x="33.6258%" y="181" width="0.0410%" height="15" fill="rgb(241,149,10)" fg:x="9848" fg:w="12"/><text x="33.8758%" y="191.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter::{{closure}} (70 samples, 0.24%)</title><rect x="33.6668%" y="213" width="0.2390%" height="15" fill="rgb(249,206,44)" fg:x="9860" fg:w="70"/><text x="33.9168%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.24%)</title><rect x="33.6668%" y="197" width="0.2390%" height="15" fill="rgb(251,153,30)" fg:x="9860" fg:w="70"/><text x="33.9168%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (69 samples, 0.24%)</title><rect x="33.6702%" y="181" width="0.2356%" height="15" fill="rgb(239,152,38)" fg:x="9861" fg:w="69"/><text x="33.9202%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (14 samples, 0.05%)</title><rect x="33.8580%" y="165" width="0.0478%" height="15" fill="rgb(249,139,47)" fg:x="9916" fg:w="14"/><text x="34.1080%" y="175.50"></text></g><g><title>&lt;dryadsynth_bv::rule::binary::XorRule as dryadsynth_bv::rule::Rule&gt;::evaluate::{{closure}} (14 samples, 0.05%)</title><rect x="33.8580%" y="149" width="0.0478%" height="15" fill="rgb(244,64,35)" fg:x="9916" fg:w="14"/><text x="34.1080%" y="159.50"></text></g><g><title>&lt;&amp;u64 as core::ops::bit::BitXor&lt;&amp;u64&gt;&gt;::bitxor (14 samples, 0.05%)</title><rect x="33.8580%" y="133" width="0.0478%" height="15" fill="rgb(216,46,15)" fg:x="9916" fg:w="14"/><text x="34.1080%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (14 samples, 0.05%)</title><rect x="33.8580%" y="117" width="0.0478%" height="15" fill="rgb(250,74,19)" fg:x="9916" fg:w="14"/><text x="34.1080%" y="127.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (24 samples, 0.08%)</title><rect x="33.9058%" y="213" width="0.0819%" height="15" fill="rgb(249,42,33)" fg:x="9930" fg:w="24"/><text x="34.1558%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (24 samples, 0.08%)</title><rect x="33.9058%" y="197" width="0.0819%" height="15" fill="rgb(242,149,17)" fg:x="9930" fg:w="24"/><text x="34.1558%" y="207.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (884 samples, 3.02%)</title><rect x="31.1913%" y="293" width="3.0184%" height="15" fill="rgb(244,29,21)" fg:x="9135" fg:w="884"/><text x="31.4413%" y="303.50">&lt;dr..</text></g><g><title>&lt;dryadsynth_bv::rule::binary::XorRule as dryadsynth_bv::rule::Rule&gt;::evaluate (193 samples, 0.66%)</title><rect x="33.5507%" y="277" width="0.6590%" height="15" fill="rgb(220,130,37)" fg:x="9826" fg:w="193"/><text x="33.8007%" y="287.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_bv (180 samples, 0.61%)</title><rect x="33.5951%" y="261" width="0.6146%" height="15" fill="rgb(211,67,2)" fg:x="9839" fg:w="180"/><text x="33.8451%" y="271.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter (175 samples, 0.60%)</title><rect x="33.6122%" y="245" width="0.5975%" height="15" fill="rgb(235,68,52)" fg:x="9844" fg:w="175"/><text x="33.8622%" y="255.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (175 samples, 0.60%)</title><rect x="33.6122%" y="229" width="0.5975%" height="15" fill="rgb(246,142,3)" fg:x="9844" fg:w="175"/><text x="33.8622%" y="239.50"></text></g><g><title>core::ptr::write (65 samples, 0.22%)</title><rect x="33.9878%" y="213" width="0.2219%" height="15" fill="rgb(241,25,7)" fg:x="9954" fg:w="65"/><text x="34.2378%" y="223.50"></text></g><g><title>&lt;dryadsynth_bv::rule::binary::AddRule as dryadsynth_bv::rule::Rule&gt;::parent (3 samples, 0.01%)</title><rect x="34.4419%" y="277" width="0.0102%" height="15" fill="rgb(242,119,39)" fg:x="10087" fg:w="3"/><text x="34.6919%" y="287.50"></text></g><g><title>&lt;dryadsynth_bv::rule::binary::XorRule as dryadsynth_bv::rule::Rule&gt;::parent (4 samples, 0.01%)</title><rect x="34.4521%" y="277" width="0.0137%" height="15" fill="rgb(241,98,45)" fg:x="10090" fg:w="4"/><text x="34.7021%" y="287.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::parent (77 samples, 0.26%)</title><rect x="34.2131%" y="293" width="0.2629%" height="15" fill="rgb(254,28,30)" fg:x="10020" fg:w="77"/><text x="34.4631%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_layout (4 samples, 0.01%)</title><rect x="34.4897%" y="229" width="0.0137%" height="15" fill="rgb(241,142,54)" fg:x="10101" fg:w="4"/><text x="34.7397%" y="239.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (4 samples, 0.01%)</title><rect x="34.4897%" y="213" width="0.0137%" height="15" fill="rgb(222,85,15)" fg:x="10101" fg:w="4"/><text x="34.7397%" y="223.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (4 samples, 0.01%)</title><rect x="34.4897%" y="197" width="0.0137%" height="15" fill="rgb(210,85,47)" fg:x="10101" fg:w="4"/><text x="34.7397%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.03%)</title><rect x="34.5034%" y="197" width="0.0273%" height="15" fill="rgb(224,206,25)" fg:x="10105" fg:w="8"/><text x="34.7534%" y="207.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter::{{closure}} (9 samples, 0.03%)</title><rect x="34.5034%" y="229" width="0.0307%" height="15" fill="rgb(243,201,19)" fg:x="10105" fg:w="9"/><text x="34.7534%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="34.5034%" y="213" width="0.0307%" height="15" fill="rgb(236,59,4)" fg:x="10105" fg:w="9"/><text x="34.7534%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.01%)</title><rect x="34.5341%" y="229" width="0.0102%" height="15" fill="rgb(254,179,45)" fg:x="10114" fg:w="3"/><text x="34.7841%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.01%)</title><rect x="34.5341%" y="213" width="0.0102%" height="15" fill="rgb(226,14,10)" fg:x="10114" fg:w="3"/><text x="34.7841%" y="223.50"></text></g><g><title>&lt;dryadsynth_bv::rule::shift::NotRule as dryadsynth_bv::rule::Rule&gt;::evaluate (58 samples, 0.20%)</title><rect x="34.4760%" y="293" width="0.1980%" height="15" fill="rgb(244,27,41)" fg:x="10097" fg:w="58"/><text x="34.7260%" y="303.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_bv (54 samples, 0.18%)</title><rect x="34.4897%" y="277" width="0.1844%" height="15" fill="rgb(235,35,32)" fg:x="10101" fg:w="54"/><text x="34.7397%" y="287.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter (54 samples, 0.18%)</title><rect x="34.4897%" y="261" width="0.1844%" height="15" fill="rgb(218,68,31)" fg:x="10101" fg:w="54"/><text x="34.7397%" y="271.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (54 samples, 0.18%)</title><rect x="34.4897%" y="245" width="0.1844%" height="15" fill="rgb(207,120,37)" fg:x="10101" fg:w="54"/><text x="34.7397%" y="255.50"></text></g><g><title>core::ptr::write (38 samples, 0.13%)</title><rect x="34.5443%" y="229" width="0.1298%" height="15" fill="rgb(227,98,0)" fg:x="10117" fg:w="38"/><text x="34.7943%" y="239.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter::{{closure}} (3 samples, 0.01%)</title><rect x="34.6775%" y="213" width="0.0102%" height="15" fill="rgb(207,7,3)" fg:x="10156" fg:w="3"/><text x="34.9275%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="34.6775%" y="197" width="0.0102%" height="15" fill="rgb(206,98,19)" fg:x="10156" fg:w="3"/><text x="34.9275%" y="207.50"></text></g><g><title>&lt;dryadsynth_bv::rule::shift::ShlRule as dryadsynth_bv::rule::Rule&gt;::evaluate (7 samples, 0.02%)</title><rect x="34.6741%" y="293" width="0.0239%" height="15" fill="rgb(217,5,26)" fg:x="10155" fg:w="7"/><text x="34.9241%" y="303.50"></text></g><g><title>dryadsynth_bv::bv::Bv::map (6 samples, 0.02%)</title><rect x="34.6775%" y="277" width="0.0205%" height="15" fill="rgb(235,190,38)" fg:x="10156" fg:w="6"/><text x="34.9275%" y="287.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_iter (6 samples, 0.02%)</title><rect x="34.6775%" y="261" width="0.0205%" height="15" fill="rgb(247,86,24)" fg:x="10156" fg:w="6"/><text x="34.9275%" y="271.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter (6 samples, 0.02%)</title><rect x="34.6775%" y="245" width="0.0205%" height="15" fill="rgb(205,101,16)" fg:x="10156" fg:w="6"/><text x="34.9275%" y="255.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (6 samples, 0.02%)</title><rect x="34.6775%" y="229" width="0.0205%" height="15" fill="rgb(246,168,33)" fg:x="10156" fg:w="6"/><text x="34.9275%" y="239.50"></text></g><g><title>core::ptr::write (3 samples, 0.01%)</title><rect x="34.6877%" y="213" width="0.0102%" height="15" fill="rgb(231,114,1)" fg:x="10159" fg:w="3"/><text x="34.9377%" y="223.50"></text></g><g><title>&lt;dryadsynth_bv::rule::shift::ShrRule as dryadsynth_bv::rule::Rule&gt;::evaluate (7 samples, 0.02%)</title><rect x="34.7287%" y="261" width="0.0239%" height="15" fill="rgb(207,184,53)" fg:x="10171" fg:w="7"/><text x="34.9787%" y="271.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (8 samples, 0.03%)</title><rect x="34.7594%" y="165" width="0.0273%" height="15" fill="rgb(224,95,51)" fg:x="10180" fg:w="8"/><text x="35.0094%" y="175.50"></text></g><g><title>bumpalo::Bump::alloc_layout (12 samples, 0.04%)</title><rect x="34.7526%" y="213" width="0.0410%" height="15" fill="rgb(212,188,45)" fg:x="10178" fg:w="12"/><text x="35.0026%" y="223.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (12 samples, 0.04%)</title><rect x="34.7526%" y="197" width="0.0410%" height="15" fill="rgb(223,154,38)" fg:x="10178" fg:w="12"/><text x="35.0026%" y="207.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (12 samples, 0.04%)</title><rect x="34.7526%" y="181" width="0.0410%" height="15" fill="rgb(251,22,52)" fg:x="10178" fg:w="12"/><text x="35.0026%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.06%)</title><rect x="34.7936%" y="165" width="0.0615%" height="15" fill="rgb(229,209,22)" fg:x="10190" fg:w="18"/><text x="35.0436%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.09%)</title><rect x="34.7936%" y="181" width="0.0922%" height="15" fill="rgb(234,138,34)" fg:x="10190" fg:w="27"/><text x="35.0436%" y="191.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (8 samples, 0.03%)</title><rect x="34.8585%" y="165" width="0.0273%" height="15" fill="rgb(212,95,11)" fg:x="10209" fg:w="8"/><text x="35.1085%" y="175.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter::{{closure}} (56 samples, 0.19%)</title><rect x="34.7936%" y="213" width="0.1912%" height="15" fill="rgb(240,179,47)" fg:x="10190" fg:w="56"/><text x="35.0436%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.19%)</title><rect x="34.7936%" y="197" width="0.1912%" height="15" fill="rgb(240,163,11)" fg:x="10190" fg:w="56"/><text x="35.0436%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (29 samples, 0.10%)</title><rect x="34.8858%" y="181" width="0.0990%" height="15" fill="rgb(236,37,12)" fg:x="10217" fg:w="29"/><text x="35.1358%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (29 samples, 0.10%)</title><rect x="34.8858%" y="165" width="0.0990%" height="15" fill="rgb(232,164,16)" fg:x="10217" fg:w="29"/><text x="35.1358%" y="175.50"></text></g><g><title>&lt;dryadsynth_bv::rule::shift::ShrRule as dryadsynth_bv::rule::Rule&gt;::evaluate::{{closure}} (29 samples, 0.10%)</title><rect x="34.8858%" y="149" width="0.0990%" height="15" fill="rgb(244,205,15)" fg:x="10217" fg:w="29"/><text x="35.1358%" y="159.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.02%)</title><rect x="34.9848%" y="213" width="0.0239%" height="15" fill="rgb(223,117,47)" fg:x="10246" fg:w="7"/><text x="35.2348%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (7 samples, 0.02%)</title><rect x="34.9848%" y="197" width="0.0239%" height="15" fill="rgb(244,107,35)" fg:x="10246" fg:w="7"/><text x="35.2348%" y="207.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (6 samples, 0.02%)</title><rect x="34.9882%" y="181" width="0.0205%" height="15" fill="rgb(205,140,8)" fg:x="10247" fg:w="6"/><text x="35.2382%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (6 samples, 0.02%)</title><rect x="34.9882%" y="165" width="0.0205%" height="15" fill="rgb(228,84,46)" fg:x="10247" fg:w="6"/><text x="35.2382%" y="175.50"></text></g><g><title>&lt;dryadsynth_bv::rule::shift::ShrRule as dryadsynth_bv::rule::Rule&gt;::evaluate (176 samples, 0.60%)</title><rect x="34.6980%" y="293" width="0.6009%" height="15" fill="rgb(254,188,9)" fg:x="10162" fg:w="176"/><text x="34.9480%" y="303.50"></text></g><g><title>dryadsynth_bv::bv::Bv::map (175 samples, 0.60%)</title><rect x="34.7014%" y="277" width="0.5975%" height="15" fill="rgb(206,112,54)" fg:x="10163" fg:w="175"/><text x="34.9514%" y="287.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_iter (160 samples, 0.55%)</title><rect x="34.7526%" y="261" width="0.5463%" height="15" fill="rgb(216,84,49)" fg:x="10178" fg:w="160"/><text x="35.0026%" y="271.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter (160 samples, 0.55%)</title><rect x="34.7526%" y="245" width="0.5463%" height="15" fill="rgb(214,194,35)" fg:x="10178" fg:w="160"/><text x="35.0026%" y="255.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (160 samples, 0.55%)</title><rect x="34.7526%" y="229" width="0.5463%" height="15" fill="rgb(249,28,3)" fg:x="10178" fg:w="160"/><text x="35.0026%" y="239.50"></text></g><g><title>core::ptr::write (85 samples, 0.29%)</title><rect x="35.0087%" y="213" width="0.2902%" height="15" fill="rgb(222,56,52)" fg:x="10253" fg:w="85"/><text x="35.2587%" y="223.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::derive_from (4,803 samples, 16.40%)</title><rect x="18.9675%" y="325" width="16.3998%" height="15" fill="rgb(245,217,50)" fg:x="5555" fg:w="4803"/><text x="19.2175%" y="335.50">dryadsynth_bv::rule::basi..</text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::new (1,629 samples, 5.56%)</title><rect x="29.8050%" y="309" width="5.5622%" height="15" fill="rgb(213,201,24)" fg:x="8729" fg:w="1629"/><text x="30.0550%" y="319.50">dryadsy..</text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::new (20 samples, 0.07%)</title><rect x="35.2989%" y="293" width="0.0683%" height="15" fill="rgb(248,116,28)" fg:x="10338" fg:w="20"/><text x="35.5489%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.03%)</title><rect x="35.9716%" y="293" width="0.0341%" height="15" fill="rgb(219,72,43)" fg:x="10535" fg:w="10"/><text x="36.2216%" y="303.50"></text></g><g><title>dryadsynth_bv::bv::Hint::zip::{{closure}} (95 samples, 0.32%)</title><rect x="36.0467%" y="261" width="0.3244%" height="15" fill="rgb(209,138,14)" fg:x="10557" fg:w="95"/><text x="36.2967%" y="271.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Bv as core::ops::index::Index&lt;usize&gt;&gt;::index (27 samples, 0.09%)</title><rect x="36.2789%" y="245" width="0.0922%" height="15" fill="rgb(222,18,33)" fg:x="10625" fg:w="27"/><text x="36.5289%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (128 samples, 0.44%)</title><rect x="35.9716%" y="309" width="0.4371%" height="15" fill="rgb(213,199,7)" fg:x="10535" fg:w="128"/><text x="36.2216%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (118 samples, 0.40%)</title><rect x="36.0057%" y="293" width="0.4029%" height="15" fill="rgb(250,110,10)" fg:x="10545" fg:w="118"/><text x="36.2557%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (118 samples, 0.40%)</title><rect x="36.0057%" y="277" width="0.4029%" height="15" fill="rgb(248,123,6)" fg:x="10545" fg:w="118"/><text x="36.2557%" y="287.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::derive_from_shr (11 samples, 0.04%)</title><rect x="36.3711%" y="261" width="0.0376%" height="15" fill="rgb(206,91,31)" fg:x="10652" fg:w="11"/><text x="36.6211%" y="271.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::max (5 samples, 0.02%)</title><rect x="36.4086%" y="309" width="0.0171%" height="15" fill="rgb(211,154,13)" fg:x="10663" fg:w="5"/><text x="36.6586%" y="319.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::min (5 samples, 0.02%)</title><rect x="36.4257%" y="309" width="0.0171%" height="15" fill="rgb(225,148,7)" fg:x="10668" fg:w="5"/><text x="36.6757%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (352 samples, 1.20%)</title><rect x="36.4428%" y="309" width="1.2019%" height="15" fill="rgb(220,160,43)" fg:x="10673" fg:w="352"/><text x="36.6928%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.04%)</title><rect x="37.6720%" y="245" width="0.0410%" height="15" fill="rgb(213,52,39)" fg:x="11033" fg:w="12"/><text x="37.9220%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (14 samples, 0.05%)</title><rect x="37.6720%" y="261" width="0.0478%" height="15" fill="rgb(243,137,7)" fg:x="11033" fg:w="14"/><text x="37.9220%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (3 samples, 0.01%)</title><rect x="37.7198%" y="261" width="0.0102%" height="15" fill="rgb(230,79,13)" fg:x="11047" fg:w="3"/><text x="37.9698%" y="271.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (3 samples, 0.01%)</title><rect x="37.7198%" y="245" width="0.0102%" height="15" fill="rgb(247,105,23)" fg:x="11047" fg:w="3"/><text x="37.9698%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (25 samples, 0.09%)</title><rect x="37.7301%" y="261" width="0.0854%" height="15" fill="rgb(223,179,41)" fg:x="11050" fg:w="25"/><text x="37.9801%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::le (25 samples, 0.09%)</title><rect x="37.7301%" y="245" width="0.0854%" height="15" fill="rgb(218,9,34)" fg:x="11050" fg:w="25"/><text x="37.9801%" y="255.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::PartialOrd&gt;::partial_cmp (25 samples, 0.09%)</title><rect x="37.7301%" y="229" width="0.0854%" height="15" fill="rgb(222,106,8)" fg:x="11050" fg:w="25"/><text x="37.9801%" y="239.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::Ord&gt;::cmp (25 samples, 0.09%)</title><rect x="37.7301%" y="213" width="0.0854%" height="15" fill="rgb(211,220,0)" fg:x="11050" fg:w="25"/><text x="37.9801%" y="223.50"></text></g><g><title>dryadsynth_bv::algo::State::evaluate (21 samples, 0.07%)</title><rect x="37.7437%" y="197" width="0.0717%" height="15" fill="rgb(229,52,16)" fg:x="11054" fg:w="21"/><text x="37.9937%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (53 samples, 0.18%)</title><rect x="37.6447%" y="277" width="0.1810%" height="15" fill="rgb(212,155,18)" fg:x="11025" fg:w="53"/><text x="37.8947%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;dryadsynth_bv::algo::State&gt;&gt; (3 samples, 0.01%)</title><rect x="37.8154%" y="261" width="0.0102%" height="15" fill="rgb(242,21,14)" fg:x="11075" fg:w="3"/><text x="38.0654%" y="271.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="37.8154%" y="245" width="0.0102%" height="15" fill="rgb(222,19,48)" fg:x="11075" fg:w="3"/><text x="38.0654%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.01%)</title><rect x="37.8154%" y="229" width="0.0102%" height="15" fill="rgb(232,45,27)" fg:x="11075" fg:w="3"/><text x="38.0654%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.02%)</title><rect x="37.8257%" y="277" width="0.0205%" height="15" fill="rgb(249,103,42)" fg:x="11078" fg:w="6"/><text x="38.0757%" y="287.50"></text></g><g><title>core::ptr::write (4 samples, 0.01%)</title><rect x="37.8325%" y="261" width="0.0137%" height="15" fill="rgb(246,81,33)" fg:x="11080" fg:w="4"/><text x="38.0825%" y="271.50"></text></g><g><title>dryadsynth_bv::algo::Algo::push (63 samples, 0.22%)</title><rect x="37.6447%" y="309" width="0.2151%" height="15" fill="rgb(252,33,42)" fg:x="11025" fg:w="63"/><text x="37.8947%" y="319.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (63 samples, 0.22%)</title><rect x="37.6447%" y="293" width="0.2151%" height="15" fill="rgb(209,212,41)" fg:x="11025" fg:w="63"/><text x="37.8947%" y="303.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::derive_from_shr (4 samples, 0.01%)</title><rect x="37.8461%" y="277" width="0.0137%" height="15" fill="rgb(207,154,6)" fg:x="11084" fg:w="4"/><text x="38.0961%" y="287.50"></text></g><g><title>dryadsynth_bv::algo::State::derive (23 samples, 0.08%)</title><rect x="37.8598%" y="309" width="0.0785%" height="15" fill="rgb(223,64,47)" fg:x="11088" fg:w="23"/><text x="38.1098%" y="319.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc (19 samples, 0.06%)</title><rect x="37.9383%" y="309" width="0.0649%" height="15" fill="rgb(211,161,38)" fg:x="11111" fg:w="19"/><text x="38.1883%" y="319.50"></text></g><g><title>bumpalo::Bump::alloc (16 samples, 0.05%)</title><rect x="37.9486%" y="293" width="0.0546%" height="15" fill="rgb(219,138,40)" fg:x="11114" fg:w="16"/><text x="38.1986%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_with (16 samples, 0.05%)</title><rect x="37.9486%" y="277" width="0.0546%" height="15" fill="rgb(241,228,46)" fg:x="11114" fg:w="16"/><text x="38.1986%" y="287.50"></text></g><g><title>bumpalo::Bump::alloc_with::inner_writer (15 samples, 0.05%)</title><rect x="37.9520%" y="261" width="0.0512%" height="15" fill="rgb(223,209,38)" fg:x="11115" fg:w="15"/><text x="38.2020%" y="271.50"></text></g><g><title>core::ptr::write (15 samples, 0.05%)</title><rect x="37.9520%" y="245" width="0.0512%" height="15" fill="rgb(236,164,45)" fg:x="11115" fg:w="15"/><text x="38.2020%" y="255.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::derive_from_shr (32 samples, 0.11%)</title><rect x="38.0032%" y="309" width="0.1093%" height="15" fill="rgb(231,15,5)" fg:x="11130" fg:w="32"/><text x="38.2532%" y="319.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::evaluate (6 samples, 0.02%)</title><rect x="38.2286%" y="293" width="0.0205%" height="15" fill="rgb(252,35,15)" fg:x="11196" fg:w="6"/><text x="38.4786%" y="303.50"></text></g><g><title>&lt;dryadsynth_bv::rule::BvRule as dryadsynth_bv::rule::Rule&gt;::parent (3 samples, 0.01%)</title><rect x="38.2491%" y="293" width="0.0102%" height="15" fill="rgb(248,181,18)" fg:x="11202" fg:w="3"/><text x="38.4991%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.03%)</title><rect x="38.2695%" y="165" width="0.0341%" height="15" fill="rgb(233,39,42)" fg:x="11208" fg:w="10"/><text x="38.5195%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.08%)</title><rect x="38.2695%" y="181" width="0.0785%" height="15" fill="rgb(238,110,33)" fg:x="11208" fg:w="23"/><text x="38.5195%" y="191.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (11 samples, 0.04%)</title><rect x="38.3105%" y="165" width="0.0376%" height="15" fill="rgb(233,195,10)" fg:x="11220" fg:w="11"/><text x="38.5605%" y="175.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter::{{closure}} (41 samples, 0.14%)</title><rect x="38.2695%" y="213" width="0.1400%" height="15" fill="rgb(254,105,3)" fg:x="11208" fg:w="41"/><text x="38.5195%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.14%)</title><rect x="38.2695%" y="197" width="0.1400%" height="15" fill="rgb(221,225,9)" fg:x="11208" fg:w="41"/><text x="38.5195%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (18 samples, 0.06%)</title><rect x="38.3481%" y="181" width="0.0615%" height="15" fill="rgb(224,227,45)" fg:x="11231" fg:w="18"/><text x="38.5981%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (18 samples, 0.06%)</title><rect x="38.3481%" y="165" width="0.0615%" height="15" fill="rgb(229,198,43)" fg:x="11231" fg:w="18"/><text x="38.5981%" y="175.50"></text></g><g><title>&lt;dryadsynth_bv::rule::shift::ShrRule as dryadsynth_bv::rule::Rule&gt;::evaluate::{{closure}} (18 samples, 0.06%)</title><rect x="38.3481%" y="149" width="0.0615%" height="15" fill="rgb(206,209,35)" fg:x="11231" fg:w="18"/><text x="38.5981%" y="159.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (7 samples, 0.02%)</title><rect x="38.4164%" y="181" width="0.0239%" height="15" fill="rgb(245,195,53)" fg:x="11251" fg:w="7"/><text x="38.6664%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (7 samples, 0.02%)</title><rect x="38.4164%" y="165" width="0.0239%" height="15" fill="rgb(240,92,26)" fg:x="11251" fg:w="7"/><text x="38.6664%" y="175.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (10 samples, 0.03%)</title><rect x="38.4095%" y="213" width="0.0341%" height="15" fill="rgb(207,40,23)" fg:x="11249" fg:w="10"/><text x="38.6595%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (10 samples, 0.03%)</title><rect x="38.4095%" y="197" width="0.0341%" height="15" fill="rgb(223,111,35)" fg:x="11249" fg:w="10"/><text x="38.6595%" y="207.50"></text></g><g><title>&lt;dryadsynth_bv::rule::shift::ShrRule as dryadsynth_bv::rule::Rule&gt;::evaluate (111 samples, 0.38%)</title><rect x="38.2593%" y="293" width="0.3790%" height="15" fill="rgb(229,147,28)" fg:x="11205" fg:w="111"/><text x="38.5093%" y="303.50"></text></g><g><title>dryadsynth_bv::bv::Bv::map (111 samples, 0.38%)</title><rect x="38.2593%" y="277" width="0.3790%" height="15" fill="rgb(211,29,28)" fg:x="11205" fg:w="111"/><text x="38.5093%" y="287.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_iter (110 samples, 0.38%)</title><rect x="38.2627%" y="261" width="0.3756%" height="15" fill="rgb(228,72,33)" fg:x="11206" fg:w="110"/><text x="38.5127%" y="271.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter (110 samples, 0.38%)</title><rect x="38.2627%" y="245" width="0.3756%" height="15" fill="rgb(205,214,31)" fg:x="11206" fg:w="110"/><text x="38.5127%" y="255.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (108 samples, 0.37%)</title><rect x="38.2695%" y="229" width="0.3688%" height="15" fill="rgb(224,111,15)" fg:x="11208" fg:w="108"/><text x="38.5195%" y="239.50"></text></g><g><title>core::ptr::write (57 samples, 0.19%)</title><rect x="38.4437%" y="213" width="0.1946%" height="15" fill="rgb(253,21,26)" fg:x="11259" fg:w="57"/><text x="38.6937%" y="223.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::derive_from_shr (959 samples, 3.27%)</title><rect x="35.3672%" y="325" width="3.2745%" height="15" fill="rgb(245,139,43)" fg:x="10358" fg:w="959"/><text x="35.6172%" y="335.50">dry..</text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::new (155 samples, 0.53%)</title><rect x="38.1125%" y="309" width="0.5292%" height="15" fill="rgb(252,170,7)" fg:x="11162" fg:w="155"/><text x="38.3625%" y="319.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (23 samples, 0.08%)</title><rect x="38.9627%" y="261" width="0.0785%" height="15" fill="rgb(231,118,14)" fg:x="11411" fg:w="23"/><text x="39.2127%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.08%)</title><rect x="38.9627%" y="245" width="0.0785%" height="15" fill="rgb(238,83,0)" fg:x="11411" fg:w="23"/><text x="39.2127%" y="255.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (12 samples, 0.04%)</title><rect x="39.0412%" y="245" width="0.0410%" height="15" fill="rgb(221,39,39)" fg:x="11434" fg:w="12"/><text x="39.2912%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (13 samples, 0.04%)</title><rect x="39.0412%" y="261" width="0.0444%" height="15" fill="rgb(222,119,46)" fg:x="11434" fg:w="13"/><text x="39.2912%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (95 samples, 0.32%)</title><rect x="39.0856%" y="261" width="0.3244%" height="15" fill="rgb(222,165,49)" fg:x="11447" fg:w="95"/><text x="39.3356%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::le (95 samples, 0.32%)</title><rect x="39.0856%" y="245" width="0.3244%" height="15" fill="rgb(219,113,52)" fg:x="11447" fg:w="95"/><text x="39.3356%" y="255.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::PartialOrd&gt;::partial_cmp (95 samples, 0.32%)</title><rect x="39.0856%" y="229" width="0.3244%" height="15" fill="rgb(214,7,15)" fg:x="11447" fg:w="95"/><text x="39.3356%" y="239.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::Ord&gt;::cmp (95 samples, 0.32%)</title><rect x="39.0856%" y="213" width="0.3244%" height="15" fill="rgb(235,32,4)" fg:x="11447" fg:w="95"/><text x="39.3356%" y="223.50"></text></g><g><title>dryadsynth_bv::algo::State::evaluate (94 samples, 0.32%)</title><rect x="39.0890%" y="197" width="0.3210%" height="15" fill="rgb(238,90,54)" fg:x="11448" fg:w="94"/><text x="39.3390%" y="207.50"></text></g><g><title>core::cmp::min (3 samples, 0.01%)</title><rect x="39.3997%" y="181" width="0.0102%" height="15" fill="rgb(213,208,19)" fg:x="11539" fg:w="3"/><text x="39.6497%" y="191.50"></text></g><g><title>dryadsynth_bv::rule::binary::AddRule::derive_from (3 samples, 0.01%)</title><rect x="39.3997%" y="165" width="0.0102%" height="15" fill="rgb(233,156,4)" fg:x="11539" fg:w="3"/><text x="39.6497%" y="175.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (159 samples, 0.54%)</title><rect x="38.9046%" y="277" width="0.5429%" height="15" fill="rgb(207,194,5)" fg:x="11394" fg:w="159"/><text x="39.1546%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;dryadsynth_bv::algo::State&gt;&gt; (11 samples, 0.04%)</title><rect x="39.4100%" y="261" width="0.0376%" height="15" fill="rgb(206,111,30)" fg:x="11542" fg:w="11"/><text x="39.6600%" y="271.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.04%)</title><rect x="39.4100%" y="245" width="0.0376%" height="15" fill="rgb(243,70,54)" fg:x="11542" fg:w="11"/><text x="39.6600%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.04%)</title><rect x="39.4100%" y="229" width="0.0376%" height="15" fill="rgb(242,28,8)" fg:x="11542" fg:w="11"/><text x="39.6600%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.01%)</title><rect x="39.4475%" y="261" width="0.0102%" height="15" fill="rgb(219,106,18)" fg:x="11553" fg:w="3"/><text x="39.6975%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.01%)</title><rect x="39.4475%" y="245" width="0.0102%" height="15" fill="rgb(244,222,10)" fg:x="11553" fg:w="3"/><text x="39.6975%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (32 samples, 0.11%)</title><rect x="39.4475%" y="277" width="0.1093%" height="15" fill="rgb(236,179,52)" fg:x="11553" fg:w="32"/><text x="39.6975%" y="287.50"></text></g><g><title>core::ptr::write (29 samples, 0.10%)</title><rect x="39.4578%" y="261" width="0.0990%" height="15" fill="rgb(213,23,39)" fg:x="11556" fg:w="29"/><text x="39.7078%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (200 samples, 0.68%)</title><rect x="38.8978%" y="293" width="0.6829%" height="15" fill="rgb(238,48,10)" fg:x="11392" fg:w="200"/><text x="39.1478%" y="303.50"></text></g><g><title>dryadsynth_bv::rule::binary::AddRule::derive_from (7 samples, 0.02%)</title><rect x="39.5568%" y="277" width="0.0239%" height="15" fill="rgb(251,196,23)" fg:x="11585" fg:w="7"/><text x="39.8068%" y="287.50"></text></g><g><title>dryadsynth_bv::algo::Algo::push (201 samples, 0.69%)</title><rect x="38.8978%" y="309" width="0.6863%" height="15" fill="rgb(250,152,24)" fg:x="11392" fg:w="201"/><text x="39.1478%" y="319.50"></text></g><g><title>dryadsynth_bv::algo::State::derive (68 samples, 0.23%)</title><rect x="39.5841%" y="309" width="0.2322%" height="15" fill="rgb(209,150,17)" fg:x="11593" fg:w="68"/><text x="39.8341%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (7 samples, 0.02%)</title><rect x="39.8504%" y="213" width="0.0239%" height="15" fill="rgb(234,202,34)" fg:x="11671" fg:w="7"/><text x="40.1004%" y="223.50"></text></g><g><title>bumpalo::Bump::alloc_layout (16 samples, 0.05%)</title><rect x="39.8334%" y="261" width="0.0546%" height="15" fill="rgb(253,148,53)" fg:x="11666" fg:w="16"/><text x="40.0834%" y="271.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (16 samples, 0.05%)</title><rect x="39.8334%" y="245" width="0.0546%" height="15" fill="rgb(218,129,16)" fg:x="11666" fg:w="16"/><text x="40.0834%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (16 samples, 0.05%)</title><rect x="39.8334%" y="229" width="0.0546%" height="15" fill="rgb(216,85,19)" fg:x="11666" fg:w="16"/><text x="40.0834%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_sub (4 samples, 0.01%)</title><rect x="39.8743%" y="213" width="0.0137%" height="15" fill="rgb(235,228,7)" fg:x="11678" fg:w="4"/><text x="40.1243%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_offset (4 samples, 0.01%)</title><rect x="39.8743%" y="197" width="0.0137%" height="15" fill="rgb(245,175,0)" fg:x="11678" fg:w="4"/><text x="40.1243%" y="207.50"></text></g><g><title>bumpalo::Bump::alloc_with (89 samples, 0.30%)</title><rect x="39.8334%" y="277" width="0.3039%" height="15" fill="rgb(208,168,36)" fg:x="11666" fg:w="89"/><text x="40.0834%" y="287.50"></text></g><g><title>bumpalo::Bump::alloc_with::inner_writer (73 samples, 0.25%)</title><rect x="39.8880%" y="261" width="0.2493%" height="15" fill="rgb(246,171,24)" fg:x="11682" fg:w="73"/><text x="40.1380%" y="271.50"></text></g><g><title>core::ptr::write (73 samples, 0.25%)</title><rect x="39.8880%" y="245" width="0.2493%" height="15" fill="rgb(215,142,24)" fg:x="11682" fg:w="73"/><text x="40.1380%" y="255.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc (95 samples, 0.32%)</title><rect x="39.8163%" y="309" width="0.3244%" height="15" fill="rgb(250,187,7)" fg:x="11661" fg:w="95"/><text x="40.0663%" y="319.50"></text></g><g><title>bumpalo::Bump::alloc (90 samples, 0.31%)</title><rect x="39.8334%" y="293" width="0.3073%" height="15" fill="rgb(228,66,33)" fg:x="11666" fg:w="90"/><text x="40.0834%" y="303.50"></text></g><g><title>dryadsynth_bv::bv::Context::allone (6 samples, 0.02%)</title><rect x="40.1407%" y="309" width="0.0205%" height="15" fill="rgb(234,215,21)" fg:x="11756" fg:w="6"/><text x="40.3907%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.24%)</title><rect x="40.4172%" y="261" width="0.2424%" height="15" fill="rgb(222,191,20)" fg:x="11837" fg:w="71"/><text x="40.6672%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (341 samples, 1.16%)</title><rect x="40.6597%" y="245" width="1.1643%" height="15" fill="rgb(245,79,54)" fg:x="11908" fg:w="341"/><text x="40.9097%" y="255.50"></text></g><g><title>dryadsynth_bv::bv::Hint::zip::{{closure}} (303 samples, 1.03%)</title><rect x="40.7894%" y="229" width="1.0346%" height="15" fill="rgb(240,10,37)" fg:x="11946" fg:w="303"/><text x="41.0394%" y="239.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Bv as core::ops::index::Index&lt;usize&gt;&gt;::index (102 samples, 0.35%)</title><rect x="41.4757%" y="213" width="0.3483%" height="15" fill="rgb(214,192,32)" fg:x="12147" fg:w="102"/><text x="41.7257%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (438 samples, 1.50%)</title><rect x="40.4172%" y="277" width="1.4955%" height="15" fill="rgb(209,36,54)" fg:x="11837" fg:w="438"/><text x="40.6672%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (367 samples, 1.25%)</title><rect x="40.6597%" y="261" width="1.2531%" height="15" fill="rgb(220,10,11)" fg:x="11908" fg:w="367"/><text x="40.9097%" y="271.50"></text></g><g><title>dryadsynth_bv::rule::binary::AddRule::derive_from (26 samples, 0.09%)</title><rect x="41.8240%" y="245" width="0.0888%" height="15" fill="rgb(221,106,17)" fg:x="12249" fg:w="26"/><text x="42.0740%" y="255.50"></text></g><g><title>dryadsynth_bv::rule::binary::AddRule::derive_from (47 samples, 0.16%)</title><rect x="41.9128%" y="245" width="0.1605%" height="15" fill="rgb(251,142,44)" fg:x="12275" fg:w="47"/><text x="42.1628%" y="255.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::max (24 samples, 0.08%)</title><rect x="45.0439%" y="229" width="0.0819%" height="15" fill="rgb(238,13,15)" fg:x="13192" fg:w="24"/><text x="45.2939%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (195 samples, 0.67%)</title><rect x="45.1258%" y="229" width="0.6658%" height="15" fill="rgb(208,107,27)" fg:x="13216" fg:w="195"/><text x="45.3758%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,851 samples, 6.32%)</title><rect x="40.4172%" y="293" width="6.3202%" height="15" fill="rgb(205,136,37)" fg:x="11837" fg:w="1851"/><text x="40.6672%" y="303.50">&lt;core::i..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,413 samples, 4.82%)</title><rect x="41.9128%" y="277" width="4.8247%" height="15" fill="rgb(250,205,27)" fg:x="12275" fg:w="1413"/><text x="42.1628%" y="287.50">core::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,413 samples, 4.82%)</title><rect x="41.9128%" y="261" width="4.8247%" height="15" fill="rgb(210,80,43)" fg:x="12275" fg:w="1413"/><text x="42.1628%" y="271.50">core::..</text></g><g><title>dryadsynth_bv::rule::binary::AddRule::derive_from::{{closure}} (1,366 samples, 4.66%)</title><rect x="42.0733%" y="245" width="4.6642%" height="15" fill="rgb(247,160,36)" fg:x="12322" fg:w="1366"/><text x="42.3233%" y="255.50">dryad..</text></g><g><title>core::num::&lt;impl u64&gt;::unchecked_sub (277 samples, 0.95%)</title><rect x="45.7916%" y="229" width="0.9458%" height="15" fill="rgb(234,13,49)" fg:x="13411" fg:w="277"/><text x="46.0416%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (7 samples, 0.02%)</title><rect x="46.7614%" y="197" width="0.0239%" height="15" fill="rgb(234,122,0)" fg:x="13695" fg:w="7"/><text x="47.0114%" y="207.50"></text></g><g><title>bumpalo::Bump::alloc_layout (17 samples, 0.06%)</title><rect x="46.7511%" y="245" width="0.0580%" height="15" fill="rgb(207,146,38)" fg:x="13692" fg:w="17"/><text x="47.0011%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (17 samples, 0.06%)</title><rect x="46.7511%" y="229" width="0.0580%" height="15" fill="rgb(207,177,25)" fg:x="13692" fg:w="17"/><text x="47.0011%" y="239.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (17 samples, 0.06%)</title><rect x="46.7511%" y="213" width="0.0580%" height="15" fill="rgb(211,178,42)" fg:x="13692" fg:w="17"/><text x="47.0011%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_sub (5 samples, 0.02%)</title><rect x="46.7921%" y="197" width="0.0171%" height="15" fill="rgb(230,69,54)" fg:x="13704" fg:w="5"/><text x="47.0421%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_offset (5 samples, 0.02%)</title><rect x="46.7921%" y="181" width="0.0171%" height="15" fill="rgb(214,135,41)" fg:x="13704" fg:w="5"/><text x="47.0421%" y="191.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.02%)</title><rect x="46.8092%" y="245" width="0.0171%" height="15" fill="rgb(237,67,25)" fg:x="13709" fg:w="5"/><text x="47.0592%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 0.02%)</title><rect x="46.8092%" y="229" width="0.0171%" height="15" fill="rgb(222,189,50)" fg:x="13709" fg:w="5"/><text x="47.0592%" y="239.50"></text></g><g><title>core::ptr::write (250 samples, 0.85%)</title><rect x="46.8262%" y="245" width="0.8536%" height="15" fill="rgb(245,148,34)" fg:x="13714" fg:w="250"/><text x="47.0762%" y="255.50"></text></g><g><title>__memset_avx2_unaligned_erms (245 samples, 0.84%)</title><rect x="46.8433%" y="229" width="0.8365%" height="15" fill="rgb(222,29,6)" fg:x="13719" fg:w="245"/><text x="47.0933%" y="239.50"></text></g><g><title>dryadsynth_bv::bv::Context::collect (2,205 samples, 7.53%)</title><rect x="40.1612%" y="309" width="7.5289%" height="15" fill="rgb(221,189,43)" fg:x="11762" fg:w="2205"/><text x="40.4112%" y="319.50">dryadsynth..</text></g><g><title>dryadsynth_bv::bv::Context::alloc_zeros (279 samples, 0.95%)</title><rect x="46.7375%" y="293" width="0.9526%" height="15" fill="rgb(207,36,27)" fg:x="13688" fg:w="279"/><text x="46.9875%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_default (275 samples, 0.94%)</title><rect x="46.7511%" y="277" width="0.9390%" height="15" fill="rgb(217,90,24)" fg:x="13692" fg:w="275"/><text x="47.0011%" y="287.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (275 samples, 0.94%)</title><rect x="46.7511%" y="261" width="0.9390%" height="15" fill="rgb(224,66,35)" fg:x="13692" fg:w="275"/><text x="47.0011%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (3 samples, 0.01%)</title><rect x="47.6799%" y="245" width="0.0102%" height="15" fill="rgb(221,13,50)" fg:x="13964" fg:w="3"/><text x="47.9299%" y="255.50"></text></g><g><title>dryadsynth_bv::rule::binary::AddRule::derive_from (2,690 samples, 9.18%)</title><rect x="38.6417%" y="325" width="9.1850%" height="15" fill="rgb(236,68,49)" fg:x="11317" fg:w="2690"/><text x="38.8917%" y="335.50">dryadsynth_bv..</text></g><g><title>dryadsynth_bv::rule::binary::AddRule::derive_from (40 samples, 0.14%)</title><rect x="47.6901%" y="309" width="0.1366%" height="15" fill="rgb(229,146,28)" fg:x="13967" fg:w="40"/><text x="47.9401%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.12%)</title><rect x="48.0315%" y="245" width="0.1161%" height="15" fill="rgb(225,31,38)" fg:x="14067" fg:w="34"/><text x="48.2815%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (35 samples, 0.12%)</title><rect x="48.0315%" y="261" width="0.1195%" height="15" fill="rgb(250,208,3)" fg:x="14067" fg:w="35"/><text x="48.2815%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (5 samples, 0.02%)</title><rect x="48.1511%" y="261" width="0.0171%" height="15" fill="rgb(246,54,23)" fg:x="14102" fg:w="5"/><text x="48.4011%" y="271.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (5 samples, 0.02%)</title><rect x="48.1511%" y="245" width="0.0171%" height="15" fill="rgb(243,76,11)" fg:x="14102" fg:w="5"/><text x="48.4011%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (73 samples, 0.25%)</title><rect x="48.1681%" y="261" width="0.2493%" height="15" fill="rgb(245,21,50)" fg:x="14107" fg:w="73"/><text x="48.4181%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::le (73 samples, 0.25%)</title><rect x="48.1681%" y="245" width="0.2493%" height="15" fill="rgb(228,9,43)" fg:x="14107" fg:w="73"/><text x="48.4181%" y="255.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::PartialOrd&gt;::partial_cmp (73 samples, 0.25%)</title><rect x="48.1681%" y="229" width="0.2493%" height="15" fill="rgb(208,100,47)" fg:x="14107" fg:w="73"/><text x="48.4181%" y="239.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::Ord&gt;::cmp (73 samples, 0.25%)</title><rect x="48.1681%" y="213" width="0.2493%" height="15" fill="rgb(232,26,8)" fg:x="14107" fg:w="73"/><text x="48.4181%" y="223.50"></text></g><g><title>dryadsynth_bv::algo::State::evaluate (72 samples, 0.25%)</title><rect x="48.1715%" y="197" width="0.2458%" height="15" fill="rgb(216,166,38)" fg:x="14108" fg:w="72"/><text x="48.4215%" y="207.50"></text></g><g><title>core::cmp::min (3 samples, 0.01%)</title><rect x="48.4071%" y="181" width="0.0102%" height="15" fill="rgb(251,202,51)" fg:x="14177" fg:w="3"/><text x="48.6571%" y="191.50"></text></g><g><title>dryadsynth_bv::rule::binary::AndRule::derive_from (3 samples, 0.01%)</title><rect x="48.4071%" y="165" width="0.0102%" height="15" fill="rgb(254,216,34)" fg:x="14177" fg:w="3"/><text x="48.6571%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.04%)</title><rect x="48.4174%" y="229" width="0.0376%" height="15" fill="rgb(251,32,27)" fg:x="14180" fg:w="11"/><text x="48.6674%" y="239.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (136 samples, 0.46%)</title><rect x="47.9974%" y="277" width="0.4644%" height="15" fill="rgb(208,127,28)" fg:x="14057" fg:w="136"/><text x="48.2474%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;dryadsynth_bv::algo::State&gt;&gt; (13 samples, 0.04%)</title><rect x="48.4174%" y="261" width="0.0444%" height="15" fill="rgb(224,137,22)" fg:x="14180" fg:w="13"/><text x="48.6674%" y="271.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.04%)</title><rect x="48.4174%" y="245" width="0.0444%" height="15" fill="rgb(254,70,32)" fg:x="14180" fg:w="13"/><text x="48.6674%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (33 samples, 0.11%)</title><rect x="48.4618%" y="277" width="0.1127%" height="15" fill="rgb(229,75,37)" fg:x="14193" fg:w="33"/><text x="48.7118%" y="287.50"></text></g><g><title>core::ptr::write (29 samples, 0.10%)</title><rect x="48.4754%" y="261" width="0.0990%" height="15" fill="rgb(252,64,23)" fg:x="14197" fg:w="29"/><text x="48.7254%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (174 samples, 0.59%)</title><rect x="47.9974%" y="293" width="0.5941%" height="15" fill="rgb(232,162,48)" fg:x="14057" fg:w="174"/><text x="48.2474%" y="303.50"></text></g><g><title>dryadsynth_bv::rule::binary::AndRule::derive_from (5 samples, 0.02%)</title><rect x="48.5745%" y="277" width="0.0171%" height="15" fill="rgb(246,160,12)" fg:x="14226" fg:w="5"/><text x="48.8245%" y="287.50"></text></g><g><title>dryadsynth_bv::algo::Algo::push (176 samples, 0.60%)</title><rect x="47.9974%" y="309" width="0.6009%" height="15" fill="rgb(247,166,0)" fg:x="14057" fg:w="176"/><text x="48.2474%" y="319.50"></text></g><g><title>dryadsynth_bv::algo::State::derive (61 samples, 0.21%)</title><rect x="48.5984%" y="309" width="0.2083%" height="15" fill="rgb(249,219,21)" fg:x="14233" fg:w="61"/><text x="48.8484%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.02%)</title><rect x="48.8408%" y="213" width="0.0171%" height="15" fill="rgb(205,209,3)" fg:x="14304" fg:w="5"/><text x="49.0908%" y="223.50"></text></g><g><title>bumpalo::Bump::alloc_layout (11 samples, 0.04%)</title><rect x="48.8305%" y="261" width="0.0376%" height="15" fill="rgb(243,44,1)" fg:x="14301" fg:w="11"/><text x="49.0805%" y="271.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (11 samples, 0.04%)</title><rect x="48.8305%" y="245" width="0.0376%" height="15" fill="rgb(206,159,16)" fg:x="14301" fg:w="11"/><text x="49.0805%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (11 samples, 0.04%)</title><rect x="48.8305%" y="229" width="0.0376%" height="15" fill="rgb(244,77,30)" fg:x="14301" fg:w="11"/><text x="49.0805%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_sub (3 samples, 0.01%)</title><rect x="48.8579%" y="213" width="0.0102%" height="15" fill="rgb(218,69,12)" fg:x="14309" fg:w="3"/><text x="49.1079%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_offset (3 samples, 0.01%)</title><rect x="48.8579%" y="197" width="0.0102%" height="15" fill="rgb(212,87,7)" fg:x="14309" fg:w="3"/><text x="49.1079%" y="207.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc (94 samples, 0.32%)</title><rect x="48.8066%" y="309" width="0.3210%" height="15" fill="rgb(245,114,25)" fg:x="14294" fg:w="94"/><text x="49.0566%" y="319.50"></text></g><g><title>bumpalo::Bump::alloc (87 samples, 0.30%)</title><rect x="48.8305%" y="293" width="0.2971%" height="15" fill="rgb(210,61,42)" fg:x="14301" fg:w="87"/><text x="49.0805%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_with (87 samples, 0.30%)</title><rect x="48.8305%" y="277" width="0.2971%" height="15" fill="rgb(211,52,33)" fg:x="14301" fg:w="87"/><text x="49.0805%" y="287.50"></text></g><g><title>bumpalo::Bump::alloc_with::inner_writer (76 samples, 0.26%)</title><rect x="48.8681%" y="261" width="0.2595%" height="15" fill="rgb(234,58,33)" fg:x="14312" fg:w="76"/><text x="49.1181%" y="271.50"></text></g><g><title>core::ptr::write (76 samples, 0.26%)</title><rect x="48.8681%" y="245" width="0.2595%" height="15" fill="rgb(220,115,36)" fg:x="14312" fg:w="76"/><text x="49.1181%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (328 samples, 1.12%)</title><rect x="49.2198%" y="213" width="1.1200%" height="15" fill="rgb(243,153,54)" fg:x="14415" fg:w="328"/><text x="49.4698%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (328 samples, 1.12%)</title><rect x="49.2198%" y="197" width="1.1200%" height="15" fill="rgb(251,47,18)" fg:x="14415" fg:w="328"/><text x="49.4698%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (328 samples, 1.12%)</title><rect x="49.2198%" y="181" width="1.1200%" height="15" fill="rgb(242,102,42)" fg:x="14415" fg:w="328"/><text x="49.4698%" y="191.50"></text></g><g><title>dryadsynth_bv::bv::Hint::zip::{{closure}} (309 samples, 1.06%)</title><rect x="49.2847%" y="165" width="1.0551%" height="15" fill="rgb(234,31,38)" fg:x="14434" fg:w="309"/><text x="49.5347%" y="175.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Bv as core::ops::index::Index&lt;usize&gt;&gt;::index (61 samples, 0.21%)</title><rect x="50.1315%" y="149" width="0.2083%" height="15" fill="rgb(221,117,51)" fg:x="14682" fg:w="61"/><text x="50.3815%" y="159.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::max (68 samples, 0.23%)</title><rect x="50.3739%" y="165" width="0.2322%" height="15" fill="rgb(212,20,18)" fg:x="14753" fg:w="68"/><text x="50.6239%" y="175.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::min (11 samples, 0.04%)</title><rect x="52.0709%" y="149" width="0.0376%" height="15" fill="rgb(245,133,36)" fg:x="15250" fg:w="11"/><text x="52.3209%" y="159.50"></text></g><g><title>dryadsynth_bv::rule::binary::AndRule::and_weight (1,044 samples, 3.56%)</title><rect x="50.6061%" y="165" width="3.5647%" height="15" fill="rgb(212,6,19)" fg:x="14821" fg:w="1044"/><text x="50.8561%" y="175.50">drya..</text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (604 samples, 2.06%)</title><rect x="52.1084%" y="149" width="2.0623%" height="15" fill="rgb(218,1,36)" fg:x="15261" fg:w="604"/><text x="52.3584%" y="159.50">c..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,884 samples, 6.43%)</title><rect x="49.2130%" y="261" width="6.4329%" height="15" fill="rgb(246,84,54)" fg:x="14413" fg:w="1884"/><text x="49.4630%" y="271.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (1,884 samples, 6.43%)</title><rect x="49.2130%" y="245" width="6.4329%" height="15" fill="rgb(242,110,6)" fg:x="14413" fg:w="1884"/><text x="49.4630%" y="255.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,882 samples, 6.43%)</title><rect x="49.2198%" y="229" width="6.4261%" height="15" fill="rgb(214,47,5)" fg:x="14415" fg:w="1882"/><text x="49.4698%" y="239.50">&lt;core::i..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,554 samples, 5.31%)</title><rect x="50.3397%" y="213" width="5.3061%" height="15" fill="rgb(218,159,25)" fg:x="14743" fg:w="1554"/><text x="50.5897%" y="223.50">core::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,554 samples, 5.31%)</title><rect x="50.3397%" y="197" width="5.3061%" height="15" fill="rgb(215,211,28)" fg:x="14743" fg:w="1554"/><text x="50.5897%" y="207.50">core::..</text></g><g><title>dryadsynth_bv::rule::binary::AndRule::derive_from::{{closure}} (1,554 samples, 5.31%)</title><rect x="50.3397%" y="181" width="5.3061%" height="15" fill="rgb(238,59,32)" fg:x="14743" fg:w="1554"/><text x="50.5897%" y="191.50">dryads..</text></g><g><title>dryadsynth_bv::rule::binary::AndRule::derive_from (432 samples, 1.48%)</title><rect x="54.1708%" y="165" width="1.4751%" height="15" fill="rgb(226,82,3)" fg:x="15865" fg:w="432"/><text x="54.4208%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,916 samples, 6.54%)</title><rect x="49.2130%" y="277" width="6.5422%" height="15" fill="rgb(240,164,32)" fg:x="14413" fg:w="1916"/><text x="49.4630%" y="287.50">&lt;core::it..</text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (32 samples, 0.11%)</title><rect x="55.6458%" y="261" width="0.1093%" height="15" fill="rgb(232,46,7)" fg:x="16297" fg:w="32"/><text x="55.8958%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,935 samples, 6.61%)</title><rect x="49.2130%" y="293" width="6.6070%" height="15" fill="rgb(229,129,53)" fg:x="14413" fg:w="1935"/><text x="49.4630%" y="303.50">&lt;core::it..</text></g><g><title>dryadsynth_bv::rule::binary::AndRule::derive_from (19 samples, 0.06%)</title><rect x="55.7551%" y="277" width="0.0649%" height="15" fill="rgb(234,188,29)" fg:x="16329" fg:w="19"/><text x="56.0051%" y="287.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::ptr (12 samples, 0.04%)</title><rect x="55.9293%" y="277" width="0.0410%" height="15" fill="rgb(246,141,4)" fg:x="16380" fg:w="12"/><text x="56.1793%" y="287.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve (16 samples, 0.05%)</title><rect x="56.0078%" y="245" width="0.0546%" height="15" fill="rgb(229,23,39)" fg:x="16403" fg:w="16"/><text x="56.2578%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (8 samples, 0.03%)</title><rect x="56.1170%" y="181" width="0.0273%" height="15" fill="rgb(206,12,3)" fg:x="16435" fg:w="8"/><text x="56.3670%" y="191.50"></text></g><g><title>&lt;&amp;bumpalo::Bump as bumpalo::alloc::Alloc&gt;::alloc (20 samples, 0.07%)</title><rect x="56.0829%" y="229" width="0.0683%" height="15" fill="rgb(252,226,20)" fg:x="16425" fg:w="20"/><text x="56.3329%" y="239.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (11 samples, 0.04%)</title><rect x="56.1136%" y="213" width="0.0376%" height="15" fill="rgb(216,123,35)" fg:x="16434" fg:w="11"/><text x="56.3636%" y="223.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (11 samples, 0.04%)</title><rect x="56.1136%" y="197" width="0.0376%" height="15" fill="rgb(212,68,40)" fg:x="16434" fg:w="11"/><text x="56.3636%" y="207.50"></text></g><g><title>bumpalo::Bump::is_last_allocation (8 samples, 0.03%)</title><rect x="56.1649%" y="197" width="0.0273%" height="15" fill="rgb(254,125,32)" fg:x="16449" fg:w="8"/><text x="56.4149%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (7 samples, 0.02%)</title><rect x="56.1683%" y="181" width="0.0239%" height="15" fill="rgb(253,97,22)" fg:x="16450" fg:w="7"/><text x="56.4183%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (6 samples, 0.02%)</title><rect x="56.1990%" y="181" width="0.0205%" height="15" fill="rgb(241,101,14)" fg:x="16459" fg:w="6"/><text x="56.4490%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (6 samples, 0.02%)</title><rect x="56.1990%" y="165" width="0.0205%" height="15" fill="rgb(238,103,29)" fg:x="16459" fg:w="6"/><text x="56.4490%" y="175.50"></text></g><g><title>core::mem::replace (6 samples, 0.02%)</title><rect x="56.1990%" y="149" width="0.0205%" height="15" fill="rgb(233,195,47)" fg:x="16459" fg:w="6"/><text x="56.4490%" y="159.50"></text></g><g><title>core::ptr::write (6 samples, 0.02%)</title><rect x="56.1990%" y="133" width="0.0205%" height="15" fill="rgb(246,218,30)" fg:x="16459" fg:w="6"/><text x="56.4490%" y="143.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (13 samples, 0.04%)</title><rect x="56.1922%" y="197" width="0.0444%" height="15" fill="rgb(219,145,47)" fg:x="16457" fg:w="13"/><text x="56.4422%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_sub (5 samples, 0.02%)</title><rect x="56.2195%" y="181" width="0.0171%" height="15" fill="rgb(243,12,26)" fg:x="16465" fg:w="5"/><text x="56.4695%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_offset (5 samples, 0.02%)</title><rect x="56.2195%" y="165" width="0.0171%" height="15" fill="rgb(214,87,16)" fg:x="16465" fg:w="5"/><text x="56.4695%" y="175.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve (8 samples, 0.03%)</title><rect x="56.2366%" y="197" width="0.0273%" height="15" fill="rgb(208,99,42)" fg:x="16470" fg:w="8"/><text x="56.4866%" y="207.50"></text></g><g><title>&lt;&amp;bumpalo::Bump as bumpalo::alloc::Alloc&gt;::realloc (71 samples, 0.24%)</title><rect x="56.1512%" y="229" width="0.2424%" height="15" fill="rgb(253,99,2)" fg:x="16445" fg:w="71"/><text x="56.4012%" y="239.50"></text></g><g><title>bumpalo::Bump::grow (69 samples, 0.24%)</title><rect x="56.1580%" y="213" width="0.2356%" height="15" fill="rgb(220,168,23)" fg:x="16447" fg:w="69"/><text x="56.4080%" y="223.50"></text></g><g><title>core::intrinsics::copy (38 samples, 0.13%)</title><rect x="56.2639%" y="197" width="0.1298%" height="15" fill="rgb(242,38,24)" fg:x="16478" fg:w="38"/><text x="56.5139%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (36 samples, 0.12%)</title><rect x="56.2707%" y="181" width="0.1229%" height="15" fill="rgb(225,182,9)" fg:x="16480" fg:w="36"/><text x="56.5207%" y="191.50"></text></g><g><title>core::cmp::max (3 samples, 0.01%)</title><rect x="56.4175%" y="213" width="0.0102%" height="15" fill="rgb(243,178,37)" fg:x="16523" fg:w="3"/><text x="56.6675%" y="223.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve (3 samples, 0.01%)</title><rect x="56.4175%" y="197" width="0.0102%" height="15" fill="rgb(232,139,19)" fg:x="16523" fg:w="3"/><text x="56.6675%" y="207.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::amortized_new_size (12 samples, 0.04%)</title><rect x="56.3936%" y="229" width="0.0410%" height="15" fill="rgb(225,201,24)" fg:x="16516" fg:w="12"/><text x="56.6436%" y="239.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::current_layout (14 samples, 0.05%)</title><rect x="56.4346%" y="229" width="0.0478%" height="15" fill="rgb(221,47,46)" fg:x="16528" fg:w="14"/><text x="56.6846%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array (17 samples, 0.06%)</title><rect x="56.4824%" y="229" width="0.0580%" height="15" fill="rgb(249,23,13)" fg:x="16542" fg:w="17"/><text x="56.7324%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (17 samples, 0.06%)</title><rect x="56.4824%" y="213" width="0.0580%" height="15" fill="rgb(219,9,5)" fg:x="16542" fg:w="17"/><text x="56.7324%" y="223.50"></text></g><g><title>bumpalo::collections::vec::Vec&lt;T&gt;::reserve (178 samples, 0.61%)</title><rect x="55.9702%" y="277" width="0.6078%" height="15" fill="rgb(254,171,16)" fg:x="16392" fg:w="178"/><text x="56.2202%" y="287.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve (167 samples, 0.57%)</title><rect x="56.0078%" y="261" width="0.5702%" height="15" fill="rgb(230,171,20)" fg:x="16403" fg:w="167"/><text x="56.2578%" y="271.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve_internal (151 samples, 0.52%)</title><rect x="56.0624%" y="245" width="0.5156%" height="15" fill="rgb(210,71,41)" fg:x="16419" fg:w="151"/><text x="56.3124%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (11 samples, 0.04%)</title><rect x="56.5404%" y="229" width="0.0376%" height="15" fill="rgb(206,173,20)" fg:x="16559" fg:w="11"/><text x="56.7904%" y="239.50"></text></g><g><title>bumpalo::collections::vec::Vec&lt;T&gt;::push (246 samples, 0.84%)</title><rect x="55.8200%" y="293" width="0.8400%" height="15" fill="rgb(233,88,34)" fg:x="16348" fg:w="246"/><text x="56.0700%" y="303.50"></text></g><g><title>core::ptr::write (24 samples, 0.08%)</title><rect x="56.5780%" y="277" width="0.0819%" height="15" fill="rgb(223,209,46)" fg:x="16570" fg:w="24"/><text x="56.8280%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (7 samples, 0.02%)</title><rect x="56.6736%" y="197" width="0.0239%" height="15" fill="rgb(250,43,18)" fg:x="16598" fg:w="7"/><text x="56.9236%" y="207.50"></text></g><g><title>core::ptr::write (3 samples, 0.01%)</title><rect x="56.6975%" y="149" width="0.0102%" height="15" fill="rgb(208,13,10)" fg:x="16605" fg:w="3"/><text x="56.9475%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (4 samples, 0.01%)</title><rect x="56.6975%" y="197" width="0.0137%" height="15" fill="rgb(212,200,36)" fg:x="16605" fg:w="4"/><text x="56.9475%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (4 samples, 0.01%)</title><rect x="56.6975%" y="181" width="0.0137%" height="15" fill="rgb(225,90,30)" fg:x="16605" fg:w="4"/><text x="56.9475%" y="191.50"></text></g><g><title>core::mem::replace (4 samples, 0.01%)</title><rect x="56.6975%" y="165" width="0.0137%" height="15" fill="rgb(236,182,39)" fg:x="16605" fg:w="4"/><text x="56.9475%" y="175.50"></text></g><g><title>bumpalo::Bump::alloc_layout (13 samples, 0.04%)</title><rect x="56.6702%" y="245" width="0.0444%" height="15" fill="rgb(212,144,35)" fg:x="16597" fg:w="13"/><text x="56.9202%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (13 samples, 0.04%)</title><rect x="56.6702%" y="229" width="0.0444%" height="15" fill="rgb(228,63,44)" fg:x="16597" fg:w="13"/><text x="56.9202%" y="239.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (13 samples, 0.04%)</title><rect x="56.6702%" y="213" width="0.0444%" height="15" fill="rgb(228,109,6)" fg:x="16597" fg:w="13"/><text x="56.9202%" y="223.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (142 samples, 0.48%)</title><rect x="56.6702%" y="261" width="0.4849%" height="15" fill="rgb(238,117,24)" fg:x="16597" fg:w="142"/><text x="56.9202%" y="271.50"></text></g><g><title>core::ptr::write (127 samples, 0.43%)</title><rect x="56.7214%" y="245" width="0.4336%" height="15" fill="rgb(242,26,26)" fg:x="16612" fg:w="127"/><text x="56.9714%" y="255.50"></text></g><g><title>__memset_avx2_unaligned_erms (125 samples, 0.43%)</title><rect x="56.7282%" y="229" width="0.4268%" height="15" fill="rgb(221,92,48)" fg:x="16614" fg:w="125"/><text x="56.9782%" y="239.50"></text></g><g><title>dryadsynth_bv::bv::Context::collect_with_indices (2,353 samples, 8.03%)</title><rect x="49.1276%" y="309" width="8.0343%" height="15" fill="rgb(209,209,32)" fg:x="14388" fg:w="2353"/><text x="49.3776%" y="319.50">dryadsynth_..</text></g><g><title>dryadsynth_bv::bv::Context::alloc_zeros (147 samples, 0.50%)</title><rect x="56.6600%" y="293" width="0.5019%" height="15" fill="rgb(221,70,22)" fg:x="16594" fg:w="147"/><text x="56.9100%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_default (144 samples, 0.49%)</title><rect x="56.6702%" y="277" width="0.4917%" height="15" fill="rgb(248,145,5)" fg:x="16597" fg:w="144"/><text x="56.9202%" y="287.50"></text></g><g><title>dryadsynth_bv::rule::binary::AndRule::derive_from (2,814 samples, 9.61%)</title><rect x="47.8267%" y="325" width="9.6084%" height="15" fill="rgb(226,116,26)" fg:x="14007" fg:w="2814"/><text x="48.0767%" y="335.50">dryadsynth_bv:..</text></g><g><title>dryadsynth_bv::rule::binary::AndRule::derive_from (80 samples, 0.27%)</title><rect x="57.1619%" y="309" width="0.2732%" height="15" fill="rgb(244,5,17)" fg:x="16741" fg:w="80"/><text x="57.4119%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.08%)</title><rect x="57.6263%" y="245" width="0.0785%" height="15" fill="rgb(252,159,33)" fg:x="16877" fg:w="23"/><text x="57.8763%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (24 samples, 0.08%)</title><rect x="57.6263%" y="261" width="0.0819%" height="15" fill="rgb(206,71,0)" fg:x="16877" fg:w="24"/><text x="57.8763%" y="271.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (11 samples, 0.04%)</title><rect x="57.7082%" y="245" width="0.0376%" height="15" fill="rgb(233,118,54)" fg:x="16901" fg:w="11"/><text x="57.9582%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (12 samples, 0.04%)</title><rect x="57.7082%" y="261" width="0.0410%" height="15" fill="rgb(234,83,48)" fg:x="16901" fg:w="12"/><text x="57.9582%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (50 samples, 0.17%)</title><rect x="57.7492%" y="261" width="0.1707%" height="15" fill="rgb(228,3,54)" fg:x="16913" fg:w="50"/><text x="57.9992%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::le (50 samples, 0.17%)</title><rect x="57.7492%" y="245" width="0.1707%" height="15" fill="rgb(226,155,13)" fg:x="16913" fg:w="50"/><text x="57.9992%" y="255.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::PartialOrd&gt;::partial_cmp (50 samples, 0.17%)</title><rect x="57.7492%" y="229" width="0.1707%" height="15" fill="rgb(241,28,37)" fg:x="16913" fg:w="50"/><text x="57.9992%" y="239.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::Ord&gt;::cmp (50 samples, 0.17%)</title><rect x="57.7492%" y="213" width="0.1707%" height="15" fill="rgb(233,93,10)" fg:x="16913" fg:w="50"/><text x="57.9992%" y="223.50"></text></g><g><title>dryadsynth_bv::algo::State::evaluate (50 samples, 0.17%)</title><rect x="57.7492%" y="197" width="0.1707%" height="15" fill="rgb(225,113,19)" fg:x="16913" fg:w="50"/><text x="57.9992%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.04%)</title><rect x="57.9199%" y="229" width="0.0376%" height="15" fill="rgb(241,2,18)" fg:x="16963" fg:w="11"/><text x="58.1699%" y="239.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (112 samples, 0.38%)</title><rect x="57.5853%" y="277" width="0.3824%" height="15" fill="rgb(228,207,21)" fg:x="16865" fg:w="112"/><text x="57.8353%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;dryadsynth_bv::algo::State&gt;&gt; (14 samples, 0.05%)</title><rect x="57.9199%" y="261" width="0.0478%" height="15" fill="rgb(213,211,35)" fg:x="16963" fg:w="14"/><text x="58.1699%" y="271.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.05%)</title><rect x="57.9199%" y="245" width="0.0478%" height="15" fill="rgb(209,83,10)" fg:x="16963" fg:w="14"/><text x="58.1699%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (3 samples, 0.01%)</title><rect x="57.9575%" y="229" width="0.0102%" height="15" fill="rgb(209,164,1)" fg:x="16974" fg:w="3"/><text x="58.2075%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (3 samples, 0.01%)</title><rect x="57.9575%" y="213" width="0.0102%" height="15" fill="rgb(213,184,43)" fg:x="16974" fg:w="3"/><text x="58.2075%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.01%)</title><rect x="57.9575%" y="197" width="0.0102%" height="15" fill="rgb(231,61,34)" fg:x="16974" fg:w="3"/><text x="58.2075%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.01%)</title><rect x="57.9575%" y="181" width="0.0102%" height="15" fill="rgb(235,75,3)" fg:x="16974" fg:w="3"/><text x="58.2075%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (29 samples, 0.10%)</title><rect x="57.9677%" y="277" width="0.0990%" height="15" fill="rgb(220,106,47)" fg:x="16977" fg:w="29"/><text x="58.2177%" y="287.50"></text></g><g><title>core::ptr::write (26 samples, 0.09%)</title><rect x="57.9779%" y="261" width="0.0888%" height="15" fill="rgb(210,196,33)" fg:x="16980" fg:w="26"/><text x="58.2279%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (145 samples, 0.50%)</title><rect x="57.5853%" y="293" width="0.4951%" height="15" fill="rgb(229,154,42)" fg:x="16865" fg:w="145"/><text x="57.8353%" y="303.50"></text></g><g><title>dryadsynth_bv::rule::binary::OrRule::derive_from (4 samples, 0.01%)</title><rect x="58.0667%" y="277" width="0.0137%" height="15" fill="rgb(228,114,26)" fg:x="17006" fg:w="4"/><text x="58.3167%" y="287.50"></text></g><g><title>dryadsynth_bv::algo::Algo::push (148 samples, 0.51%)</title><rect x="57.5853%" y="309" width="0.5053%" height="15" fill="rgb(208,144,1)" fg:x="16865" fg:w="148"/><text x="57.8353%" y="319.50"></text></g><g><title>dryadsynth_bv::rule::binary::OrRule::derive_from (3 samples, 0.01%)</title><rect x="58.0804%" y="293" width="0.0102%" height="15" fill="rgb(239,112,37)" fg:x="17010" fg:w="3"/><text x="58.3304%" y="303.50"></text></g><g><title>dryadsynth_bv::algo::State::derive (72 samples, 0.25%)</title><rect x="58.0906%" y="309" width="0.2458%" height="15" fill="rgb(210,96,50)" fg:x="17013" fg:w="72"/><text x="58.3406%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (4 samples, 0.01%)</title><rect x="58.3638%" y="213" width="0.0137%" height="15" fill="rgb(222,178,2)" fg:x="17093" fg:w="4"/><text x="58.6138%" y="223.50"></text></g><g><title>bumpalo::Bump::alloc_layout (10 samples, 0.03%)</title><rect x="58.3501%" y="261" width="0.0341%" height="15" fill="rgb(226,74,18)" fg:x="17089" fg:w="10"/><text x="58.6001%" y="271.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (10 samples, 0.03%)</title><rect x="58.3501%" y="245" width="0.0341%" height="15" fill="rgb(225,67,54)" fg:x="17089" fg:w="10"/><text x="58.6001%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (10 samples, 0.03%)</title><rect x="58.3501%" y="229" width="0.0341%" height="15" fill="rgb(251,92,32)" fg:x="17089" fg:w="10"/><text x="58.6001%" y="239.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc (76 samples, 0.26%)</title><rect x="58.3365%" y="309" width="0.2595%" height="15" fill="rgb(228,149,22)" fg:x="17085" fg:w="76"/><text x="58.5865%" y="319.50"></text></g><g><title>bumpalo::Bump::alloc (72 samples, 0.25%)</title><rect x="58.3501%" y="293" width="0.2458%" height="15" fill="rgb(243,54,13)" fg:x="17089" fg:w="72"/><text x="58.6001%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_with (72 samples, 0.25%)</title><rect x="58.3501%" y="277" width="0.2458%" height="15" fill="rgb(243,180,28)" fg:x="17089" fg:w="72"/><text x="58.6001%" y="287.50"></text></g><g><title>bumpalo::Bump::alloc_with::inner_writer (62 samples, 0.21%)</title><rect x="58.3843%" y="261" width="0.2117%" height="15" fill="rgb(208,167,24)" fg:x="17099" fg:w="62"/><text x="58.6343%" y="271.50"></text></g><g><title>core::ptr::write (62 samples, 0.21%)</title><rect x="58.3843%" y="245" width="0.2117%" height="15" fill="rgb(245,73,45)" fg:x="17099" fg:w="62"/><text x="58.6343%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (243 samples, 0.83%)</title><rect x="58.6404%" y="213" width="0.8297%" height="15" fill="rgb(237,203,48)" fg:x="17174" fg:w="243"/><text x="58.8904%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (243 samples, 0.83%)</title><rect x="58.6404%" y="197" width="0.8297%" height="15" fill="rgb(211,197,16)" fg:x="17174" fg:w="243"/><text x="58.8904%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (243 samples, 0.83%)</title><rect x="58.6404%" y="181" width="0.8297%" height="15" fill="rgb(243,99,51)" fg:x="17174" fg:w="243"/><text x="58.8904%" y="191.50"></text></g><g><title>dryadsynth_bv::bv::Hint::zip::{{closure}} (241 samples, 0.82%)</title><rect x="58.6472%" y="165" width="0.8229%" height="15" fill="rgb(215,123,29)" fg:x="17176" fg:w="241"/><text x="58.8972%" y="175.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Bv as core::ops::index::Index&lt;usize&gt;&gt;::index (70 samples, 0.24%)</title><rect x="59.2311%" y="149" width="0.2390%" height="15" fill="rgb(239,186,37)" fg:x="17347" fg:w="70"/><text x="59.4811%" y="159.50"></text></g><g><title>dryadsynth_bv::rule::binary::OrRule::derive_from (10 samples, 0.03%)</title><rect x="59.4701%" y="181" width="0.0341%" height="15" fill="rgb(252,136,39)" fg:x="17417" fg:w="10"/><text x="59.7201%" y="191.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::max (13 samples, 0.04%)</title><rect x="59.5657%" y="165" width="0.0444%" height="15" fill="rgb(223,213,32)" fg:x="17445" fg:w="13"/><text x="59.8157%" y="175.50"></text></g><g><title>dryadsynth_bv::rule::binary::OrRule::derive_from (426 samples, 1.45%)</title><rect x="59.6101%" y="165" width="1.4546%" height="15" fill="rgb(233,115,5)" fg:x="17458" fg:w="426"/><text x="59.8601%" y="175.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::min (7 samples, 0.02%)</title><rect x="62.0651%" y="149" width="0.0239%" height="15" fill="rgb(207,226,44)" fg:x="18177" fg:w="7"/><text x="62.3151%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,554 samples, 5.31%)</title><rect x="58.6335%" y="261" width="5.3061%" height="15" fill="rgb(208,126,0)" fg:x="17172" fg:w="1554"/><text x="58.8835%" y="271.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (1,554 samples, 5.31%)</title><rect x="58.6335%" y="245" width="5.3061%" height="15" fill="rgb(244,66,21)" fg:x="17172" fg:w="1554"/><text x="58.8835%" y="255.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,552 samples, 5.30%)</title><rect x="58.6404%" y="229" width="5.2993%" height="15" fill="rgb(222,97,12)" fg:x="17174" fg:w="1552"/><text x="58.8904%" y="239.50">&lt;core:..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,309 samples, 4.47%)</title><rect x="59.4701%" y="213" width="4.4696%" height="15" fill="rgb(219,213,19)" fg:x="17417" fg:w="1309"/><text x="59.7201%" y="223.50">core:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,309 samples, 4.47%)</title><rect x="59.4701%" y="197" width="4.4696%" height="15" fill="rgb(252,169,30)" fg:x="17417" fg:w="1309"/><text x="59.7201%" y="207.50">core:..</text></g><g><title>dryadsynth_bv::rule::binary::OrRule::derive_from::{{closure}} (1,299 samples, 4.44%)</title><rect x="59.5042%" y="181" width="4.4354%" height="15" fill="rgb(206,32,51)" fg:x="17427" fg:w="1299"/><text x="59.7542%" y="191.50">dryad..</text></g><g><title>dryadsynth_bv::rule::binary::OrRule::or_weight (842 samples, 2.87%)</title><rect x="61.0646%" y="165" width="2.8750%" height="15" fill="rgb(250,172,42)" fg:x="17884" fg:w="842"/><text x="61.3146%" y="175.50">dr..</text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (542 samples, 1.85%)</title><rect x="62.0890%" y="149" width="1.8507%" height="15" fill="rgb(209,34,43)" fg:x="18184" fg:w="542"/><text x="62.3390%" y="159.50">c..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,594 samples, 5.44%)</title><rect x="58.6335%" y="277" width="5.4427%" height="15" fill="rgb(223,11,35)" fg:x="17172" fg:w="1594"/><text x="58.8835%" y="287.50">&lt;core::..</text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (40 samples, 0.14%)</title><rect x="63.9396%" y="261" width="0.1366%" height="15" fill="rgb(251,219,26)" fg:x="18726" fg:w="40"/><text x="64.1896%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,613 samples, 5.51%)</title><rect x="58.6335%" y="293" width="5.5076%" height="15" fill="rgb(231,119,3)" fg:x="17172" fg:w="1613"/><text x="58.8835%" y="303.50">&lt;core::..</text></g><g><title>dryadsynth_bv::rule::binary::OrRule::derive_from (19 samples, 0.06%)</title><rect x="64.0762%" y="277" width="0.0649%" height="15" fill="rgb(216,97,11)" fg:x="18766" fg:w="19"/><text x="64.3262%" y="287.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::ptr (4 samples, 0.01%)</title><rect x="64.1718%" y="277" width="0.0137%" height="15" fill="rgb(223,59,9)" fg:x="18794" fg:w="4"/><text x="64.4218%" y="287.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve (10 samples, 0.03%)</title><rect x="64.2128%" y="245" width="0.0341%" height="15" fill="rgb(233,93,31)" fg:x="18806" fg:w="10"/><text x="64.4628%" y="255.50"></text></g><g><title>&lt;&amp;bumpalo::Bump as bumpalo::alloc::Alloc&gt;::alloc (6 samples, 0.02%)</title><rect x="64.2606%" y="229" width="0.0205%" height="15" fill="rgb(239,81,33)" fg:x="18820" fg:w="6"/><text x="64.5106%" y="239.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (6 samples, 0.02%)</title><rect x="64.2606%" y="213" width="0.0205%" height="15" fill="rgb(213,120,34)" fg:x="18820" fg:w="6"/><text x="64.5106%" y="223.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (6 samples, 0.02%)</title><rect x="64.2606%" y="197" width="0.0205%" height="15" fill="rgb(243,49,53)" fg:x="18820" fg:w="6"/><text x="64.5106%" y="207.50"></text></g><g><title>bumpalo::Bump::is_last_allocation (6 samples, 0.02%)</title><rect x="64.3152%" y="197" width="0.0205%" height="15" fill="rgb(247,216,33)" fg:x="18836" fg:w="6"/><text x="64.5652%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (4 samples, 0.01%)</title><rect x="64.3221%" y="181" width="0.0137%" height="15" fill="rgb(226,26,14)" fg:x="18838" fg:w="4"/><text x="64.5721%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (5 samples, 0.02%)</title><rect x="64.3425%" y="181" width="0.0171%" height="15" fill="rgb(215,49,53)" fg:x="18844" fg:w="5"/><text x="64.5925%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (5 samples, 0.02%)</title><rect x="64.3425%" y="165" width="0.0171%" height="15" fill="rgb(245,162,40)" fg:x="18844" fg:w="5"/><text x="64.5925%" y="175.50"></text></g><g><title>core::mem::replace (5 samples, 0.02%)</title><rect x="64.3425%" y="149" width="0.0171%" height="15" fill="rgb(229,68,17)" fg:x="18844" fg:w="5"/><text x="64.5925%" y="159.50"></text></g><g><title>core::ptr::write (5 samples, 0.02%)</title><rect x="64.3425%" y="133" width="0.0171%" height="15" fill="rgb(213,182,10)" fg:x="18844" fg:w="5"/><text x="64.5925%" y="143.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (8 samples, 0.03%)</title><rect x="64.3357%" y="197" width="0.0273%" height="15" fill="rgb(245,125,30)" fg:x="18842" fg:w="8"/><text x="64.5857%" y="207.50"></text></g><g><title>&lt;&amp;bumpalo::Bump as bumpalo::alloc::Alloc&gt;::realloc (35 samples, 0.12%)</title><rect x="64.2811%" y="229" width="0.1195%" height="15" fill="rgb(232,202,2)" fg:x="18826" fg:w="35"/><text x="64.5311%" y="239.50"></text></g><g><title>bumpalo::Bump::grow (28 samples, 0.10%)</title><rect x="64.3050%" y="213" width="0.0956%" height="15" fill="rgb(237,140,51)" fg:x="18833" fg:w="28"/><text x="64.5550%" y="223.50"></text></g><g><title>core::intrinsics::copy (10 samples, 0.03%)</title><rect x="64.3664%" y="197" width="0.0341%" height="15" fill="rgb(236,157,25)" fg:x="18851" fg:w="10"/><text x="64.6164%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.03%)</title><rect x="64.3664%" y="181" width="0.0341%" height="15" fill="rgb(219,209,0)" fg:x="18851" fg:w="10"/><text x="64.6164%" y="191.50"></text></g><g><title>core::cmp::max (5 samples, 0.02%)</title><rect x="64.4074%" y="213" width="0.0171%" height="15" fill="rgb(240,116,54)" fg:x="18863" fg:w="5"/><text x="64.6574%" y="223.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve (5 samples, 0.02%)</title><rect x="64.4074%" y="197" width="0.0171%" height="15" fill="rgb(216,10,36)" fg:x="18863" fg:w="5"/><text x="64.6574%" y="207.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::amortized_new_size (8 samples, 0.03%)</title><rect x="64.4006%" y="229" width="0.0273%" height="15" fill="rgb(222,72,44)" fg:x="18861" fg:w="8"/><text x="64.6506%" y="239.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::current_layout (8 samples, 0.03%)</title><rect x="64.4279%" y="229" width="0.0273%" height="15" fill="rgb(232,159,9)" fg:x="18869" fg:w="8"/><text x="64.6779%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array (8 samples, 0.03%)</title><rect x="64.4552%" y="229" width="0.0273%" height="15" fill="rgb(210,39,32)" fg:x="18877" fg:w="8"/><text x="64.7052%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (8 samples, 0.03%)</title><rect x="64.4552%" y="213" width="0.0273%" height="15" fill="rgb(216,194,45)" fg:x="18877" fg:w="8"/><text x="64.7052%" y="223.50"></text></g><g><title>bumpalo::collections::vec::Vec&lt;T&gt;::reserve (92 samples, 0.31%)</title><rect x="64.1855%" y="277" width="0.3141%" height="15" fill="rgb(218,18,35)" fg:x="18798" fg:w="92"/><text x="64.4355%" y="287.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve (84 samples, 0.29%)</title><rect x="64.2128%" y="261" width="0.2868%" height="15" fill="rgb(207,83,51)" fg:x="18806" fg:w="84"/><text x="64.4628%" y="271.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve_internal (74 samples, 0.25%)</title><rect x="64.2469%" y="245" width="0.2527%" height="15" fill="rgb(225,63,43)" fg:x="18816" fg:w="74"/><text x="64.4969%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (5 samples, 0.02%)</title><rect x="64.4825%" y="229" width="0.0171%" height="15" fill="rgb(207,57,36)" fg:x="18885" fg:w="5"/><text x="64.7325%" y="239.50"></text></g><g><title>bumpalo::collections::vec::Vec&lt;T&gt;::push (114 samples, 0.39%)</title><rect x="64.1411%" y="293" width="0.3893%" height="15" fill="rgb(216,99,33)" fg:x="18785" fg:w="114"/><text x="64.3911%" y="303.50"></text></g><g><title>core::ptr::write (9 samples, 0.03%)</title><rect x="64.4996%" y="277" width="0.0307%" height="15" fill="rgb(225,42,16)" fg:x="18890" fg:w="9"/><text x="64.7496%" y="287.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_vec (9 samples, 0.03%)</title><rect x="64.5303%" y="293" width="0.0307%" height="15" fill="rgb(220,201,45)" fg:x="18899" fg:w="9"/><text x="64.7803%" y="303.50"></text></g><g><title>bumpalo::collections::vec::Vec&lt;T&gt;::new_in (9 samples, 0.03%)</title><rect x="64.5303%" y="277" width="0.0307%" height="15" fill="rgb(225,33,4)" fg:x="18899" fg:w="9"/><text x="64.7803%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.02%)</title><rect x="64.5952%" y="197" width="0.0171%" height="15" fill="rgb(224,33,50)" fg:x="18918" fg:w="5"/><text x="64.8452%" y="207.50"></text></g><g><title>bumpalo::Bump::alloc_layout (13 samples, 0.04%)</title><rect x="64.5781%" y="245" width="0.0444%" height="15" fill="rgb(246,198,51)" fg:x="18913" fg:w="13"/><text x="64.8281%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (13 samples, 0.04%)</title><rect x="64.5781%" y="229" width="0.0444%" height="15" fill="rgb(205,22,4)" fg:x="18913" fg:w="13"/><text x="64.8281%" y="239.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (13 samples, 0.04%)</title><rect x="64.5781%" y="213" width="0.0444%" height="15" fill="rgb(206,3,8)" fg:x="18913" fg:w="13"/><text x="64.8281%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_sub (3 samples, 0.01%)</title><rect x="64.6123%" y="197" width="0.0102%" height="15" fill="rgb(251,23,15)" fg:x="18923" fg:w="3"/><text x="64.8623%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_offset (3 samples, 0.01%)</title><rect x="64.6123%" y="181" width="0.0102%" height="15" fill="rgb(252,88,28)" fg:x="18923" fg:w="3"/><text x="64.8623%" y="191.50"></text></g><g><title>core::ptr::write (118 samples, 0.40%)</title><rect x="64.6259%" y="245" width="0.4029%" height="15" fill="rgb(212,127,14)" fg:x="18927" fg:w="118"/><text x="64.8759%" y="255.50"></text></g><g><title>__memset_avx2_unaligned_erms (116 samples, 0.40%)</title><rect x="64.6328%" y="229" width="0.3961%" height="15" fill="rgb(247,145,37)" fg:x="18929" fg:w="116"/><text x="64.8828%" y="239.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (133 samples, 0.45%)</title><rect x="64.5781%" y="261" width="0.4541%" height="15" fill="rgb(209,117,53)" fg:x="18913" fg:w="133"/><text x="64.8281%" y="271.50"></text></g><g><title>dryadsynth_bv::bv::Context::collect_with_indices (1,887 samples, 6.44%)</title><rect x="58.5960%" y="309" width="6.4431%" height="15" fill="rgb(212,90,42)" fg:x="17161" fg:w="1887"/><text x="58.8460%" y="319.50">dryadsyn..</text></g><g><title>dryadsynth_bv::bv::Context::alloc_zeros (140 samples, 0.48%)</title><rect x="64.5611%" y="293" width="0.4780%" height="15" fill="rgb(218,164,37)" fg:x="18908" fg:w="140"/><text x="64.8111%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_default (135 samples, 0.46%)</title><rect x="64.5781%" y="277" width="0.4610%" height="15" fill="rgb(246,65,34)" fg:x="18913" fg:w="135"/><text x="64.8281%" y="287.50"></text></g><g><title>dryadsynth_bv::rule::binary::OrRule::derive_from (2,283 samples, 7.80%)</title><rect x="57.4350%" y="325" width="7.7953%" height="15" fill="rgb(231,100,33)" fg:x="16821" fg:w="2283"/><text x="57.6850%" y="335.50">dryadsynth_..</text></g><g><title>dryadsynth_bv::rule::binary::OrRule::derive_from (56 samples, 0.19%)</title><rect x="65.0391%" y="309" width="0.1912%" height="15" fill="rgb(228,126,14)" fg:x="19048" fg:w="56"/><text x="65.2891%" y="319.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (16 samples, 0.05%)</title><rect x="65.4898%" y="261" width="0.0546%" height="15" fill="rgb(215,173,21)" fg:x="19180" fg:w="16"/><text x="65.7398%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.05%)</title><rect x="65.4898%" y="245" width="0.0546%" height="15" fill="rgb(210,6,40)" fg:x="19180" fg:w="16"/><text x="65.7398%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (13 samples, 0.04%)</title><rect x="65.5444%" y="261" width="0.0444%" height="15" fill="rgb(212,48,18)" fg:x="19196" fg:w="13"/><text x="65.7944%" y="271.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (13 samples, 0.04%)</title><rect x="65.5444%" y="245" width="0.0444%" height="15" fill="rgb(230,214,11)" fg:x="19196" fg:w="13"/><text x="65.7944%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (64 samples, 0.22%)</title><rect x="65.5888%" y="261" width="0.2185%" height="15" fill="rgb(254,105,39)" fg:x="19209" fg:w="64"/><text x="65.8388%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::le (64 samples, 0.22%)</title><rect x="65.5888%" y="245" width="0.2185%" height="15" fill="rgb(245,158,5)" fg:x="19209" fg:w="64"/><text x="65.8388%" y="255.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::PartialOrd&gt;::partial_cmp (64 samples, 0.22%)</title><rect x="65.5888%" y="229" width="0.2185%" height="15" fill="rgb(249,208,11)" fg:x="19209" fg:w="64"/><text x="65.8388%" y="239.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::Ord&gt;::cmp (64 samples, 0.22%)</title><rect x="65.5888%" y="213" width="0.2185%" height="15" fill="rgb(210,39,28)" fg:x="19209" fg:w="64"/><text x="65.8388%" y="223.50"></text></g><g><title>dryadsynth_bv::algo::State::evaluate (57 samples, 0.19%)</title><rect x="65.6127%" y="197" width="0.1946%" height="15" fill="rgb(211,56,53)" fg:x="19216" fg:w="57"/><text x="65.8627%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (112 samples, 0.38%)</title><rect x="65.4591%" y="277" width="0.3824%" height="15" fill="rgb(226,201,30)" fg:x="19171" fg:w="112"/><text x="65.7091%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;dryadsynth_bv::algo::State&gt;&gt; (10 samples, 0.03%)</title><rect x="65.8074%" y="261" width="0.0341%" height="15" fill="rgb(239,101,34)" fg:x="19273" fg:w="10"/><text x="66.0574%" y="271.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.03%)</title><rect x="65.8074%" y="245" width="0.0341%" height="15" fill="rgb(226,209,5)" fg:x="19273" fg:w="10"/><text x="66.0574%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.03%)</title><rect x="65.8074%" y="229" width="0.0341%" height="15" fill="rgb(250,105,47)" fg:x="19273" fg:w="10"/><text x="66.0574%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (38 samples, 0.13%)</title><rect x="65.8415%" y="277" width="0.1298%" height="15" fill="rgb(230,72,3)" fg:x="19283" fg:w="38"/><text x="66.0915%" y="287.50"></text></g><g><title>core::ptr::write (32 samples, 0.11%)</title><rect x="65.8620%" y="261" width="0.1093%" height="15" fill="rgb(232,218,39)" fg:x="19289" fg:w="32"/><text x="66.1120%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (152 samples, 0.52%)</title><rect x="65.4557%" y="293" width="0.5190%" height="15" fill="rgb(248,166,6)" fg:x="19170" fg:w="152"/><text x="65.7057%" y="303.50"></text></g><g><title>dryadsynth_bv::algo::Algo::push (154 samples, 0.53%)</title><rect x="65.4557%" y="309" width="0.5258%" height="15" fill="rgb(247,89,20)" fg:x="19170" fg:w="154"/><text x="65.7057%" y="319.50"></text></g><g><title>dryadsynth_bv::algo::State::derive (57 samples, 0.19%)</title><rect x="65.9815%" y="309" width="0.1946%" height="15" fill="rgb(248,130,54)" fg:x="19324" fg:w="57"/><text x="66.2315%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (7 samples, 0.02%)</title><rect x="66.2171%" y="213" width="0.0239%" height="15" fill="rgb(234,196,4)" fg:x="19393" fg:w="7"/><text x="66.4671%" y="223.50"></text></g><g><title>bumpalo::Bump::alloc_layout (15 samples, 0.05%)</title><rect x="66.1932%" y="261" width="0.0512%" height="15" fill="rgb(250,143,31)" fg:x="19386" fg:w="15"/><text x="66.4432%" y="271.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (15 samples, 0.05%)</title><rect x="66.1932%" y="245" width="0.0512%" height="15" fill="rgb(211,110,34)" fg:x="19386" fg:w="15"/><text x="66.4432%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (15 samples, 0.05%)</title><rect x="66.1932%" y="229" width="0.0512%" height="15" fill="rgb(215,124,48)" fg:x="19386" fg:w="15"/><text x="66.4432%" y="239.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc (101 samples, 0.34%)</title><rect x="66.1761%" y="309" width="0.3449%" height="15" fill="rgb(216,46,13)" fg:x="19381" fg:w="101"/><text x="66.4261%" y="319.50"></text></g><g><title>bumpalo::Bump::alloc (96 samples, 0.33%)</title><rect x="66.1932%" y="293" width="0.3278%" height="15" fill="rgb(205,184,25)" fg:x="19386" fg:w="96"/><text x="66.4432%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_with (96 samples, 0.33%)</title><rect x="66.1932%" y="277" width="0.3278%" height="15" fill="rgb(228,1,10)" fg:x="19386" fg:w="96"/><text x="66.4432%" y="287.50"></text></g><g><title>bumpalo::Bump::alloc_with::inner_writer (81 samples, 0.28%)</title><rect x="66.2444%" y="261" width="0.2766%" height="15" fill="rgb(213,116,27)" fg:x="19401" fg:w="81"/><text x="66.4944%" y="271.50"></text></g><g><title>core::ptr::write (81 samples, 0.28%)</title><rect x="66.2444%" y="245" width="0.2766%" height="15" fill="rgb(241,95,50)" fg:x="19401" fg:w="81"/><text x="66.4944%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.08%)</title><rect x="66.9205%" y="261" width="0.0751%" height="15" fill="rgb(238,48,32)" fg:x="19599" fg:w="22"/><text x="67.1705%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (323 samples, 1.10%)</title><rect x="66.9205%" y="277" width="1.1029%" height="15" fill="rgb(235,113,49)" fg:x="19599" fg:w="323"/><text x="67.1705%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (301 samples, 1.03%)</title><rect x="66.9956%" y="261" width="1.0278%" height="15" fill="rgb(205,127,43)" fg:x="19621" fg:w="301"/><text x="67.2456%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (301 samples, 1.03%)</title><rect x="66.9956%" y="245" width="1.0278%" height="15" fill="rgb(250,162,2)" fg:x="19621" fg:w="301"/><text x="67.2456%" y="255.50"></text></g><g><title>dryadsynth_bv::bv::Hint::zip::{{closure}} (249 samples, 0.85%)</title><rect x="67.1731%" y="229" width="0.8502%" height="15" fill="rgb(220,13,41)" fg:x="19673" fg:w="249"/><text x="67.4231%" y="239.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Bv as core::ops::index::Index&lt;usize&gt;&gt;::index (31 samples, 0.11%)</title><rect x="67.9175%" y="213" width="0.1058%" height="15" fill="rgb(249,221,25)" fg:x="19891" fg:w="31"/><text x="68.1675%" y="223.50"></text></g><g><title>dryadsynth_bv::rule::binary::XorRule::derive_from (173 samples, 0.59%)</title><rect x="68.0234%" y="245" width="0.5907%" height="15" fill="rgb(215,208,19)" fg:x="19922" fg:w="173"/><text x="68.2734%" y="255.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::max (12 samples, 0.04%)</title><rect x="69.7716%" y="229" width="0.0410%" height="15" fill="rgb(236,175,2)" fg:x="20434" fg:w="12"/><text x="70.0216%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_ones (33 samples, 0.11%)</title><rect x="69.8125%" y="229" width="0.1127%" height="15" fill="rgb(241,52,2)" fg:x="20446" fg:w="33"/><text x="70.0625%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (15 samples, 0.05%)</title><rect x="69.8740%" y="213" width="0.0512%" height="15" fill="rgb(248,140,14)" fg:x="20464" fg:w="15"/><text x="70.1240%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (993 samples, 3.39%)</title><rect x="66.9205%" y="293" width="3.3906%" height="15" fill="rgb(253,22,42)" fg:x="19599" fg:w="993"/><text x="67.1705%" y="303.50">&lt;co..</text></g><g><title>core::option::Option&lt;T&gt;::map (670 samples, 2.29%)</title><rect x="68.0234%" y="277" width="2.2877%" height="15" fill="rgb(234,61,47)" fg:x="19922" fg:w="670"/><text x="68.2734%" y="287.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (670 samples, 2.29%)</title><rect x="68.0234%" y="261" width="2.2877%" height="15" fill="rgb(208,226,15)" fg:x="19922" fg:w="670"/><text x="68.2734%" y="271.50">c..</text></g><g><title>dryadsynth_bv::rule::binary::XorRule::derive_from::{{closure}} (497 samples, 1.70%)</title><rect x="68.6141%" y="245" width="1.6970%" height="15" fill="rgb(217,221,4)" fg:x="20095" fg:w="497"/><text x="68.8641%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (113 samples, 0.39%)</title><rect x="69.9252%" y="229" width="0.3858%" height="15" fill="rgb(212,174,34)" fg:x="20479" fg:w="113"/><text x="70.1752%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.02%)</title><rect x="70.3657%" y="197" width="0.0171%" height="15" fill="rgb(253,83,4)" fg:x="20608" fg:w="5"/><text x="70.6157%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (5 samples, 0.02%)</title><rect x="70.3828%" y="197" width="0.0171%" height="15" fill="rgb(250,195,49)" fg:x="20613" fg:w="5"/><text x="70.6328%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (5 samples, 0.02%)</title><rect x="70.3828%" y="181" width="0.0171%" height="15" fill="rgb(241,192,25)" fg:x="20613" fg:w="5"/><text x="70.6328%" y="191.50"></text></g><g><title>core::mem::replace (5 samples, 0.02%)</title><rect x="70.3828%" y="165" width="0.0171%" height="15" fill="rgb(208,124,10)" fg:x="20613" fg:w="5"/><text x="70.6328%" y="175.50"></text></g><g><title>core::ptr::write (5 samples, 0.02%)</title><rect x="70.3828%" y="149" width="0.0171%" height="15" fill="rgb(222,33,0)" fg:x="20613" fg:w="5"/><text x="70.6328%" y="159.50"></text></g><g><title>bumpalo::Bump::alloc_layout (16 samples, 0.05%)</title><rect x="70.3554%" y="245" width="0.0546%" height="15" fill="rgb(234,209,28)" fg:x="20605" fg:w="16"/><text x="70.6054%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (16 samples, 0.05%)</title><rect x="70.3554%" y="229" width="0.0546%" height="15" fill="rgb(224,11,23)" fg:x="20605" fg:w="16"/><text x="70.6054%" y="239.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (16 samples, 0.05%)</title><rect x="70.3554%" y="213" width="0.0546%" height="15" fill="rgb(232,99,1)" fg:x="20605" fg:w="16"/><text x="70.6054%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_sub (3 samples, 0.01%)</title><rect x="70.3998%" y="197" width="0.0102%" height="15" fill="rgb(237,95,45)" fg:x="20618" fg:w="3"/><text x="70.6498%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_offset (3 samples, 0.01%)</title><rect x="70.3998%" y="181" width="0.0102%" height="15" fill="rgb(208,109,11)" fg:x="20618" fg:w="3"/><text x="70.6498%" y="191.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.01%)</title><rect x="70.4101%" y="245" width="0.0102%" height="15" fill="rgb(216,190,48)" fg:x="20621" fg:w="3"/><text x="70.6601%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.01%)</title><rect x="70.4101%" y="229" width="0.0102%" height="15" fill="rgb(251,171,36)" fg:x="20621" fg:w="3"/><text x="70.6601%" y="239.50"></text></g><g><title>core::ptr::write (187 samples, 0.64%)</title><rect x="70.4203%" y="245" width="0.6385%" height="15" fill="rgb(230,62,22)" fg:x="20624" fg:w="187"/><text x="70.6703%" y="255.50"></text></g><g><title>__memset_avx2_unaligned_erms (186 samples, 0.64%)</title><rect x="70.4237%" y="229" width="0.6351%" height="15" fill="rgb(225,114,35)" fg:x="20625" fg:w="186"/><text x="70.6737%" y="239.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_zeros (220 samples, 0.75%)</title><rect x="70.3111%" y="293" width="0.7512%" height="15" fill="rgb(215,118,42)" fg:x="20592" fg:w="220"/><text x="70.5611%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_default (207 samples, 0.71%)</title><rect x="70.3554%" y="277" width="0.7068%" height="15" fill="rgb(243,119,21)" fg:x="20605" fg:w="207"/><text x="70.6054%" y="287.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (207 samples, 0.71%)</title><rect x="70.3554%" y="261" width="0.7068%" height="15" fill="rgb(252,177,53)" fg:x="20605" fg:w="207"/><text x="70.6054%" y="271.50"></text></g><g><title>dryadsynth_bv::bv::Context::collect (1,365 samples, 4.66%)</title><rect x="66.5210%" y="309" width="4.6608%" height="15" fill="rgb(237,209,29)" fg:x="19482" fg:w="1365"/><text x="66.7710%" y="319.50">dryad..</text></g><g><title>dryadsynth_bv::rule::binary::XorRule::derive_from (35 samples, 0.12%)</title><rect x="71.0622%" y="293" width="0.1195%" height="15" fill="rgb(212,65,23)" fg:x="20812" fg:w="35"/><text x="71.3122%" y="303.50"></text></g><g><title>dryadsynth_bv::rule::binary::XorRule::derive_from (1,788 samples, 6.11%)</title><rect x="65.2303%" y="325" width="6.1051%" height="15" fill="rgb(230,222,46)" fg:x="19104" fg:w="1788"/><text x="65.4803%" y="335.50">dryadsyn..</text></g><g><title>dryadsynth_bv::rule::binary::XorRule::derive_from (43 samples, 0.15%)</title><rect x="71.1886%" y="309" width="0.1468%" height="15" fill="rgb(215,135,32)" fg:x="20849" fg:w="43"/><text x="71.4386%" y="319.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (10 samples, 0.03%)</title><rect x="71.5164%" y="261" width="0.0341%" height="15" fill="rgb(246,101,22)" fg:x="20945" fg:w="10"/><text x="71.7664%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.03%)</title><rect x="71.5164%" y="245" width="0.0341%" height="15" fill="rgb(206,107,13)" fg:x="20945" fg:w="10"/><text x="71.7664%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (13 samples, 0.04%)</title><rect x="71.5505%" y="261" width="0.0444%" height="15" fill="rgb(250,100,44)" fg:x="20955" fg:w="13"/><text x="71.8005%" y="271.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (13 samples, 0.04%)</title><rect x="71.5505%" y="245" width="0.0444%" height="15" fill="rgb(231,147,38)" fg:x="20955" fg:w="13"/><text x="71.8005%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (42 samples, 0.14%)</title><rect x="71.5949%" y="261" width="0.1434%" height="15" fill="rgb(229,8,40)" fg:x="20968" fg:w="42"/><text x="71.8449%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::le (42 samples, 0.14%)</title><rect x="71.5949%" y="245" width="0.1434%" height="15" fill="rgb(221,135,30)" fg:x="20968" fg:w="42"/><text x="71.8449%" y="255.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::PartialOrd&gt;::partial_cmp (42 samples, 0.14%)</title><rect x="71.5949%" y="229" width="0.1434%" height="15" fill="rgb(249,193,18)" fg:x="20968" fg:w="42"/><text x="71.8449%" y="239.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::Ord&gt;::cmp (42 samples, 0.14%)</title><rect x="71.5949%" y="213" width="0.1434%" height="15" fill="rgb(209,133,39)" fg:x="20968" fg:w="42"/><text x="71.8449%" y="223.50"></text></g><g><title>dryadsynth_bv::algo::State::evaluate (41 samples, 0.14%)</title><rect x="71.5983%" y="197" width="0.1400%" height="15" fill="rgb(232,100,14)" fg:x="20969" fg:w="41"/><text x="71.8483%" y="207.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (87 samples, 0.30%)</title><rect x="71.4754%" y="277" width="0.2971%" height="15" fill="rgb(224,185,1)" fg:x="20933" fg:w="87"/><text x="71.7254%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;dryadsynth_bv::algo::State&gt;&gt; (10 samples, 0.03%)</title><rect x="71.7383%" y="261" width="0.0341%" height="15" fill="rgb(223,139,8)" fg:x="21010" fg:w="10"/><text x="71.9883%" y="271.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.03%)</title><rect x="71.7383%" y="245" width="0.0341%" height="15" fill="rgb(232,213,38)" fg:x="21010" fg:w="10"/><text x="71.9883%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.03%)</title><rect x="71.7383%" y="229" width="0.0341%" height="15" fill="rgb(207,94,22)" fg:x="21010" fg:w="10"/><text x="71.9883%" y="239.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (127 samples, 0.43%)</title><rect x="71.4754%" y="293" width="0.4336%" height="15" fill="rgb(219,183,54)" fg:x="20933" fg:w="127"/><text x="71.7254%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (40 samples, 0.14%)</title><rect x="71.7725%" y="277" width="0.1366%" height="15" fill="rgb(216,185,54)" fg:x="21020" fg:w="40"/><text x="72.0225%" y="287.50"></text></g><g><title>core::ptr::write (28 samples, 0.10%)</title><rect x="71.8134%" y="261" width="0.0956%" height="15" fill="rgb(254,217,39)" fg:x="21032" fg:w="28"/><text x="72.0634%" y="271.50"></text></g><g><title>dryadsynth_bv::algo::Algo::push (129 samples, 0.44%)</title><rect x="71.4754%" y="309" width="0.4405%" height="15" fill="rgb(240,178,23)" fg:x="20933" fg:w="129"/><text x="71.7254%" y="319.50"></text></g><g><title>dryadsynth_bv::algo::State::derive (109 samples, 0.37%)</title><rect x="71.9159%" y="309" width="0.3722%" height="15" fill="rgb(218,11,47)" fg:x="21062" fg:w="109"/><text x="72.1659%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.02%)</title><rect x="72.3017%" y="213" width="0.0171%" height="15" fill="rgb(218,51,51)" fg:x="21175" fg:w="5"/><text x="72.5517%" y="223.50"></text></g><g><title>bumpalo::Bump::alloc_layout (8 samples, 0.03%)</title><rect x="72.2949%" y="261" width="0.0273%" height="15" fill="rgb(238,126,27)" fg:x="21173" fg:w="8"/><text x="72.5449%" y="271.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (8 samples, 0.03%)</title><rect x="72.2949%" y="245" width="0.0273%" height="15" fill="rgb(249,202,22)" fg:x="21173" fg:w="8"/><text x="72.5449%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (8 samples, 0.03%)</title><rect x="72.2949%" y="229" width="0.0273%" height="15" fill="rgb(254,195,49)" fg:x="21173" fg:w="8"/><text x="72.5449%" y="239.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc (71 samples, 0.24%)</title><rect x="72.2880%" y="309" width="0.2424%" height="15" fill="rgb(208,123,14)" fg:x="21171" fg:w="71"/><text x="72.5380%" y="319.50"></text></g><g><title>bumpalo::Bump::alloc (69 samples, 0.24%)</title><rect x="72.2949%" y="293" width="0.2356%" height="15" fill="rgb(224,200,8)" fg:x="21173" fg:w="69"/><text x="72.5449%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_with (69 samples, 0.24%)</title><rect x="72.2949%" y="277" width="0.2356%" height="15" fill="rgb(217,61,36)" fg:x="21173" fg:w="69"/><text x="72.5449%" y="287.50"></text></g><g><title>bumpalo::Bump::alloc_with::inner_writer (61 samples, 0.21%)</title><rect x="72.3222%" y="261" width="0.2083%" height="15" fill="rgb(206,35,45)" fg:x="21181" fg:w="61"/><text x="72.5722%" y="271.50"></text></g><g><title>core::ptr::write (61 samples, 0.21%)</title><rect x="72.3222%" y="245" width="0.2083%" height="15" fill="rgb(217,65,33)" fg:x="21181" fg:w="61"/><text x="72.5722%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (148 samples, 0.51%)</title><rect x="72.7353%" y="213" width="0.5053%" height="15" fill="rgb(222,158,48)" fg:x="21302" fg:w="148"/><text x="72.9853%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (148 samples, 0.51%)</title><rect x="72.7353%" y="197" width="0.5053%" height="15" fill="rgb(254,2,54)" fg:x="21302" fg:w="148"/><text x="72.9853%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (148 samples, 0.51%)</title><rect x="72.7353%" y="181" width="0.5053%" height="15" fill="rgb(250,143,38)" fg:x="21302" fg:w="148"/><text x="72.9853%" y="191.50"></text></g><g><title>dryadsynth_bv::bv::Hint::zip::{{closure}} (133 samples, 0.45%)</title><rect x="72.7866%" y="165" width="0.4541%" height="15" fill="rgb(248,25,0)" fg:x="21317" fg:w="133"/><text x="73.0366%" y="175.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Bv as core::ops::index::Index&lt;usize&gt;&gt;::index (41 samples, 0.14%)</title><rect x="73.1007%" y="149" width="0.1400%" height="15" fill="rgb(206,152,27)" fg:x="21409" fg:w="41"/><text x="73.3507%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::unchecked_sub (31 samples, 0.11%)</title><rect x="73.2407%" y="165" width="0.1058%" height="15" fill="rgb(240,77,30)" fg:x="21450" fg:w="31"/><text x="73.4907%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_ones (152 samples, 0.52%)</title><rect x="73.3465%" y="165" width="0.5190%" height="15" fill="rgb(231,5,3)" fg:x="21481" fg:w="152"/><text x="73.5965%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (44 samples, 0.15%)</title><rect x="73.7153%" y="149" width="0.1502%" height="15" fill="rgb(207,226,32)" fg:x="21589" fg:w="44"/><text x="73.9653%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (63 samples, 0.22%)</title><rect x="73.8655%" y="165" width="0.2151%" height="15" fill="rgb(222,207,47)" fg:x="21633" fg:w="63"/><text x="74.1155%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (489 samples, 1.67%)</title><rect x="72.7353%" y="293" width="1.6697%" height="15" fill="rgb(229,115,45)" fg:x="21302" fg:w="489"/><text x="72.9853%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (489 samples, 1.67%)</title><rect x="72.7353%" y="277" width="1.6697%" height="15" fill="rgb(224,191,6)" fg:x="21302" fg:w="489"/><text x="72.9853%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (489 samples, 1.67%)</title><rect x="72.7353%" y="261" width="1.6697%" height="15" fill="rgb(230,227,24)" fg:x="21302" fg:w="489"/><text x="72.9853%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (489 samples, 1.67%)</title><rect x="72.7353%" y="245" width="1.6697%" height="15" fill="rgb(228,80,19)" fg:x="21302" fg:w="489"/><text x="72.9853%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (489 samples, 1.67%)</title><rect x="72.7353%" y="229" width="1.6697%" height="15" fill="rgb(247,229,0)" fg:x="21302" fg:w="489"/><text x="72.9853%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (341 samples, 1.16%)</title><rect x="73.2407%" y="213" width="1.1643%" height="15" fill="rgb(237,194,15)" fg:x="21450" fg:w="341"/><text x="73.4907%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (341 samples, 1.16%)</title><rect x="73.2407%" y="197" width="1.1643%" height="15" fill="rgb(219,203,20)" fg:x="21450" fg:w="341"/><text x="73.4907%" y="207.50"></text></g><g><title>dryadsynth_bv::rule::shift::NotRule::derive_from::{{closure}} (341 samples, 1.16%)</title><rect x="73.2407%" y="181" width="1.1643%" height="15" fill="rgb(234,128,8)" fg:x="21450" fg:w="341"/><text x="73.4907%" y="191.50"></text></g><g><title>dryadsynth_bv::rule::shift::NotRule::derive_from (95 samples, 0.32%)</title><rect x="74.0807%" y="165" width="0.3244%" height="15" fill="rgb(248,202,8)" fg:x="21696" fg:w="95"/><text x="74.3307%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (11 samples, 0.04%)</title><rect x="74.4733%" y="197" width="0.0376%" height="15" fill="rgb(206,104,37)" fg:x="21811" fg:w="11"/><text x="74.7233%" y="207.50"></text></g><g><title>bumpalo::Bump::alloc_layout (23 samples, 0.08%)</title><rect x="74.4392%" y="245" width="0.0785%" height="15" fill="rgb(223,8,27)" fg:x="21801" fg:w="23"/><text x="74.6892%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (23 samples, 0.08%)</title><rect x="74.4392%" y="229" width="0.0785%" height="15" fill="rgb(216,217,28)" fg:x="21801" fg:w="23"/><text x="74.6892%" y="239.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (23 samples, 0.08%)</title><rect x="74.4392%" y="213" width="0.0785%" height="15" fill="rgb(249,199,1)" fg:x="21801" fg:w="23"/><text x="74.6892%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.01%)</title><rect x="74.5177%" y="245" width="0.0137%" height="15" fill="rgb(240,85,17)" fg:x="21824" fg:w="4"/><text x="74.7677%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.01%)</title><rect x="74.5177%" y="229" width="0.0137%" height="15" fill="rgb(206,108,45)" fg:x="21824" fg:w="4"/><text x="74.7677%" y="239.50"></text></g><g><title>dryadsynth_bv::bv::Context::collect (770 samples, 2.63%)</title><rect x="72.5305%" y="309" width="2.6292%" height="15" fill="rgb(245,210,41)" fg:x="21242" fg:w="770"/><text x="72.7805%" y="319.50">dr..</text></g><g><title>dryadsynth_bv::bv::Context::alloc_zeros (221 samples, 0.75%)</title><rect x="74.4050%" y="293" width="0.7546%" height="15" fill="rgb(206,13,37)" fg:x="21791" fg:w="221"/><text x="74.6550%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_default (211 samples, 0.72%)</title><rect x="74.4392%" y="277" width="0.7205%" height="15" fill="rgb(250,61,18)" fg:x="21801" fg:w="211"/><text x="74.6892%" y="287.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (211 samples, 0.72%)</title><rect x="74.4392%" y="261" width="0.7205%" height="15" fill="rgb(235,172,48)" fg:x="21801" fg:w="211"/><text x="74.6892%" y="271.50"></text></g><g><title>core::ptr::write (184 samples, 0.63%)</title><rect x="74.5314%" y="245" width="0.6283%" height="15" fill="rgb(249,201,17)" fg:x="21828" fg:w="184"/><text x="74.7814%" y="255.50"></text></g><g><title>__memset_avx2_unaligned_erms (179 samples, 0.61%)</title><rect x="74.5484%" y="229" width="0.6112%" height="15" fill="rgb(219,208,6)" fg:x="21833" fg:w="179"/><text x="74.7984%" y="239.50"></text></g><g><title>dryadsynth_bv::rule::shift::NotRule::derive_from (1,152 samples, 3.93%)</title><rect x="71.3354%" y="325" width="3.9335%" height="15" fill="rgb(248,31,23)" fg:x="20892" fg:w="1152"/><text x="71.5854%" y="335.50">drya..</text></g><g><title>dryadsynth_bv::rule::shift::NotRule::derive_from (32 samples, 0.11%)</title><rect x="75.1596%" y="309" width="0.1093%" height="15" fill="rgb(245,15,42)" fg:x="22012" fg:w="32"/><text x="75.4096%" y="319.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (9 samples, 0.03%)</title><rect x="75.3918%" y="245" width="0.0307%" height="15" fill="rgb(222,217,39)" fg:x="22080" fg:w="9"/><text x="75.6418%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (13 samples, 0.04%)</title><rect x="75.3918%" y="261" width="0.0444%" height="15" fill="rgb(210,219,27)" fg:x="22080" fg:w="13"/><text x="75.6418%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (4 samples, 0.01%)</title><rect x="75.4225%" y="245" width="0.0137%" height="15" fill="rgb(252,166,36)" fg:x="22089" fg:w="4"/><text x="75.6725%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (4 samples, 0.01%)</title><rect x="75.4225%" y="229" width="0.0137%" height="15" fill="rgb(245,132,34)" fg:x="22089" fg:w="4"/><text x="75.6725%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.01%)</title><rect x="75.4225%" y="213" width="0.0137%" height="15" fill="rgb(236,54,3)" fg:x="22089" fg:w="4"/><text x="75.6725%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (4 samples, 0.01%)</title><rect x="75.4225%" y="197" width="0.0137%" height="15" fill="rgb(241,173,43)" fg:x="22089" fg:w="4"/><text x="75.6725%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (53 samples, 0.18%)</title><rect x="75.4362%" y="261" width="0.1810%" height="15" fill="rgb(215,190,9)" fg:x="22093" fg:w="53"/><text x="75.6862%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::le (53 samples, 0.18%)</title><rect x="75.4362%" y="245" width="0.1810%" height="15" fill="rgb(242,101,16)" fg:x="22093" fg:w="53"/><text x="75.6862%" y="255.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::PartialOrd&gt;::partial_cmp (53 samples, 0.18%)</title><rect x="75.4362%" y="229" width="0.1810%" height="15" fill="rgb(223,190,21)" fg:x="22093" fg:w="53"/><text x="75.6862%" y="239.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::Ord&gt;::cmp (53 samples, 0.18%)</title><rect x="75.4362%" y="213" width="0.1810%" height="15" fill="rgb(215,228,25)" fg:x="22093" fg:w="53"/><text x="75.6862%" y="223.50"></text></g><g><title>dryadsynth_bv::algo::State::evaluate (53 samples, 0.18%)</title><rect x="75.4362%" y="197" width="0.1810%" height="15" fill="rgb(225,36,22)" fg:x="22093" fg:w="53"/><text x="75.6862%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.04%)</title><rect x="75.6172%" y="229" width="0.0410%" height="15" fill="rgb(251,106,46)" fg:x="22146" fg:w="12"/><text x="75.8672%" y="239.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (84 samples, 0.29%)</title><rect x="75.3747%" y="277" width="0.2868%" height="15" fill="rgb(208,90,1)" fg:x="22075" fg:w="84"/><text x="75.6247%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;dryadsynth_bv::algo::State&gt;&gt; (13 samples, 0.04%)</title><rect x="75.6172%" y="261" width="0.0444%" height="15" fill="rgb(243,10,4)" fg:x="22146" fg:w="13"/><text x="75.8672%" y="271.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.04%)</title><rect x="75.6172%" y="245" width="0.0444%" height="15" fill="rgb(212,137,27)" fg:x="22146" fg:w="13"/><text x="75.8672%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (18 samples, 0.06%)</title><rect x="75.6616%" y="277" width="0.0615%" height="15" fill="rgb(231,220,49)" fg:x="22159" fg:w="18"/><text x="75.9116%" y="287.50"></text></g><g><title>core::ptr::write (17 samples, 0.06%)</title><rect x="75.6650%" y="261" width="0.0580%" height="15" fill="rgb(237,96,20)" fg:x="22160" fg:w="17"/><text x="75.9150%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (103 samples, 0.35%)</title><rect x="75.3747%" y="293" width="0.3517%" height="15" fill="rgb(239,229,30)" fg:x="22075" fg:w="103"/><text x="75.6247%" y="303.50"></text></g><g><title>dryadsynth_bv::algo::Algo::push (104 samples, 0.36%)</title><rect x="75.3747%" y="309" width="0.3551%" height="15" fill="rgb(219,65,33)" fg:x="22075" fg:w="104"/><text x="75.6247%" y="319.50"></text></g><g><title>dryadsynth_bv::algo::State::derive (51 samples, 0.17%)</title><rect x="75.7298%" y="309" width="0.1741%" height="15" fill="rgb(243,134,7)" fg:x="22179" fg:w="51"/><text x="75.9798%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (8 samples, 0.03%)</title><rect x="75.9245%" y="213" width="0.0273%" height="15" fill="rgb(216,177,54)" fg:x="22236" fg:w="8"/><text x="76.1745%" y="223.50"></text></g><g><title>bumpalo::Bump::alloc_layout (13 samples, 0.04%)</title><rect x="75.9142%" y="261" width="0.0444%" height="15" fill="rgb(211,160,20)" fg:x="22233" fg:w="13"/><text x="76.1642%" y="271.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (13 samples, 0.04%)</title><rect x="75.9142%" y="245" width="0.0444%" height="15" fill="rgb(239,85,39)" fg:x="22233" fg:w="13"/><text x="76.1642%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (13 samples, 0.04%)</title><rect x="75.9142%" y="229" width="0.0444%" height="15" fill="rgb(232,125,22)" fg:x="22233" fg:w="13"/><text x="76.1642%" y="239.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc (52 samples, 0.18%)</title><rect x="75.9040%" y="309" width="0.1776%" height="15" fill="rgb(244,57,34)" fg:x="22230" fg:w="52"/><text x="76.1540%" y="319.50"></text></g><g><title>bumpalo::Bump::alloc (49 samples, 0.17%)</title><rect x="75.9142%" y="293" width="0.1673%" height="15" fill="rgb(214,203,32)" fg:x="22233" fg:w="49"/><text x="76.1642%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_with (49 samples, 0.17%)</title><rect x="75.9142%" y="277" width="0.1673%" height="15" fill="rgb(207,58,43)" fg:x="22233" fg:w="49"/><text x="76.1642%" y="287.50"></text></g><g><title>bumpalo::Bump::alloc_with::inner_writer (36 samples, 0.12%)</title><rect x="75.9586%" y="261" width="0.1229%" height="15" fill="rgb(215,193,15)" fg:x="22246" fg:w="36"/><text x="76.2086%" y="271.50"></text></g><g><title>core::ptr::write (36 samples, 0.12%)</title><rect x="75.9586%" y="245" width="0.1229%" height="15" fill="rgb(232,15,44)" fg:x="22246" fg:w="36"/><text x="76.2086%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (140 samples, 0.48%)</title><rect x="76.3752%" y="213" width="0.4780%" height="15" fill="rgb(212,3,48)" fg:x="22368" fg:w="140"/><text x="76.6252%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (140 samples, 0.48%)</title><rect x="76.3752%" y="197" width="0.4780%" height="15" fill="rgb(218,128,7)" fg:x="22368" fg:w="140"/><text x="76.6252%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (140 samples, 0.48%)</title><rect x="76.3752%" y="181" width="0.4780%" height="15" fill="rgb(226,216,39)" fg:x="22368" fg:w="140"/><text x="76.6252%" y="191.50"></text></g><g><title>dryadsynth_bv::bv::Hint::zip::{{closure}} (124 samples, 0.42%)</title><rect x="76.4298%" y="165" width="0.4234%" height="15" fill="rgb(243,47,51)" fg:x="22384" fg:w="124"/><text x="76.6798%" y="175.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Bv as core::ops::index::Index&lt;usize&gt;&gt;::index (7 samples, 0.02%)</title><rect x="76.8293%" y="149" width="0.0239%" height="15" fill="rgb(241,183,40)" fg:x="22501" fg:w="7"/><text x="77.0793%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (300 samples, 1.02%)</title><rect x="76.3752%" y="229" width="1.0243%" height="15" fill="rgb(231,217,32)" fg:x="22368" fg:w="300"/><text x="76.6252%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (160 samples, 0.55%)</title><rect x="76.8532%" y="213" width="0.5463%" height="15" fill="rgb(229,61,38)" fg:x="22508" fg:w="160"/><text x="77.1032%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (160 samples, 0.55%)</title><rect x="76.8532%" y="197" width="0.5463%" height="15" fill="rgb(225,210,5)" fg:x="22508" fg:w="160"/><text x="77.1032%" y="207.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShlRule::derive_from::{{closure}} (160 samples, 0.55%)</title><rect x="76.8532%" y="181" width="0.5463%" height="15" fill="rgb(231,79,45)" fg:x="22508" fg:w="160"/><text x="77.1032%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (98 samples, 0.33%)</title><rect x="77.0649%" y="165" width="0.3346%" height="15" fill="rgb(224,100,7)" fg:x="22570" fg:w="98"/><text x="77.3149%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (323 samples, 1.10%)</title><rect x="76.3615%" y="261" width="1.1029%" height="15" fill="rgb(241,198,18)" fg:x="22364" fg:w="323"/><text x="76.6115%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (323 samples, 1.10%)</title><rect x="76.3615%" y="245" width="1.1029%" height="15" fill="rgb(252,97,53)" fg:x="22364" fg:w="323"/><text x="76.6115%" y="255.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShlRule::derive_from (19 samples, 0.06%)</title><rect x="77.3995%" y="229" width="0.0649%" height="15" fill="rgb(220,88,7)" fg:x="22668" fg:w="19"/><text x="77.6495%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (350 samples, 1.20%)</title><rect x="76.3615%" y="277" width="1.1951%" height="15" fill="rgb(213,176,14)" fg:x="22364" fg:w="350"/><text x="76.6115%" y="287.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (27 samples, 0.09%)</title><rect x="77.4644%" y="261" width="0.0922%" height="15" fill="rgb(246,73,7)" fg:x="22687" fg:w="27"/><text x="77.7144%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (360 samples, 1.23%)</title><rect x="76.3615%" y="293" width="1.2292%" height="15" fill="rgb(245,64,36)" fg:x="22364" fg:w="360"/><text x="76.6115%" y="303.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShlRule::derive_from (10 samples, 0.03%)</title><rect x="77.5566%" y="277" width="0.0341%" height="15" fill="rgb(245,80,10)" fg:x="22714" fg:w="10"/><text x="77.8066%" y="287.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::ptr (5 samples, 0.02%)</title><rect x="77.6112%" y="277" width="0.0171%" height="15" fill="rgb(232,107,50)" fg:x="22730" fg:w="5"/><text x="77.8612%" y="287.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve (23 samples, 0.08%)</title><rect x="77.6966%" y="245" width="0.0785%" height="15" fill="rgb(253,3,0)" fg:x="22755" fg:w="23"/><text x="77.9466%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (8 samples, 0.03%)</title><rect x="77.8161%" y="181" width="0.0273%" height="15" fill="rgb(212,99,53)" fg:x="22790" fg:w="8"/><text x="78.0661%" y="191.50"></text></g><g><title>&lt;&amp;bumpalo::Bump as bumpalo::alloc::Alloc&gt;::alloc (16 samples, 0.05%)</title><rect x="77.7922%" y="229" width="0.0546%" height="15" fill="rgb(249,111,54)" fg:x="22783" fg:w="16"/><text x="78.0422%" y="239.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (12 samples, 0.04%)</title><rect x="77.8059%" y="213" width="0.0410%" height="15" fill="rgb(249,55,30)" fg:x="22787" fg:w="12"/><text x="78.0559%" y="223.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (12 samples, 0.04%)</title><rect x="77.8059%" y="197" width="0.0410%" height="15" fill="rgb(237,47,42)" fg:x="22787" fg:w="12"/><text x="78.0559%" y="207.50"></text></g><g><title>bumpalo::Bump::is_last_allocation (12 samples, 0.04%)</title><rect x="77.8571%" y="197" width="0.0410%" height="15" fill="rgb(211,20,18)" fg:x="22802" fg:w="12"/><text x="78.1071%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (12 samples, 0.04%)</title><rect x="77.8571%" y="181" width="0.0410%" height="15" fill="rgb(231,203,46)" fg:x="22802" fg:w="12"/><text x="78.1071%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (6 samples, 0.02%)</title><rect x="77.9185%" y="181" width="0.0205%" height="15" fill="rgb(237,142,3)" fg:x="22820" fg:w="6"/><text x="78.1685%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (6 samples, 0.02%)</title><rect x="77.9185%" y="165" width="0.0205%" height="15" fill="rgb(241,107,1)" fg:x="22820" fg:w="6"/><text x="78.1685%" y="175.50"></text></g><g><title>core::mem::replace (6 samples, 0.02%)</title><rect x="77.9185%" y="149" width="0.0205%" height="15" fill="rgb(229,83,13)" fg:x="22820" fg:w="6"/><text x="78.1685%" y="159.50"></text></g><g><title>core::ptr::write (6 samples, 0.02%)</title><rect x="77.9185%" y="133" width="0.0205%" height="15" fill="rgb(241,91,40)" fg:x="22820" fg:w="6"/><text x="78.1685%" y="143.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (20 samples, 0.07%)</title><rect x="77.8980%" y="197" width="0.0683%" height="15" fill="rgb(225,3,45)" fg:x="22814" fg:w="20"/><text x="78.1480%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_sub (8 samples, 0.03%)</title><rect x="77.9390%" y="181" width="0.0273%" height="15" fill="rgb(244,223,14)" fg:x="22826" fg:w="8"/><text x="78.1890%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_offset (8 samples, 0.03%)</title><rect x="77.9390%" y="165" width="0.0273%" height="15" fill="rgb(224,124,37)" fg:x="22826" fg:w="8"/><text x="78.1890%" y="175.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve (7 samples, 0.02%)</title><rect x="77.9663%" y="197" width="0.0239%" height="15" fill="rgb(251,171,30)" fg:x="22834" fg:w="7"/><text x="78.2163%" y="207.50"></text></g><g><title>&lt;&amp;bumpalo::Bump as bumpalo::alloc::Alloc&gt;::realloc (103 samples, 0.35%)</title><rect x="77.8468%" y="229" width="0.3517%" height="15" fill="rgb(236,46,54)" fg:x="22799" fg:w="103"/><text x="78.0968%" y="239.50"></text></g><g><title>bumpalo::Bump::grow (102 samples, 0.35%)</title><rect x="77.8502%" y="213" width="0.3483%" height="15" fill="rgb(245,213,5)" fg:x="22800" fg:w="102"/><text x="78.1002%" y="223.50"></text></g><g><title>core::intrinsics::copy (61 samples, 0.21%)</title><rect x="77.9902%" y="197" width="0.2083%" height="15" fill="rgb(230,144,27)" fg:x="22841" fg:w="61"/><text x="78.2402%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (56 samples, 0.19%)</title><rect x="78.0073%" y="181" width="0.1912%" height="15" fill="rgb(220,86,6)" fg:x="22846" fg:w="56"/><text x="78.2573%" y="191.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::amortized_new_size (16 samples, 0.05%)</title><rect x="78.1985%" y="229" width="0.0546%" height="15" fill="rgb(240,20,13)" fg:x="22902" fg:w="16"/><text x="78.4485%" y="239.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::current_layout (9 samples, 0.03%)</title><rect x="78.2531%" y="229" width="0.0307%" height="15" fill="rgb(217,89,34)" fg:x="22918" fg:w="9"/><text x="78.5031%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array (24 samples, 0.08%)</title><rect x="78.2839%" y="229" width="0.0819%" height="15" fill="rgb(229,13,5)" fg:x="22927" fg:w="24"/><text x="78.5339%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (24 samples, 0.08%)</title><rect x="78.2839%" y="213" width="0.0819%" height="15" fill="rgb(244,67,35)" fg:x="22927" fg:w="24"/><text x="78.5339%" y="223.50"></text></g><g><title>bumpalo::collections::vec::Vec&lt;T&gt;::reserve (229 samples, 0.78%)</title><rect x="77.6283%" y="277" width="0.7819%" height="15" fill="rgb(221,40,2)" fg:x="22735" fg:w="229"/><text x="77.8783%" y="287.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve (209 samples, 0.71%)</title><rect x="77.6966%" y="261" width="0.7136%" height="15" fill="rgb(237,157,21)" fg:x="22755" fg:w="209"/><text x="77.9466%" y="271.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve_internal (186 samples, 0.64%)</title><rect x="77.7751%" y="245" width="0.6351%" height="15" fill="rgb(222,94,11)" fg:x="22778" fg:w="186"/><text x="78.0251%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (13 samples, 0.04%)</title><rect x="78.3658%" y="229" width="0.0444%" height="15" fill="rgb(249,113,6)" fg:x="22951" fg:w="13"/><text x="78.6158%" y="239.50"></text></g><g><title>bumpalo::collections::vec::Vec&lt;T&gt;::push (280 samples, 0.96%)</title><rect x="77.5907%" y="293" width="0.9561%" height="15" fill="rgb(238,137,36)" fg:x="22724" fg:w="280"/><text x="77.8407%" y="303.50"></text></g><g><title>core::ptr::write (40 samples, 0.14%)</title><rect x="78.4102%" y="277" width="0.1366%" height="15" fill="rgb(210,102,26)" fg:x="22964" fg:w="40"/><text x="78.6602%" y="287.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_vec (5 samples, 0.02%)</title><rect x="78.5468%" y="293" width="0.0171%" height="15" fill="rgb(218,30,30)" fg:x="23004" fg:w="5"/><text x="78.7968%" y="303.50"></text></g><g><title>bumpalo::collections::vec::Vec&lt;T&gt;::new_in (4 samples, 0.01%)</title><rect x="78.5502%" y="277" width="0.0137%" height="15" fill="rgb(214,67,26)" fg:x="23005" fg:w="4"/><text x="78.8002%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (7 samples, 0.02%)</title><rect x="78.6322%" y="197" width="0.0239%" height="15" fill="rgb(251,9,53)" fg:x="23029" fg:w="7"/><text x="78.8822%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (5 samples, 0.02%)</title><rect x="78.6561%" y="197" width="0.0171%" height="15" fill="rgb(228,204,25)" fg:x="23036" fg:w="5"/><text x="78.9061%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (5 samples, 0.02%)</title><rect x="78.6561%" y="181" width="0.0171%" height="15" fill="rgb(207,153,8)" fg:x="23036" fg:w="5"/><text x="78.9061%" y="191.50"></text></g><g><title>core::mem::replace (5 samples, 0.02%)</title><rect x="78.6561%" y="165" width="0.0171%" height="15" fill="rgb(242,9,16)" fg:x="23036" fg:w="5"/><text x="78.9061%" y="175.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShlRule::derive_from (3 samples, 0.01%)</title><rect x="78.6629%" y="149" width="0.0102%" height="15" fill="rgb(217,211,10)" fg:x="23038" fg:w="3"/><text x="78.9129%" y="159.50"></text></g><g><title>bumpalo::Bump::alloc_layout (23 samples, 0.08%)</title><rect x="78.6048%" y="245" width="0.0785%" height="15" fill="rgb(219,228,52)" fg:x="23021" fg:w="23"/><text x="78.8548%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (23 samples, 0.08%)</title><rect x="78.6048%" y="229" width="0.0785%" height="15" fill="rgb(231,92,29)" fg:x="23021" fg:w="23"/><text x="78.8548%" y="239.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (23 samples, 0.08%)</title><rect x="78.6048%" y="213" width="0.0785%" height="15" fill="rgb(232,8,23)" fg:x="23021" fg:w="23"/><text x="78.8548%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_sub (3 samples, 0.01%)</title><rect x="78.6731%" y="197" width="0.0102%" height="15" fill="rgb(216,211,34)" fg:x="23041" fg:w="3"/><text x="78.9231%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_offset (3 samples, 0.01%)</title><rect x="78.6731%" y="181" width="0.0102%" height="15" fill="rgb(236,151,0)" fg:x="23041" fg:w="3"/><text x="78.9231%" y="191.50"></text></g><g><title>core::ptr::write (266 samples, 0.91%)</title><rect x="78.6902%" y="245" width="0.9083%" height="15" fill="rgb(209,168,3)" fg:x="23046" fg:w="266"/><text x="78.9402%" y="255.50"></text></g><g><title>__memset_avx2_unaligned_erms (263 samples, 0.90%)</title><rect x="78.7004%" y="229" width="0.8980%" height="15" fill="rgb(208,129,28)" fg:x="23049" fg:w="263"/><text x="78.9504%" y="239.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (293 samples, 1.00%)</title><rect x="78.6048%" y="261" width="1.0004%" height="15" fill="rgb(229,78,22)" fg:x="23021" fg:w="293"/><text x="78.8548%" y="271.50"></text></g><g><title>dryadsynth_bv::bv::Context::collect_with_indices2 (1,036 samples, 3.54%)</title><rect x="76.0815%" y="309" width="3.5374%" height="15" fill="rgb(228,187,13)" fg:x="22282" fg:w="1036"/><text x="76.3315%" y="319.50">dry..</text></g><g><title>dryadsynth_bv::bv::Context::alloc_zeros (309 samples, 1.06%)</title><rect x="78.5639%" y="293" width="1.0551%" height="15" fill="rgb(240,119,24)" fg:x="23009" fg:w="309"/><text x="78.8139%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_default (297 samples, 1.01%)</title><rect x="78.6048%" y="277" width="1.0141%" height="15" fill="rgb(209,194,42)" fg:x="23021" fg:w="297"/><text x="78.8548%" y="287.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShlRule::derive_from (4 samples, 0.01%)</title><rect x="79.6053%" y="261" width="0.0137%" height="15" fill="rgb(247,200,46)" fg:x="23314" fg:w="4"/><text x="79.8553%" y="271.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShlRule::derive_from (1,324 samples, 4.52%)</title><rect x="75.2689%" y="325" width="4.5208%" height="15" fill="rgb(218,76,16)" fg:x="22044" fg:w="1324"/><text x="75.5189%" y="335.50">dryad..</text></g><g><title>dryadsynth_bv::rule::shift::ShlRule::derive_from (50 samples, 0.17%)</title><rect x="79.6189%" y="309" width="0.1707%" height="15" fill="rgb(225,21,48)" fg:x="23318" fg:w="50"/><text x="79.8689%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.13%)</title><rect x="81.5720%" y="293" width="0.1263%" height="15" fill="rgb(239,223,50)" fg:x="23890" fg:w="37"/><text x="81.8220%" y="303.50"></text></g><g><title>dryadsynth_bv::bv::Hint::zip::{{closure}} (155 samples, 0.53%)</title><rect x="81.7598%" y="261" width="0.5292%" height="15" fill="rgb(244,45,21)" fg:x="23945" fg:w="155"/><text x="82.0098%" y="271.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Bv as core::ops::index::Index&lt;usize&gt;&gt;::index (22 samples, 0.08%)</title><rect x="82.2140%" y="245" width="0.0751%" height="15" fill="rgb(232,33,43)" fg:x="24078" fg:w="22"/><text x="82.4640%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (186 samples, 0.64%)</title><rect x="81.6984%" y="293" width="0.6351%" height="15" fill="rgb(209,8,3)" fg:x="23927" fg:w="186"/><text x="81.9484%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (186 samples, 0.64%)</title><rect x="81.6984%" y="277" width="0.6351%" height="15" fill="rgb(214,25,53)" fg:x="23927" fg:w="186"/><text x="81.9484%" y="287.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShrRule::derive_from (13 samples, 0.04%)</title><rect x="82.2891%" y="261" width="0.0444%" height="15" fill="rgb(254,186,54)" fg:x="24100" fg:w="13"/><text x="82.5391%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (230 samples, 0.79%)</title><rect x="81.5720%" y="309" width="0.7853%" height="15" fill="rgb(208,174,49)" fg:x="23890" fg:w="230"/><text x="81.8220%" y="319.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShrRule::derive_from (7 samples, 0.02%)</title><rect x="82.3335%" y="293" width="0.0239%" height="15" fill="rgb(233,191,51)" fg:x="24113" fg:w="7"/><text x="82.5835%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (7 samples, 0.02%)</title><rect x="82.3574%" y="309" width="0.0239%" height="15" fill="rgb(222,134,10)" fg:x="24120" fg:w="7"/><text x="82.6074%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (38 samples, 0.13%)</title><rect x="83.0437%" y="261" width="0.1298%" height="15" fill="rgb(230,226,20)" fg:x="24321" fg:w="38"/><text x="83.2937%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (59 samples, 0.20%)</title><rect x="83.1734%" y="261" width="0.2015%" height="15" fill="rgb(251,111,25)" fg:x="24359" fg:w="59"/><text x="83.4234%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (8 samples, 0.03%)</title><rect x="83.3749%" y="261" width="0.0273%" height="15" fill="rgb(224,40,46)" fg:x="24418" fg:w="8"/><text x="83.6249%" y="271.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.06%)</title><rect x="84.8192%" y="165" width="0.0615%" height="15" fill="rgb(236,108,47)" fg:x="24841" fg:w="18"/><text x="85.0692%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (100 samples, 0.34%)</title><rect x="84.8807%" y="165" width="0.3414%" height="15" fill="rgb(234,93,0)" fg:x="24859" fg:w="100"/><text x="85.1307%" y="175.50"></text></g><g><title>_int_free (218 samples, 0.74%)</title><rect x="85.2221%" y="165" width="0.7444%" height="15" fill="rgb(224,213,32)" fg:x="24959" fg:w="218"/><text x="85.4721%" y="175.50"></text></g><g><title>_int_malloc (505 samples, 1.72%)</title><rect x="85.9665%" y="165" width="1.7243%" height="15" fill="rgb(251,11,48)" fg:x="25177" fg:w="505"/><text x="86.2165%" y="175.50"></text></g><g><title>unlink_chunk.constprop.0 (12 samples, 0.04%)</title><rect x="87.6498%" y="149" width="0.0410%" height="15" fill="rgb(236,173,5)" fg:x="25670" fg:w="12"/><text x="87.8998%" y="159.50"></text></g><g><title>__GI___libc_realloc (1,187 samples, 4.05%)</title><rect x="83.6583%" y="197" width="4.0530%" height="15" fill="rgb(230,95,12)" fg:x="24501" fg:w="1187"/><text x="83.9083%" y="207.50">__GI..</text></g><g><title>_int_realloc (1,000 samples, 3.41%)</title><rect x="84.2968%" y="181" width="3.4145%" height="15" fill="rgb(232,209,1)" fg:x="24688" fg:w="1000"/><text x="84.5468%" y="191.50">_in..</text></g><g><title>unlink_chunk.constprop.0 (6 samples, 0.02%)</title><rect x="87.6908%" y="165" width="0.0205%" height="15" fill="rgb(232,6,1)" fg:x="25682" fg:w="6"/><text x="87.9408%" y="175.50"></text></g><g><title>__rdl_realloc (33 samples, 0.11%)</title><rect x="87.7113%" y="197" width="0.1127%" height="15" fill="rgb(210,224,50)" fg:x="25688" fg:w="33"/><text x="87.9613%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (22 samples, 0.08%)</title><rect x="87.7488%" y="181" width="0.0751%" height="15" fill="rgb(228,127,35)" fg:x="25699" fg:w="22"/><text x="87.9988%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,251 samples, 4.27%)</title><rect x="83.5729%" y="245" width="4.2715%" height="15" fill="rgb(245,102,45)" fg:x="24476" fg:w="1251"/><text x="83.8229%" y="255.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::grow_impl (1,251 samples, 4.27%)</title><rect x="83.5729%" y="229" width="4.2715%" height="15" fill="rgb(214,1,49)" fg:x="24476" fg:w="1251"/><text x="83.8229%" y="239.50">alloc..</text></g><g><title>alloc::alloc::realloc (1,244 samples, 4.25%)</title><rect x="83.5968%" y="213" width="4.2476%" height="15" fill="rgb(226,163,40)" fg:x="24483" fg:w="1244"/><text x="83.8468%" y="223.50">alloc..</text></g><g><title>__rust_realloc (6 samples, 0.02%)</title><rect x="87.8239%" y="197" width="0.0205%" height="15" fill="rgb(239,212,28)" fg:x="25721" fg:w="6"/><text x="88.0739%" y="207.50"></text></g><g><title>__GI___libc_malloc (111 samples, 0.38%)</title><rect x="87.8444%" y="245" width="0.3790%" height="15" fill="rgb(220,20,13)" fg:x="25727" fg:w="111"/><text x="88.0944%" y="255.50"></text></g><g><title>__rdl_alloc (16 samples, 0.05%)</title><rect x="88.2234%" y="245" width="0.0546%" height="15" fill="rgb(210,164,35)" fg:x="25838" fg:w="16"/><text x="88.4734%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16 samples, 0.05%)</title><rect x="88.2234%" y="229" width="0.0546%" height="15" fill="rgb(248,109,41)" fg:x="25838" fg:w="16"/><text x="88.4734%" y="239.50"></text></g><g><title>__rust_alloc (4 samples, 0.01%)</title><rect x="88.2781%" y="245" width="0.0137%" height="15" fill="rgb(238,23,50)" fg:x="25854" fg:w="4"/><text x="88.5281%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,475 samples, 5.04%)</title><rect x="83.4022%" y="261" width="5.0364%" height="15" fill="rgb(211,48,49)" fg:x="24426" fg:w="1475"/><text x="83.6522%" y="271.50">alloc:..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (43 samples, 0.15%)</title><rect x="88.2917%" y="245" width="0.1468%" height="15" fill="rgb(223,36,21)" fg:x="25858" fg:w="43"/><text x="88.5417%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array (18 samples, 0.06%)</title><rect x="88.4386%" y="261" width="0.0615%" height="15" fill="rgb(207,123,46)" fg:x="25901" fg:w="18"/><text x="88.6886%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (18 samples, 0.06%)</title><rect x="88.4386%" y="245" width="0.0615%" height="15" fill="rgb(240,218,32)" fg:x="25901" fg:w="18"/><text x="88.6886%" y="255.50"></text></g><g><title>core::cmp::max (102 samples, 0.35%)</title><rect x="88.5000%" y="261" width="0.3483%" height="15" fill="rgb(252,5,43)" fg:x="25919" fg:w="102"/><text x="88.7500%" y="271.50"></text></g><g><title>core::cmp::Ord::max (102 samples, 0.35%)</title><rect x="88.5000%" y="245" width="0.3483%" height="15" fill="rgb(252,84,19)" fg:x="25919" fg:w="102"/><text x="88.7500%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,722 samples, 5.88%)</title><rect x="82.9822%" y="293" width="5.8797%" height="15" fill="rgb(243,152,39)" fg:x="24303" fg:w="1722"/><text x="83.2322%" y="303.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,722 samples, 5.88%)</title><rect x="82.9822%" y="277" width="5.8797%" height="15" fill="rgb(234,160,15)" fg:x="24303" fg:w="1722"/><text x="83.2322%" y="287.50">alloc::..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (4 samples, 0.01%)</title><rect x="88.8483%" y="261" width="0.0137%" height="15" fill="rgb(237,34,20)" fg:x="26021" fg:w="4"/><text x="89.0983%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (4 samples, 0.01%)</title><rect x="88.8483%" y="245" width="0.0137%" height="15" fill="rgb(229,97,13)" fg:x="26021" fg:w="4"/><text x="89.0983%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (37 samples, 0.13%)</title><rect x="88.8620%" y="293" width="0.1263%" height="15" fill="rgb(234,71,50)" fg:x="26025" fg:w="37"/><text x="89.1120%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (37 samples, 0.13%)</title><rect x="88.8620%" y="277" width="0.1263%" height="15" fill="rgb(253,155,4)" fg:x="26025" fg:w="37"/><text x="89.1120%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,029 samples, 6.93%)</title><rect x="82.3813%" y="309" width="6.9280%" height="15" fill="rgb(222,185,37)" fg:x="24127" fg:w="2029"/><text x="82.6313%" y="319.50">alloc::ve..</text></g><g><title>core::ptr::write (94 samples, 0.32%)</title><rect x="88.9883%" y="293" width="0.3210%" height="15" fill="rgb(251,177,13)" fg:x="26062" fg:w="94"/><text x="89.2383%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (11 samples, 0.04%)</title><rect x="89.3092%" y="309" width="0.0376%" height="15" fill="rgb(250,179,40)" fg:x="26156" fg:w="11"/><text x="89.5592%" y="319.50"></text></g><g><title>core::num::&lt;impl u32&gt;::saturating_sub (38 samples, 0.13%)</title><rect x="89.3468%" y="309" width="0.1298%" height="15" fill="rgb(242,44,2)" fg:x="26167" fg:w="38"/><text x="89.5968%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (190 samples, 0.65%)</title><rect x="89.4766%" y="309" width="0.6488%" height="15" fill="rgb(216,177,13)" fg:x="26205" fg:w="190"/><text x="89.7266%" y="319.50"></text></g><g><title>__GI___libc_free (10 samples, 0.03%)</title><rect x="90.1526%" y="229" width="0.0341%" height="15" fill="rgb(216,106,43)" fg:x="26403" fg:w="10"/><text x="90.4026%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (36 samples, 0.12%)</title><rect x="90.1526%" y="261" width="0.1229%" height="15" fill="rgb(216,183,2)" fg:x="26403" fg:w="36"/><text x="90.4026%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (36 samples, 0.12%)</title><rect x="90.1526%" y="245" width="0.1229%" height="15" fill="rgb(249,75,3)" fg:x="26403" fg:w="36"/><text x="90.4026%" y="255.50"></text></g><g><title>_int_free (26 samples, 0.09%)</title><rect x="90.1868%" y="229" width="0.0888%" height="15" fill="rgb(219,67,39)" fg:x="26413" fg:w="26"/><text x="90.4368%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (45 samples, 0.15%)</title><rect x="90.1253%" y="309" width="0.1537%" height="15" fill="rgb(253,228,2)" fg:x="26395" fg:w="45"/><text x="90.3753%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (45 samples, 0.15%)</title><rect x="90.1253%" y="293" width="0.1537%" height="15" fill="rgb(235,138,27)" fg:x="26395" fg:w="45"/><text x="90.3753%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.15%)</title><rect x="90.1253%" y="277" width="0.1537%" height="15" fill="rgb(236,97,51)" fg:x="26395" fg:w="45"/><text x="90.3753%" y="287.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::get (6 samples, 0.02%)</title><rect x="90.3575%" y="261" width="0.0205%" height="15" fill="rgb(240,80,30)" fg:x="26463" fg:w="6"/><text x="90.6075%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (6 samples, 0.02%)</title><rect x="90.3575%" y="245" width="0.0205%" height="15" fill="rgb(230,178,19)" fg:x="26463" fg:w="6"/><text x="90.6075%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6 samples, 0.02%)</title><rect x="90.3575%" y="229" width="0.0205%" height="15" fill="rgb(210,190,27)" fg:x="26463" fg:w="6"/><text x="90.6075%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (6 samples, 0.02%)</title><rect x="90.3575%" y="213" width="0.0205%" height="15" fill="rgb(222,107,31)" fg:x="26463" fg:w="6"/><text x="90.6075%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (6 samples, 0.02%)</title><rect x="90.3575%" y="197" width="0.0205%" height="15" fill="rgb(216,127,34)" fg:x="26463" fg:w="6"/><text x="90.6075%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (107 samples, 0.37%)</title><rect x="90.3780%" y="245" width="0.3653%" height="15" fill="rgb(234,116,52)" fg:x="26469" fg:w="107"/><text x="90.6280%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::move_to (110 samples, 0.38%)</title><rect x="90.3780%" y="261" width="0.3756%" height="15" fill="rgb(222,124,15)" fg:x="26469" fg:w="110"/><text x="90.6280%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.01%)</title><rect x="90.7433%" y="245" width="0.0102%" height="15" fill="rgb(231,179,28)" fg:x="26576" fg:w="3"/><text x="90.9933%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.01%)</title><rect x="90.7433%" y="229" width="0.0102%" height="15" fill="rgb(226,93,45)" fg:x="26576" fg:w="3"/><text x="90.9933%" y="239.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (18 samples, 0.06%)</title><rect x="90.7536%" y="245" width="0.0615%" height="15" fill="rgb(215,8,51)" fg:x="26579" fg:w="18"/><text x="91.0036%" y="255.50"></text></g><g><title>alloc::collections::binary_heap::Hole&lt;T&gt;::new (20 samples, 0.07%)</title><rect x="90.7536%" y="261" width="0.0683%" height="15" fill="rgb(223,106,5)" fg:x="26579" fg:w="20"/><text x="91.0036%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (234 samples, 0.80%)</title><rect x="90.8219%" y="261" width="0.7990%" height="15" fill="rgb(250,191,5)" fg:x="26599" fg:w="234"/><text x="91.0719%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::le (234 samples, 0.80%)</title><rect x="90.8219%" y="245" width="0.7990%" height="15" fill="rgb(242,132,44)" fg:x="26599" fg:w="234"/><text x="91.0719%" y="255.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::PartialOrd&gt;::partial_cmp (234 samples, 0.80%)</title><rect x="90.8219%" y="229" width="0.7990%" height="15" fill="rgb(251,152,29)" fg:x="26599" fg:w="234"/><text x="91.0719%" y="239.50"></text></g><g><title>&lt;dryadsynth_bv::algo::State as core::cmp::Ord&gt;::cmp (234 samples, 0.80%)</title><rect x="90.8219%" y="213" width="0.7990%" height="15" fill="rgb(218,179,5)" fg:x="26599" fg:w="234"/><text x="91.0719%" y="223.50"></text></g><g><title>dryadsynth_bv::algo::State::evaluate (232 samples, 0.79%)</title><rect x="90.8287%" y="197" width="0.7922%" height="15" fill="rgb(227,67,19)" fg:x="26601" fg:w="232"/><text x="91.0787%" y="207.50"></text></g><g><title>core::cmp::min (18 samples, 0.06%)</title><rect x="91.5594%" y="181" width="0.0615%" height="15" fill="rgb(233,119,31)" fg:x="26815" fg:w="18"/><text x="91.8094%" y="191.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShrRule::derive_from (18 samples, 0.06%)</title><rect x="91.5594%" y="165" width="0.0615%" height="15" fill="rgb(241,120,22)" fg:x="26815" fg:w="18"/><text x="91.8094%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.04%)</title><rect x="91.6209%" y="229" width="0.0410%" height="15" fill="rgb(224,102,30)" fg:x="26833" fg:w="12"/><text x="91.8709%" y="239.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::sift_up (406 samples, 1.39%)</title><rect x="90.2824%" y="277" width="1.3863%" height="15" fill="rgb(210,164,37)" fg:x="26441" fg:w="406"/><text x="90.5324%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::binary_heap::Hole&lt;dryadsynth_bv::algo::State&gt;&gt; (14 samples, 0.05%)</title><rect x="91.6209%" y="261" width="0.0478%" height="15" fill="rgb(226,191,16)" fg:x="26833" fg:w="14"/><text x="91.8709%" y="271.50"></text></g><g><title>&lt;alloc::collections::binary_heap::Hole&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.05%)</title><rect x="91.6209%" y="245" width="0.0478%" height="15" fill="rgb(214,40,45)" fg:x="26833" fg:w="14"/><text x="91.8709%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (13 samples, 0.04%)</title><rect x="91.6891%" y="261" width="0.0444%" height="15" fill="rgb(244,29,26)" fg:x="26853" fg:w="13"/><text x="91.9391%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13 samples, 0.04%)</title><rect x="91.6891%" y="245" width="0.0444%" height="15" fill="rgb(216,16,5)" fg:x="26853" fg:w="13"/><text x="91.9391%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (77 samples, 0.26%)</title><rect x="91.6687%" y="277" width="0.2629%" height="15" fill="rgb(249,76,35)" fg:x="26847" fg:w="77"/><text x="91.9187%" y="287.50"></text></g><g><title>core::ptr::write (58 samples, 0.20%)</title><rect x="91.7335%" y="261" width="0.1980%" height="15" fill="rgb(207,11,44)" fg:x="26866" fg:w="58"/><text x="91.9835%" y="271.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::push (517 samples, 1.77%)</title><rect x="90.2790%" y="293" width="1.7653%" height="15" fill="rgb(228,190,49)" fg:x="26440" fg:w="517"/><text x="90.5290%" y="303.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShrRule::derive_from (33 samples, 0.11%)</title><rect x="91.9316%" y="277" width="0.1127%" height="15" fill="rgb(214,173,12)" fg:x="26924" fg:w="33"/><text x="92.1816%" y="287.50"></text></g><g><title>dryadsynth_bv::algo::Algo::push (522 samples, 1.78%)</title><rect x="90.2790%" y="309" width="1.7824%" height="15" fill="rgb(218,26,35)" fg:x="26440" fg:w="522"/><text x="90.5290%" y="319.50">d..</text></g><g><title>dryadsynth_bv::rule::shift::ShrRule::derive_from (5 samples, 0.02%)</title><rect x="92.0443%" y="293" width="0.0171%" height="15" fill="rgb(220,200,19)" fg:x="26957" fg:w="5"/><text x="92.2943%" y="303.50"></text></g><g><title>dryadsynth_bv::algo::State::derive (118 samples, 0.40%)</title><rect x="92.0613%" y="309" width="0.4029%" height="15" fill="rgb(239,95,49)" fg:x="26962" fg:w="118"/><text x="92.3113%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (7 samples, 0.02%)</title><rect x="92.5155%" y="213" width="0.0239%" height="15" fill="rgb(235,85,53)" fg:x="27095" fg:w="7"/><text x="92.7655%" y="223.50"></text></g><g><title>bumpalo::Bump::alloc_layout (17 samples, 0.06%)</title><rect x="92.4881%" y="261" width="0.0580%" height="15" fill="rgb(233,133,31)" fg:x="27087" fg:w="17"/><text x="92.7381%" y="271.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (17 samples, 0.06%)</title><rect x="92.4881%" y="245" width="0.0580%" height="15" fill="rgb(218,25,20)" fg:x="27087" fg:w="17"/><text x="92.7381%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (17 samples, 0.06%)</title><rect x="92.4881%" y="229" width="0.0580%" height="15" fill="rgb(252,210,38)" fg:x="27087" fg:w="17"/><text x="92.7381%" y="239.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc (133 samples, 0.45%)</title><rect x="92.4642%" y="309" width="0.4541%" height="15" fill="rgb(242,134,21)" fg:x="27080" fg:w="133"/><text x="92.7142%" y="319.50"></text></g><g><title>bumpalo::Bump::alloc (126 samples, 0.43%)</title><rect x="92.4881%" y="293" width="0.4302%" height="15" fill="rgb(213,28,48)" fg:x="27087" fg:w="126"/><text x="92.7381%" y="303.50"></text></g><g><title>bumpalo::Bump::alloc_with (126 samples, 0.43%)</title><rect x="92.4881%" y="277" width="0.4302%" height="15" fill="rgb(250,196,2)" fg:x="27087" fg:w="126"/><text x="92.7381%" y="287.50"></text></g><g><title>bumpalo::Bump::alloc_with::inner_writer (109 samples, 0.37%)</title><rect x="92.5462%" y="261" width="0.3722%" height="15" fill="rgb(227,5,17)" fg:x="27104" fg:w="109"/><text x="92.7962%" y="271.50"></text></g><g><title>core::ptr::write (109 samples, 0.37%)</title><rect x="92.5462%" y="245" width="0.3722%" height="15" fill="rgb(221,226,24)" fg:x="27104" fg:w="109"/><text x="92.7962%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (13 samples, 0.04%)</title><rect x="92.9184%" y="293" width="0.0444%" height="15" fill="rgb(211,5,48)" fg:x="27213" fg:w="13"/><text x="93.1684%" y="303.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (13 samples, 0.04%)</title><rect x="92.9184%" y="277" width="0.0444%" height="15" fill="rgb(219,150,6)" fg:x="27213" fg:w="13"/><text x="93.1684%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (9 samples, 0.03%)</title><rect x="92.9764%" y="197" width="0.0307%" height="15" fill="rgb(251,46,16)" fg:x="27230" fg:w="9"/><text x="93.2264%" y="207.50"></text></g><g><title>bumpalo::Bump::alloc_layout (15 samples, 0.05%)</title><rect x="92.9627%" y="245" width="0.0512%" height="15" fill="rgb(220,204,40)" fg:x="27226" fg:w="15"/><text x="93.2127%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (15 samples, 0.05%)</title><rect x="92.9627%" y="229" width="0.0512%" height="15" fill="rgb(211,85,2)" fg:x="27226" fg:w="15"/><text x="93.2127%" y="239.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (15 samples, 0.05%)</title><rect x="92.9627%" y="213" width="0.0512%" height="15" fill="rgb(229,17,7)" fg:x="27226" fg:w="15"/><text x="93.2127%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.01%)</title><rect x="93.2769%" y="213" width="0.0137%" height="15" fill="rgb(239,72,28)" fg:x="27318" fg:w="4"/><text x="93.5269%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (4 samples, 0.01%)</title><rect x="93.2769%" y="197" width="0.0137%" height="15" fill="rgb(230,47,54)" fg:x="27318" fg:w="4"/><text x="93.5269%" y="207.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (113 samples, 0.39%)</title><rect x="93.0140%" y="229" width="0.3858%" height="15" fill="rgb(214,50,8)" fg:x="27241" fg:w="113"/><text x="93.2640%" y="239.50"></text></g><g><title>core::ptr::read (32 samples, 0.11%)</title><rect x="93.2905%" y="213" width="0.1093%" height="15" fill="rgb(216,198,43)" fg:x="27322" fg:w="32"/><text x="93.5405%" y="223.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter::{{closure}} (115 samples, 0.39%)</title><rect x="93.0140%" y="245" width="0.3927%" height="15" fill="rgb(234,20,35)" fg:x="27241" fg:w="115"/><text x="93.2640%" y="255.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (13 samples, 0.04%)</title><rect x="93.4203%" y="213" width="0.0444%" height="15" fill="rgb(254,45,19)" fg:x="27360" fg:w="13"/><text x="93.6703%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (13 samples, 0.04%)</title><rect x="93.4203%" y="197" width="0.0444%" height="15" fill="rgb(219,14,44)" fg:x="27360" fg:w="13"/><text x="93.6703%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (18 samples, 0.06%)</title><rect x="93.4066%" y="245" width="0.0615%" height="15" fill="rgb(217,220,26)" fg:x="27356" fg:w="18"/><text x="93.6566%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (18 samples, 0.06%)</title><rect x="93.4066%" y="229" width="0.0615%" height="15" fill="rgb(213,158,28)" fg:x="27356" fg:w="18"/><text x="93.6566%" y="239.50"></text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (277 samples, 0.95%)</title><rect x="92.9627%" y="261" width="0.9458%" height="15" fill="rgb(252,51,52)" fg:x="27226" fg:w="277"/><text x="93.2127%" y="271.50"></text></g><g><title>core::ptr::write (129 samples, 0.44%)</title><rect x="93.4681%" y="245" width="0.4405%" height="15" fill="rgb(246,89,16)" fg:x="27374" fg:w="129"/><text x="93.7181%" y="255.50"></text></g><g><title>__GI___libc_free (59 samples, 0.20%)</title><rect x="93.9086%" y="133" width="0.2015%" height="15" fill="rgb(216,158,49)" fg:x="27503" fg:w="59"/><text x="94.1586%" y="143.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.01%)</title><rect x="94.1100%" y="133" width="0.0102%" height="15" fill="rgb(236,107,19)" fg:x="27562" fg:w="3"/><text x="94.3600%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.01%)</title><rect x="94.1100%" y="117" width="0.0102%" height="15" fill="rgb(228,185,30)" fg:x="27562" fg:w="3"/><text x="94.3600%" y="127.50"></text></g><g><title>__rust_dealloc (4 samples, 0.01%)</title><rect x="94.1203%" y="133" width="0.0137%" height="15" fill="rgb(246,134,8)" fg:x="27565" fg:w="4"/><text x="94.3703%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (303 samples, 1.03%)</title><rect x="93.9086%" y="165" width="1.0346%" height="15" fill="rgb(214,143,50)" fg:x="27503" fg:w="303"/><text x="94.1586%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (303 samples, 1.03%)</title><rect x="93.9086%" y="149" width="1.0346%" height="15" fill="rgb(228,75,8)" fg:x="27503" fg:w="303"/><text x="94.1586%" y="159.50"></text></g><g><title>_int_free (237 samples, 0.81%)</title><rect x="94.1339%" y="133" width="0.8092%" height="15" fill="rgb(207,175,4)" fg:x="27569" fg:w="237"/><text x="94.3839%" y="143.50"></text></g><g><title>unlink_chunk.constprop.0 (5 samples, 0.02%)</title><rect x="94.9261%" y="117" width="0.0171%" height="15" fill="rgb(205,108,24)" fg:x="27801" fg:w="5"/><text x="95.1761%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;usize&gt;&gt; (312 samples, 1.07%)</title><rect x="93.9086%" y="261" width="1.0653%" height="15" fill="rgb(244,120,49)" fg:x="27503" fg:w="312"/><text x="94.1586%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (312 samples, 1.07%)</title><rect x="93.9086%" y="245" width="1.0653%" height="15" fill="rgb(223,47,38)" fg:x="27503" fg:w="312"/><text x="94.1586%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;usize,alloc::alloc::Global&gt;&gt; (312 samples, 1.07%)</title><rect x="93.9086%" y="229" width="1.0653%" height="15" fill="rgb(229,179,11)" fg:x="27503" fg:w="312"/><text x="94.1586%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (312 samples, 1.07%)</title><rect x="93.9086%" y="213" width="1.0653%" height="15" fill="rgb(231,122,1)" fg:x="27503" fg:w="312"/><text x="94.1586%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (312 samples, 1.07%)</title><rect x="93.9086%" y="197" width="1.0653%" height="15" fill="rgb(245,119,9)" fg:x="27503" fg:w="312"/><text x="94.1586%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (312 samples, 1.07%)</title><rect x="93.9086%" y="181" width="1.0653%" height="15" fill="rgb(241,163,25)" fg:x="27503" fg:w="312"/><text x="94.1586%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (9 samples, 0.03%)</title><rect x="94.9431%" y="165" width="0.0307%" height="15" fill="rgb(217,214,3)" fg:x="27806" fg:w="9"/><text x="95.1931%" y="175.50"></text></g><g><title>dryadsynth_bv::bv::Context::alloc_iter (590 samples, 2.01%)</title><rect x="92.9627%" y="293" width="2.0145%" height="15" fill="rgb(240,86,28)" fg:x="27226" fg:w="590"/><text x="93.2127%" y="303.50">d..</text></g><g><title>bumpalo::Bump::alloc_slice_fill_iter (590 samples, 2.01%)</title><rect x="92.9627%" y="277" width="2.0145%" height="15" fill="rgb(215,47,9)" fg:x="27226" fg:w="590"/><text x="93.2127%" y="287.50">b..</text></g><g><title>dryadsynth_bv::bv::Context::alloc_indices (607 samples, 2.07%)</title><rect x="92.9184%" y="309" width="2.0726%" height="15" fill="rgb(252,25,45)" fg:x="27213" fg:w="607"/><text x="93.1684%" y="319.50">d..</text></g><g><title>dryadsynth_bv::rule::shift::ShrRule::derive_from (4 samples, 0.01%)</title><rect x="94.9773%" y="293" width="0.0137%" height="15" fill="rgb(251,164,9)" fg:x="27816" fg:w="4"/><text x="95.2273%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.12%)</title><rect x="95.3461%" y="277" width="0.1161%" height="15" fill="rgb(233,194,0)" fg:x="27924" fg:w="34"/><text x="95.5961%" y="287.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShrRule::derive_from (67 samples, 0.23%)</title><rect x="95.5065%" y="245" width="0.2288%" height="15" fill="rgb(249,111,24)" fg:x="27971" fg:w="67"/><text x="95.7565%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (160 samples, 0.55%)</title><rect x="95.4622%" y="277" width="0.5463%" height="15" fill="rgb(250,223,3)" fg:x="27958" fg:w="160"/><text x="95.7122%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (147 samples, 0.50%)</title><rect x="95.5065%" y="261" width="0.5019%" height="15" fill="rgb(236,178,37)" fg:x="27971" fg:w="147"/><text x="95.7565%" y="271.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShrRule::derive_from::{{closure}} (80 samples, 0.27%)</title><rect x="95.7353%" y="245" width="0.2732%" height="15" fill="rgb(241,158,50)" fg:x="28038" fg:w="80"/><text x="95.9853%" y="255.50"></text></g><g><title>&lt;dryadsynth_bv::bv::Bv as core::ops::index::Index&lt;usize&gt;&gt;::index (18 samples, 0.06%)</title><rect x="95.9470%" y="229" width="0.0615%" height="15" fill="rgb(213,121,41)" fg:x="28100" fg:w="18"/><text x="96.1970%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (205 samples, 0.70%)</title><rect x="95.3461%" y="293" width="0.7000%" height="15" fill="rgb(240,92,3)" fg:x="27924" fg:w="205"/><text x="95.5961%" y="303.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShrRule::derive_from (11 samples, 0.04%)</title><rect x="96.0085%" y="277" width="0.0376%" height="15" fill="rgb(205,123,3)" fg:x="28118" fg:w="11"/><text x="96.2585%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (26 samples, 0.09%)</title><rect x="96.2407%" y="197" width="0.0888%" height="15" fill="rgb(205,97,47)" fg:x="28186" fg:w="26"/><text x="96.4907%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (3 samples, 0.01%)</title><rect x="96.3294%" y="197" width="0.0102%" height="15" fill="rgb(247,152,14)" fg:x="28212" fg:w="3"/><text x="96.5794%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3 samples, 0.01%)</title><rect x="96.3294%" y="181" width="0.0102%" height="15" fill="rgb(248,195,53)" fg:x="28212" fg:w="3"/><text x="96.5794%" y="191.50"></text></g><g><title>core::mem::replace (3 samples, 0.01%)</title><rect x="96.3294%" y="165" width="0.0102%" height="15" fill="rgb(226,201,16)" fg:x="28212" fg:w="3"/><text x="96.5794%" y="175.50"></text></g><g><title>bumpalo::Bump::alloc_layout (53 samples, 0.18%)</title><rect x="96.1826%" y="245" width="0.1810%" height="15" fill="rgb(205,98,0)" fg:x="28169" fg:w="53"/><text x="96.4326%" y="255.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout (53 samples, 0.18%)</title><rect x="96.1826%" y="229" width="0.1810%" height="15" fill="rgb(214,191,48)" fg:x="28169" fg:w="53"/><text x="96.4326%" y="239.50"></text></g><g><title>bumpalo::Bump::try_alloc_layout_fast (53 samples, 0.18%)</title><rect x="96.1826%" y="213" width="0.1810%" height="15" fill="rgb(237,112,39)" fg:x="28169" fg:w="53"/><text x="96.4326%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_sub (7 samples, 0.02%)</title><rect x="96.3397%" y="197" width="0.0239%" height="15" fill="rgb(247,203,27)" fg:x="28215" fg:w="7"/><text x="96.5897%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_offset (7 samples, 0.02%)</title><rect x="96.3397%" y="181" width="0.0239%" height="15" fill="rgb(235,124,28)" fg:x="28215" fg:w="7"/><text x="96.5897%" y="191.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (13 samples, 0.04%)</title><rect x="96.3636%" y="245" width="0.0444%" height="15" fill="rgb(208,207,46)" fg:x="28222" fg:w="13"/><text x="96.6136%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (13 samples, 0.04%)</title><rect x="96.3636%" y="229" width="0.0444%" height="15" fill="rgb(234,176,4)" fg:x="28222" fg:w="13"/><text x="96.6136%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3 samples, 0.01%)</title><rect x="96.3977%" y="213" width="0.0102%" height="15" fill="rgb(230,133,28)" fg:x="28232" fg:w="3"/><text x="96.6477%" y="223.50"></text></g><g><title>core::ptr::write (624 samples, 2.13%)</title><rect x="96.4080%" y="245" width="2.1306%" height="15" fill="rgb(211,137,40)" fg:x="28235" fg:w="624"/><text x="96.6580%" y="255.50">c..</text></g><g><title>__memset_avx2_unaligned_erms (613 samples, 2.09%)</title><rect x="96.4455%" y="229" width="2.0931%" height="15" fill="rgb(254,35,13)" fg:x="28246" fg:w="613"/><text x="96.6955%" y="239.50">_..</text></g><g><title>bumpalo::Bump::alloc_slice_fill_with (694 samples, 2.37%)</title><rect x="96.1826%" y="261" width="2.3697%" height="15" fill="rgb(225,49,51)" fg:x="28169" fg:w="694"/><text x="96.4326%" y="271.50">bu..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (4 samples, 0.01%)</title><rect x="98.5386%" y="245" width="0.0137%" height="15" fill="rgb(251,10,15)" fg:x="28859" fg:w="4"/><text x="98.7886%" y="255.50"></text></g><g><title>dryadsynth_bv::bv::Context::collect2 (1,055 samples, 3.60%)</title><rect x="94.9910%" y="309" width="3.6023%" height="15" fill="rgb(228,207,15)" fg:x="27820" fg:w="1055"/><text x="95.2410%" y="319.50">drya..</text></g><g><title>dryadsynth_bv::bv::Context::alloc_zeros (746 samples, 2.55%)</title><rect x="96.0460%" y="293" width="2.5472%" height="15" fill="rgb(241,99,19)" fg:x="28129" fg:w="746"/><text x="96.2960%" y="303.50">dr..</text></g><g><title>bumpalo::Bump::alloc_slice_fill_default (706 samples, 2.41%)</title><rect x="96.1826%" y="277" width="2.4106%" height="15" fill="rgb(207,104,49)" fg:x="28169" fg:w="706"/><text x="96.4326%" y="287.50">bu..</text></g><g><title>dryadsynth_bv::rule::shift::ShrRule::derive_from (12 samples, 0.04%)</title><rect x="98.5523%" y="261" width="0.0410%" height="15" fill="rgb(234,99,18)" fg:x="28863" fg:w="12"/><text x="98.8023%" y="271.50"></text></g><g><title>dryadsynth_bv::rule::BvRule::is_shr (5 samples, 0.02%)</title><rect x="98.5932%" y="309" width="0.0171%" height="15" fill="rgb(213,191,49)" fg:x="28875" fg:w="5"/><text x="98.8432%" y="319.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShrRule::derive_from (5,583 samples, 19.06%)</title><rect x="79.7897%" y="325" width="19.0631%" height="15" fill="rgb(210,226,19)" fg:x="23368" fg:w="5583"/><text x="80.0397%" y="335.50">dryadsynth_bv::rule::shift::Sh..</text></g><g><title>dryadsynth_bv::rule::shift::ShrRule::derive_from (71 samples, 0.24%)</title><rect x="98.6103%" y="309" width="0.2424%" height="15" fill="rgb(229,97,18)" fg:x="28880" fg:w="71"/><text x="98.8603%" y="319.50"></text></g><g><title>dryadsynth_bv::algo::Algo::derive (24,448 samples, 83.48%)</title><rect x="15.3823%" y="341" width="83.4773%" height="15" fill="rgb(211,167,15)" fg:x="4505" fg:w="24448"/><text x="15.6323%" y="351.50">dryadsynth_bv::algo::Algo::derive</text></g><g><title>_start (27,951 samples, 95.44%)</title><rect x="3.5203%" y="629" width="95.4382%" height="15" fill="rgb(210,169,34)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="639.50">_start</text></g><g><title>__libc_start_main (27,951 samples, 95.44%)</title><rect x="3.5203%" y="613" width="95.4382%" height="15" fill="rgb(241,121,31)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="623.50">__libc_start_main</text></g><g><title>main (27,951 samples, 95.44%)</title><rect x="3.5203%" y="597" width="95.4382%" height="15" fill="rgb(232,40,11)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (27,951 samples, 95.44%)</title><rect x="3.5203%" y="581" width="95.4382%" height="15" fill="rgb(205,86,26)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (27,951 samples, 95.44%)</title><rect x="3.5203%" y="565" width="95.4382%" height="15" fill="rgb(231,126,28)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (27,951 samples, 95.44%)</title><rect x="3.5203%" y="549" width="95.4382%" height="15" fill="rgb(219,221,18)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (27,951 samples, 95.44%)</title><rect x="3.5203%" y="533" width="95.4382%" height="15" fill="rgb(211,40,0)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="543.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (27,951 samples, 95.44%)</title><rect x="3.5203%" y="517" width="95.4382%" height="15" fill="rgb(239,85,43)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="527.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (27,951 samples, 95.44%)</title><rect x="3.5203%" y="501" width="95.4382%" height="15" fill="rgb(231,55,21)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (27,951 samples, 95.44%)</title><rect x="3.5203%" y="485" width="95.4382%" height="15" fill="rgb(225,184,43)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (27,951 samples, 95.44%)</title><rect x="3.5203%" y="469" width="95.4382%" height="15" fill="rgb(251,158,41)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="479.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (27,951 samples, 95.44%)</title><rect x="3.5203%" y="453" width="95.4382%" height="15" fill="rgb(234,159,37)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (27,951 samples, 95.44%)</title><rect x="3.5203%" y="437" width="95.4382%" height="15" fill="rgb(216,204,22)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (27,951 samples, 95.44%)</title><rect x="3.5203%" y="421" width="95.4382%" height="15" fill="rgb(214,17,3)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (27,951 samples, 95.44%)</title><rect x="3.5203%" y="405" width="95.4382%" height="15" fill="rgb(212,111,17)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>dryadsynth_bv::main (27,951 samples, 95.44%)</title><rect x="3.5203%" y="389" width="95.4382%" height="15" fill="rgb(221,157,24)" fg:x="1031" fg:w="27951"/><text x="3.7703%" y="399.50">dryadsynth_bv::main</text></g><g><title>dryadsynth_bv::run_algorithm (27,950 samples, 95.43%)</title><rect x="3.5237%" y="373" width="95.4348%" height="15" fill="rgb(252,16,13)" fg:x="1032" fg:w="27950"/><text x="3.7737%" y="383.50">dryadsynth_bv::run_algorithm</text></g><g><title>dryadsynth_bv::algo::Algo::run (27,950 samples, 95.43%)</title><rect x="3.5237%" y="357" width="95.4348%" height="15" fill="rgb(221,62,2)" fg:x="1032" fg:w="27950"/><text x="3.7737%" y="367.50">dryadsynth_bv::algo::Algo::run</text></g><g><title>dryadsynth_bv::algo::Algo::run (29 samples, 0.10%)</title><rect x="98.8596%" y="341" width="0.0990%" height="15" fill="rgb(247,87,22)" fg:x="28953" fg:w="29"/><text x="99.1096%" y="351.50"></text></g><g><title>alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (11 samples, 0.04%)</title><rect x="98.9586%" y="629" width="0.0376%" height="15" fill="rgb(215,73,9)" fg:x="28982" fg:w="11"/><text x="99.2086%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.02%)</title><rect x="99.0030%" y="629" width="0.0205%" height="15" fill="rgb(207,175,33)" fg:x="28995" fg:w="6"/><text x="99.2530%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (23 samples, 0.08%)</title><rect x="99.0235%" y="629" width="0.0785%" height="15" fill="rgb(243,129,54)" fg:x="29001" fg:w="23"/><text x="99.2735%" y="639.50"></text></g><g><title>&lt;&amp;bumpalo::Bump as bumpalo::alloc::Alloc&gt;::realloc (20 samples, 0.07%)</title><rect x="99.1395%" y="597" width="0.0683%" height="15" fill="rgb(227,119,45)" fg:x="29035" fg:w="20"/><text x="99.3895%" y="607.50"></text></g><g><title>bumpalo::Bump::grow (20 samples, 0.07%)</title><rect x="99.1395%" y="581" width="0.0683%" height="15" fill="rgb(205,109,36)" fg:x="29035" fg:w="20"/><text x="99.3895%" y="591.50"></text></g><g><title>core::intrinsics::copy (20 samples, 0.07%)</title><rect x="99.1395%" y="565" width="0.0683%" height="15" fill="rgb(205,6,39)" fg:x="29035" fg:w="20"/><text x="99.3895%" y="575.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve (94 samples, 0.32%)</title><rect x="99.1054%" y="629" width="0.3210%" height="15" fill="rgb(221,32,16)" fg:x="29025" fg:w="94"/><text x="99.3554%" y="639.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::reserve_internal (84 samples, 0.29%)</title><rect x="99.1395%" y="613" width="0.2868%" height="15" fill="rgb(228,144,50)" fg:x="29035" fg:w="84"/><text x="99.3895%" y="623.50"></text></g><g><title>bumpalo::collections::raw_vec::RawVec&lt;T&gt;::cap (64 samples, 0.22%)</title><rect x="99.2078%" y="597" width="0.2185%" height="15" fill="rgb(229,201,53)" fg:x="29055" fg:w="64"/><text x="99.4578%" y="607.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::derive_from (14 samples, 0.05%)</title><rect x="99.4332%" y="629" width="0.0478%" height="15" fill="rgb(249,153,27)" fg:x="29121" fg:w="14"/><text x="99.6832%" y="639.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::derive_from_shr (5 samples, 0.02%)</title><rect x="99.4810%" y="629" width="0.0171%" height="15" fill="rgb(227,106,25)" fg:x="29135" fg:w="5"/><text x="99.7310%" y="639.50"></text></g><g><title>dryadsynth_bv::rule::basic::AcceptRule::new (36 samples, 0.12%)</title><rect x="99.4981%" y="629" width="0.1229%" height="15" fill="rgb(230,65,29)" fg:x="29140" fg:w="36"/><text x="99.7481%" y="639.50"></text></g><g><title>dryadsynth_bv::rule::binary::AddRule::derive_from (26 samples, 0.09%)</title><rect x="99.6210%" y="629" width="0.0888%" height="15" fill="rgb(221,57,46)" fg:x="29176" fg:w="26"/><text x="99.8710%" y="639.50"></text></g><g><title>dryadsynth_bv::rule::binary::AndRule::derive_from (10 samples, 0.03%)</title><rect x="99.7098%" y="629" width="0.0341%" height="15" fill="rgb(229,161,17)" fg:x="29202" fg:w="10"/><text x="99.9598%" y="639.50"></text></g><g><title>dryadsynth_bv::bv::Context::collect_with_indices (3 samples, 0.01%)</title><rect x="99.7337%" y="613" width="0.0102%" height="15" fill="rgb(222,213,11)" fg:x="29209" fg:w="3"/><text x="99.9837%" y="623.50"></text></g><g><title>dryadsynth_bv::rule::binary::OrRule::derive_from (18 samples, 0.06%)</title><rect x="99.7439%" y="629" width="0.0615%" height="15" fill="rgb(235,35,13)" fg:x="29212" fg:w="18"/><text x="99.9939%" y="639.50"></text></g><g><title>dryadsynth_bv::rule::binary::XorRule::derive_from (17 samples, 0.06%)</title><rect x="99.8054%" y="629" width="0.0580%" height="15" fill="rgb(233,158,34)" fg:x="29230" fg:w="17"/><text x="100.0554%" y="639.50"></text></g><g><title>dryadsynth_bv::rule::shift::NotRule::derive_from (16 samples, 0.05%)</title><rect x="99.8634%" y="629" width="0.0546%" height="15" fill="rgb(215,151,48)" fg:x="29247" fg:w="16"/><text x="100.1134%" y="639.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShlRule::derive_from (8 samples, 0.03%)</title><rect x="99.9181%" y="629" width="0.0273%" height="15" fill="rgb(229,84,14)" fg:x="29263" fg:w="8"/><text x="100.1681%" y="639.50"></text></g><g><title>dryadsynth_bv::rule::shift::ShrRule::derive_from (13 samples, 0.04%)</title><rect x="99.9454%" y="629" width="0.0444%" height="15" fill="rgb(229,68,14)" fg:x="29271" fg:w="13"/><text x="100.1954%" y="639.50"></text></g><g><title>all (29,287 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(243,106,26)" fg:x="0" fg:w="29287"/><text x="0.2500%" y="671.50"></text></g><g><title>dryadsynth-bv (29,287 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(206,45,38)" fg:x="0" fg:w="29287"/><text x="0.2500%" y="655.50">dryadsynth-bv</text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.01%)</title><rect x="99.9898%" y="629" width="0.0102%" height="15" fill="rgb(226,6,15)" fg:x="29284" fg:w="3"/><text x="100.2398%" y="639.50"></text></g></svg></svg>
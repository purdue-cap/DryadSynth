
    (set-logic SLIA)
    (synth-fun f ((arg0 String)) String 
        (
            (Start String (ntString)) 
            (ntString String ("an" "San Francisco" "Empty" arg0
                (str.++ ntString ntString) 
                (str.replace ntString ntString ntString) 
                (str.at ntString ntInt)
                (int.to.str ntInt)
                (ite ntBool ntString ntString)
                (str.substr ntString ntInt ntInt)
            )) 
            (ntInt Int (
                1 0 -1
                (+ ntInt ntInt)
                (- ntInt ntInt)
                (str.len ntString)
                (str.to.int ntString)
                (ite ntBool ntInt ntInt)
                (str.indexof ntString ntString ntInt)
            )) 
            (ntBool Bool (
                true false
                (= ntInt ntInt)
                (str.prefixof ntString ntString)
                (str.suffixof ntString ntString)
                (str.contains ntString ntString)
            ))
        )
    )
(constraint (= (f "zzzzzz") "San Francisco"))
(constraint (= (f "") "Empty"))
(constraint (= (f "\u001c") "San Francisco"))
(constraint (= (f "\u001d") "San Francisco"))
(constraint (= (f "\u001e") "San Francisco"))
(constraint (= (f "\u001f") "San Francisco"))
(constraint (= (f "\u0085") "Empty"))
(constraint (= (f "\u00a0") "Empty"))
(constraint (= (f "\u180e") "San Francisco"))
(constraint (= (f "\u2007") "Empty"))
(constraint (= (f "\u202f") "Empty"))
(constraint (= (f "") "Empty"))
(constraint (= (f "SAN FRANCISCO") "San Francisco"))
(constraint (= (f "san francisco") "San Francisco"))
(check-synth)
